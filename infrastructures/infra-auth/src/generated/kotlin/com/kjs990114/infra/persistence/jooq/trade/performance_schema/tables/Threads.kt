/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ThreadsExecutionEngine
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ThreadsHistory
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ThreadsInstrumented
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ThreadsTelemetryActive
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.THREADS_NAME
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.THREADS_PROCESSLIST_ACCOUNT
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.THREADS_PROCESSLIST_HOST
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.THREADS_PROCESSLIST_ID
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.THREADS_RESOURCE_GROUP
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.THREADS_THREAD_OS_ID
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_THREADS_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.ThreadsRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Threads(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ThreadsRecord>?,
    parentPath: InverseForeignKey<out Record, ThreadsRecord>?,
    aliased: Table<ThreadsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ThreadsRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.threads</code>
         */
        val THREADS: Threads = Threads()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ThreadsRecord> = ThreadsRecord::class.java

    /**
     * The column <code>performance_schema.threads.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<ThreadsRecord, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.NAME</code>.
     */
    val NAME: TableField<ThreadsRecord, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.TYPE</code>.
     */
    val TYPE: TableField<ThreadsRecord, String?> = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_ID</code>.
     */
    val PROCESSLIST_ID: TableField<ThreadsRecord, ULong?> = createField(DSL.name("PROCESSLIST_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_USER</code>.
     */
    val PROCESSLIST_USER: TableField<ThreadsRecord, String?> = createField(DSL.name("PROCESSLIST_USER"), SQLDataType.VARCHAR(32), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_HOST</code>.
     */
    val PROCESSLIST_HOST: TableField<ThreadsRecord, String?> = createField(DSL.name("PROCESSLIST_HOST"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_DB</code>.
     */
    val PROCESSLIST_DB: TableField<ThreadsRecord, String?> = createField(DSL.name("PROCESSLIST_DB"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_COMMAND</code>.
     */
    val PROCESSLIST_COMMAND: TableField<ThreadsRecord, String?> = createField(DSL.name("PROCESSLIST_COMMAND"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_TIME</code>.
     */
    val PROCESSLIST_TIME: TableField<ThreadsRecord, Long?> = createField(DSL.name("PROCESSLIST_TIME"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_STATE</code>.
     */
    val PROCESSLIST_STATE: TableField<ThreadsRecord, String?> = createField(DSL.name("PROCESSLIST_STATE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.threads.PROCESSLIST_INFO</code>.
     */
    val PROCESSLIST_INFO: TableField<ThreadsRecord, String?> = createField(DSL.name("PROCESSLIST_INFO"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>performance_schema.threads.PARENT_THREAD_ID</code>.
     */
    val PARENT_THREAD_ID: TableField<ThreadsRecord, ULong?> = createField(DSL.name("PARENT_THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.threads.ROLE</code>.
     */
    val ROLE: TableField<ThreadsRecord, String?> = createField(DSL.name("ROLE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.threads.INSTRUMENTED</code>.
     */
    val INSTRUMENTED: TableField<ThreadsRecord, ThreadsInstrumented?> = createField(DSL.name("INSTRUMENTED"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(ThreadsInstrumented::class.java), this, "")

    /**
     * The column <code>performance_schema.threads.HISTORY</code>.
     */
    val HISTORY: TableField<ThreadsRecord, ThreadsHistory?> = createField(DSL.name("HISTORY"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(ThreadsHistory::class.java), this, "")

    /**
     * The column <code>performance_schema.threads.CONNECTION_TYPE</code>.
     */
    val CONNECTION_TYPE: TableField<ThreadsRecord, String?> = createField(DSL.name("CONNECTION_TYPE"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>performance_schema.threads.THREAD_OS_ID</code>.
     */
    val THREAD_OS_ID: TableField<ThreadsRecord, ULong?> = createField(DSL.name("THREAD_OS_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.threads.RESOURCE_GROUP</code>.
     */
    val RESOURCE_GROUP: TableField<ThreadsRecord, String?> = createField(DSL.name("RESOURCE_GROUP"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.threads.EXECUTION_ENGINE</code>.
     */
    val EXECUTION_ENGINE: TableField<ThreadsRecord, ThreadsExecutionEngine?> = createField(DSL.name("EXECUTION_ENGINE"), SQLDataType.VARCHAR(9).asEnumDataType(ThreadsExecutionEngine::class.java), this, "")

    /**
     * The column <code>performance_schema.threads.CONTROLLED_MEMORY</code>.
     */
    val CONTROLLED_MEMORY: TableField<ThreadsRecord, ULong?> = createField(DSL.name("CONTROLLED_MEMORY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.MAX_CONTROLLED_MEMORY</code>.
     */
    val MAX_CONTROLLED_MEMORY: TableField<ThreadsRecord, ULong?> = createField(DSL.name("MAX_CONTROLLED_MEMORY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.TOTAL_MEMORY</code>.
     */
    val TOTAL_MEMORY: TableField<ThreadsRecord, ULong?> = createField(DSL.name("TOTAL_MEMORY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.MAX_TOTAL_MEMORY</code>.
     */
    val MAX_TOTAL_MEMORY: TableField<ThreadsRecord, ULong?> = createField(DSL.name("MAX_TOTAL_MEMORY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.threads.TELEMETRY_ACTIVE</code>.
     */
    val TELEMETRY_ACTIVE: TableField<ThreadsRecord, ThreadsTelemetryActive?> = createField(DSL.name("TELEMETRY_ACTIVE"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(ThreadsTelemetryActive::class.java), this, "")

    private constructor(alias: Name, aliased: Table<ThreadsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ThreadsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ThreadsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>performance_schema.threads</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.threads</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.threads</code> table reference
     */
    constructor(): this(DSL.name("threads"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getIndexes(): List<Index> = listOf(THREADS_NAME, THREADS_PROCESSLIST_ACCOUNT, THREADS_PROCESSLIST_HOST, THREADS_PROCESSLIST_ID, THREADS_RESOURCE_GROUP, THREADS_THREAD_OS_ID)
    override fun getPrimaryKey(): UniqueKey<ThreadsRecord> = KEY_THREADS_PRIMARY
    override fun `as`(alias: String): Threads = Threads(DSL.name(alias), this)
    override fun `as`(alias: Name): Threads = Threads(alias, this)
    override fun `as`(alias: Table<*>): Threads = Threads(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Threads = Threads(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Threads = Threads(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Threads = Threads(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Threads = Threads(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Threads = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Threads = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Threads = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Threads = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Threads = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Threads = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Threads = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Threads = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Threads = where(DSL.notExists(select))
}
