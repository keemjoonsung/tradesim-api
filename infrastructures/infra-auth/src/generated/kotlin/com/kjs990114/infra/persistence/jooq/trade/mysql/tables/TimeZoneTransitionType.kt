/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables


import com.kjs990114.infra.persistence.jooq.trade.mysql.Mysql
import com.kjs990114.infra.persistence.jooq.trade.mysql.keys.KEY_TIME_ZONE_TRANSITION_TYPE_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.TimeZoneTransitionTypeRecord

import java.util.function.Function

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UByte
import org.jooq.types.UInteger


/**
 * Time zone transition types
 */
@Suppress("UNCHECKED_CAST")
open class TimeZoneTransitionType(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TimeZoneTransitionTypeRecord>?,
    parentPath: InverseForeignKey<out Record, TimeZoneTransitionTypeRecord>?,
    aliased: Table<TimeZoneTransitionTypeRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TimeZoneTransitionTypeRecord>(
    alias,
    Mysql.MYSQL,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Time zone transition types"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>mysql.time_zone_transition_type</code>
         */
        val TIME_ZONE_TRANSITION_TYPE: TimeZoneTransitionType = TimeZoneTransitionType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TimeZoneTransitionTypeRecord> = TimeZoneTransitionTypeRecord::class.java

    /**
     * The column <code>mysql.time_zone_transition_type.Time_zone_id</code>.
     */
    val TIME_ZONE_ID: TableField<TimeZoneTransitionTypeRecord, UInteger?> = createField(DSL.name("Time_zone_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>mysql.time_zone_transition_type.Transition_type_id</code>.
     */
    val TRANSITION_TYPE_ID: TableField<TimeZoneTransitionTypeRecord, UInteger?> = createField(DSL.name("Transition_type_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>mysql.time_zone_transition_type.Offset</code>.
     */
    val OFFSET: TableField<TimeZoneTransitionTypeRecord, Int?> = createField(DSL.name("Offset"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>mysql.time_zone_transition_type.Is_DST</code>.
     */
    val IS_DST: TableField<TimeZoneTransitionTypeRecord, UByte?> = createField(DSL.name("Is_DST"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "")

    /**
     * The column <code>mysql.time_zone_transition_type.Abbreviation</code>.
     */
    val ABBREVIATION: TableField<TimeZoneTransitionTypeRecord, String?> = createField(DSL.name("Abbreviation"), SQLDataType.CHAR(8).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    private constructor(alias: Name, aliased: Table<TimeZoneTransitionTypeRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TimeZoneTransitionTypeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TimeZoneTransitionTypeRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>mysql.time_zone_transition_type</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.time_zone_transition_type</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.time_zone_transition_type</code> table reference
     */
    constructor(): this(DSL.name("time_zone_transition_type"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<TimeZoneTransitionTypeRecord> = KEY_TIME_ZONE_TRANSITION_TYPE_PRIMARY
    override fun `as`(alias: String): TimeZoneTransitionType = TimeZoneTransitionType(DSL.name(alias), this)
    override fun `as`(alias: Name): TimeZoneTransitionType = TimeZoneTransitionType(alias, this)
    override fun `as`(alias: Table<*>): TimeZoneTransitionType = TimeZoneTransitionType(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TimeZoneTransitionType = TimeZoneTransitionType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TimeZoneTransitionType = TimeZoneTransitionType(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TimeZoneTransitionType = TimeZoneTransitionType(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TimeZoneTransitionType = TimeZoneTransitionType(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TimeZoneTransitionType = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TimeZoneTransitionType = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TimeZoneTransitionType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TimeZoneTransitionType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TimeZoneTransitionType = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TimeZoneTransitionType = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TimeZoneTransitionType = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TimeZoneTransitionType = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TimeZoneTransitionType = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<UInteger?, UInteger?, Int?, UByte?, String?> = super.fieldsRow() as Row5<UInteger?, UInteger?, Int?, UByte?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UInteger?, UInteger?, Int?, UByte?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UInteger?, UInteger?, Int?, UByte?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
