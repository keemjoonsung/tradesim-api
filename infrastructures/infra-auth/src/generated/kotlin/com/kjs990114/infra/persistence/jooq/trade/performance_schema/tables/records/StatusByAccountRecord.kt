/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.StatusByAccount

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StatusByAccountRecord() : TableRecordImpl<StatusByAccountRecord>(StatusByAccount.STATUS_BY_ACCOUNT), Record4<String?, String?, String?, String?> {

    open var user: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var host: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var variableName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var variableValue: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, String?, String?> = super.fieldsRow() as Row4<String?, String?, String?, String?>
    override fun valuesRow(): Row4<String?, String?, String?, String?> = super.valuesRow() as Row4<String?, String?, String?, String?>
    override fun field1(): Field<String?> = StatusByAccount.STATUS_BY_ACCOUNT.USER
    override fun field2(): Field<String?> = StatusByAccount.STATUS_BY_ACCOUNT.HOST
    override fun field3(): Field<String?> = StatusByAccount.STATUS_BY_ACCOUNT.VARIABLE_NAME
    override fun field4(): Field<String?> = StatusByAccount.STATUS_BY_ACCOUNT.VARIABLE_VALUE
    override fun component1(): String? = user
    override fun component2(): String? = host
    override fun component3(): String? = variableName
    override fun component4(): String? = variableValue
    override fun value1(): String? = user
    override fun value2(): String? = host
    override fun value3(): String? = variableName
    override fun value4(): String? = variableValue

    override fun value1(value: String?): StatusByAccountRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): StatusByAccountRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): StatusByAccountRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): StatusByAccountRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?): StatusByAccountRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised StatusByAccountRecord
     */
    constructor(user: String? = null, host: String? = null, variableName: String? = null, variableValue: String? = null): this() {
        this.user = user
        this.host = host
        this.variableName = variableName
        this.variableValue = variableValue
        resetChangedOnNotNull()
    }
}
