/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import com.kjs990114.infra.persistence.jooq.trade.sys.tables.SessionSslStatus

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SessionSslStatusRecord() : TableRecordImpl<SessionSslStatusRecord>(SessionSslStatus.SESSION_SSL_STATUS), Record4<ULong?, String?, String?, String?> {

    open var threadId: ULong?
        set(value): Unit = set(0, value)
        get(): ULong? = get(0) as ULong?

    open var sslVersion: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var sslCipher: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var sslSessionsReused: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<ULong?, String?, String?, String?> = super.fieldsRow() as Row4<ULong?, String?, String?, String?>
    override fun valuesRow(): Row4<ULong?, String?, String?, String?> = super.valuesRow() as Row4<ULong?, String?, String?, String?>
    override fun field1(): Field<ULong?> = SessionSslStatus.SESSION_SSL_STATUS.THREAD_ID
    override fun field2(): Field<String?> = SessionSslStatus.SESSION_SSL_STATUS.SSL_VERSION
    override fun field3(): Field<String?> = SessionSslStatus.SESSION_SSL_STATUS.SSL_CIPHER
    override fun field4(): Field<String?> = SessionSslStatus.SESSION_SSL_STATUS.SSL_SESSIONS_REUSED
    override fun component1(): ULong? = threadId
    override fun component2(): String? = sslVersion
    override fun component3(): String? = sslCipher
    override fun component4(): String? = sslSessionsReused
    override fun value1(): ULong? = threadId
    override fun value2(): String? = sslVersion
    override fun value3(): String? = sslCipher
    override fun value4(): String? = sslSessionsReused

    override fun value1(value: ULong?): SessionSslStatusRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): SessionSslStatusRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): SessionSslStatusRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): SessionSslStatusRecord {
        set(3, value)
        return this
    }

    override fun values(value1: ULong?, value2: String?, value3: String?, value4: String?): SessionSslStatusRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised SessionSslStatusRecord
     */
    constructor(threadId: ULong? = null, sslVersion: String? = null, sslCipher: String? = null, sslSessionsReused: String? = null): this() {
        this.threadId = threadId
        this.sslVersion = sslVersion
        this.sslCipher = sslCipher
        this.sslSessionsReused = sslSessionsReused
        resetChangedOnNotNull()
    }
}
