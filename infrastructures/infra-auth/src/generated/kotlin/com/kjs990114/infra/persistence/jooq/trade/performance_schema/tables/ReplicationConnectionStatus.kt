/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationConnectionStatusServiceState
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.REPLICATION_CONNECTION_STATUS_THREAD_ID
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_REPLICATION_CONNECTION_STATUS_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.ReplicationConnectionStatusRecord

import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row20
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationConnectionStatus(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ReplicationConnectionStatusRecord>?,
    parentPath: InverseForeignKey<out Record, ReplicationConnectionStatusRecord>?,
    aliased: Table<ReplicationConnectionStatusRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ReplicationConnectionStatusRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>performance_schema.replication_connection_status</code>
         */
        val REPLICATION_CONNECTION_STATUS: ReplicationConnectionStatus = ReplicationConnectionStatus()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ReplicationConnectionStatusRecord> = ReplicationConnectionStatusRecord::class.java

    /**
     * The column
     * <code>performance_schema.replication_connection_status.CHANNEL_NAME</code>.
     */
    val CHANNEL_NAME: TableField<ReplicationConnectionStatusRecord, String?> = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.GROUP_NAME</code>.
     */
    val GROUP_NAME: TableField<ReplicationConnectionStatusRecord, String?> = createField(DSL.name("GROUP_NAME"), SQLDataType.CHAR(36).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.SOURCE_UUID</code>.
     */
    val SOURCE_UUID: TableField<ReplicationConnectionStatusRecord, String?> = createField(DSL.name("SOURCE_UUID"), SQLDataType.CHAR(36).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<ReplicationConnectionStatusRecord, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.SERVICE_STATE</code>.
     */
    val SERVICE_STATE: TableField<ReplicationConnectionStatusRecord, ReplicationConnectionStatusServiceState?> = createField(DSL.name("SERVICE_STATE"), SQLDataType.VARCHAR(10).nullable(false).asEnumDataType(ReplicationConnectionStatusServiceState::class.java), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.COUNT_RECEIVED_HEARTBEATS</code>.
     */
    val COUNT_RECEIVED_HEARTBEATS: TableField<ReplicationConnectionStatusRecord, ULong?> = createField(DSL.name("COUNT_RECEIVED_HEARTBEATS"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.LAST_HEARTBEAT_TIMESTAMP</code>.
     * Shows when the most recent heartbeat signal was received.
     */
    val LAST_HEARTBEAT_TIMESTAMP: TableField<ReplicationConnectionStatusRecord, LocalDateTime?> = createField(DSL.name("LAST_HEARTBEAT_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Shows when the most recent heartbeat signal was received.")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.RECEIVED_TRANSACTION_SET</code>.
     */
    val RECEIVED_TRANSACTION_SET: TableField<ReplicationConnectionStatusRecord, String?> = createField(DSL.name("RECEIVED_TRANSACTION_SET"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.LAST_ERROR_NUMBER</code>.
     */
    val LAST_ERROR_NUMBER: TableField<ReplicationConnectionStatusRecord, Int?> = createField(DSL.name("LAST_ERROR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.LAST_ERROR_MESSAGE</code>.
     */
    val LAST_ERROR_MESSAGE: TableField<ReplicationConnectionStatusRecord, String?> = createField(DSL.name("LAST_ERROR_MESSAGE"), SQLDataType.VARCHAR(1024).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.LAST_ERROR_TIMESTAMP</code>.
     */
    val LAST_ERROR_TIMESTAMP: TableField<ReplicationConnectionStatusRecord, LocalDateTime?> = createField(DSL.name("LAST_ERROR_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION</code>.
     */
    val LAST_QUEUED_TRANSACTION: TableField<ReplicationConnectionStatusRecord, String?> = createField(DSL.name("LAST_QUEUED_TRANSACTION"), SQLDataType.CHAR(57), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    val LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: TableField<ReplicationConnectionStatusRecord, LocalDateTime?> = createField(DSL.name("LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    val LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: TableField<ReplicationConnectionStatusRecord, LocalDateTime?> = createField(DSL.name("LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION_START_QUEUE_TIMESTAMP</code>.
     */
    val LAST_QUEUED_TRANSACTION_START_QUEUE_TIMESTAMP: TableField<ReplicationConnectionStatusRecord, LocalDateTime?> = createField(DSL.name("LAST_QUEUED_TRANSACTION_START_QUEUE_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION_END_QUEUE_TIMESTAMP</code>.
     */
    val LAST_QUEUED_TRANSACTION_END_QUEUE_TIMESTAMP: TableField<ReplicationConnectionStatusRecord, LocalDateTime?> = createField(DSL.name("LAST_QUEUED_TRANSACTION_END_QUEUE_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.QUEUEING_TRANSACTION</code>.
     */
    val QUEUEING_TRANSACTION: TableField<ReplicationConnectionStatusRecord, String?> = createField(DSL.name("QUEUEING_TRANSACTION"), SQLDataType.CHAR(57), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.QUEUEING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    val QUEUEING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: TableField<ReplicationConnectionStatusRecord, LocalDateTime?> = createField(DSL.name("QUEUEING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.QUEUEING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    val QUEUEING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: TableField<ReplicationConnectionStatusRecord, LocalDateTime?> = createField(DSL.name("QUEUEING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_status.QUEUEING_TRANSACTION_START_QUEUE_TIMESTAMP</code>.
     */
    val QUEUEING_TRANSACTION_START_QUEUE_TIMESTAMP: TableField<ReplicationConnectionStatusRecord, LocalDateTime?> = createField(DSL.name("QUEUEING_TRANSACTION_START_QUEUE_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ReplicationConnectionStatusRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ReplicationConnectionStatusRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ReplicationConnectionStatusRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>performance_schema.replication_connection_status</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>performance_schema.replication_connection_status</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.replication_connection_status</code>
     * table reference
     */
    constructor(): this(DSL.name("replication_connection_status"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getIndexes(): List<Index> = listOf(REPLICATION_CONNECTION_STATUS_THREAD_ID)
    override fun getPrimaryKey(): UniqueKey<ReplicationConnectionStatusRecord> = KEY_REPLICATION_CONNECTION_STATUS_PRIMARY
    override fun `as`(alias: String): ReplicationConnectionStatus = ReplicationConnectionStatus(DSL.name(alias), this)
    override fun `as`(alias: Name): ReplicationConnectionStatus = ReplicationConnectionStatus(alias, this)
    override fun `as`(alias: Table<*>): ReplicationConnectionStatus = ReplicationConnectionStatus(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReplicationConnectionStatus = ReplicationConnectionStatus(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReplicationConnectionStatus = ReplicationConnectionStatus(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ReplicationConnectionStatus = ReplicationConnectionStatus(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ReplicationConnectionStatus = ReplicationConnectionStatus(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ReplicationConnectionStatus = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ReplicationConnectionStatus = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ReplicationConnectionStatus = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ReplicationConnectionStatus = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ReplicationConnectionStatus = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ReplicationConnectionStatus = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ReplicationConnectionStatus = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ReplicationConnectionStatus = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ReplicationConnectionStatus = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row20<String?, String?, String?, ULong?, ReplicationConnectionStatusServiceState?, ULong?, LocalDateTime?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row20<String?, String?, String?, ULong?, ReplicationConnectionStatusServiceState?, ULong?, LocalDateTime?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, ULong?, ReplicationConnectionStatusServiceState?, ULong?, LocalDateTime?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, ULong?, ReplicationConnectionStatusServiceState?, ULong?, LocalDateTime?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
