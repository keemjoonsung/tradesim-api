/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.TimeZoneUseLeapSeconds
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZone

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger


/**
 * Time zones
 */
@Suppress("UNCHECKED_CAST")
open class TimeZoneRecord() : UpdatableRecordImpl<TimeZoneRecord>(TimeZone.TIME_ZONE), Record2<UInteger?, TimeZoneUseLeapSeconds?> {

    open var timeZoneId: UInteger?
        set(value): Unit = set(0, value)
        get(): UInteger? = get(0) as UInteger?

    open var useLeapSeconds: TimeZoneUseLeapSeconds?
        set(value): Unit = set(1, value)
        get(): TimeZoneUseLeapSeconds? = get(1) as TimeZoneUseLeapSeconds?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UInteger?> = super.key() as Record1<UInteger?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<UInteger?, TimeZoneUseLeapSeconds?> = super.fieldsRow() as Row2<UInteger?, TimeZoneUseLeapSeconds?>
    override fun valuesRow(): Row2<UInteger?, TimeZoneUseLeapSeconds?> = super.valuesRow() as Row2<UInteger?, TimeZoneUseLeapSeconds?>
    override fun field1(): Field<UInteger?> = TimeZone.TIME_ZONE.TIME_ZONE_ID
    override fun field2(): Field<TimeZoneUseLeapSeconds?> = TimeZone.TIME_ZONE.USE_LEAP_SECONDS
    override fun component1(): UInteger? = timeZoneId
    override fun component2(): TimeZoneUseLeapSeconds? = useLeapSeconds
    override fun value1(): UInteger? = timeZoneId
    override fun value2(): TimeZoneUseLeapSeconds? = useLeapSeconds

    override fun value1(value: UInteger?): TimeZoneRecord {
        set(0, value)
        return this
    }

    override fun value2(value: TimeZoneUseLeapSeconds?): TimeZoneRecord {
        set(1, value)
        return this
    }

    override fun values(value1: UInteger?, value2: TimeZoneUseLeapSeconds?): TimeZoneRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised TimeZoneRecord
     */
    constructor(timeZoneId: UInteger? = null, useLeapSeconds: TimeZoneUseLeapSeconds? = null): this() {
        this.timeZoneId = timeZoneId
        this.useLeapSeconds = useLeapSeconds
        resetChangedOnNotNull()
    }
}
