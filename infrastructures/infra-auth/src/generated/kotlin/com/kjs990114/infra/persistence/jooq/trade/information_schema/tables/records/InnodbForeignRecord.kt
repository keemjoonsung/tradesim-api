/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbForeign

import org.jooq.Field
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbForeignRecord() : TableRecordImpl<InnodbForeignRecord>(InnodbForeign.INNODB_FOREIGN), Record5<String?, String?, String?, Long?, ULong?> {

    open var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var forName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var refName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var nCols: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var type: ULong?
        set(value): Unit = set(4, value)
        get(): ULong? = get(4) as ULong?

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<String?, String?, String?, Long?, ULong?> = super.fieldsRow() as Row5<String?, String?, String?, Long?, ULong?>
    override fun valuesRow(): Row5<String?, String?, String?, Long?, ULong?> = super.valuesRow() as Row5<String?, String?, String?, Long?, ULong?>
    override fun field1(): Field<String?> = InnodbForeign.INNODB_FOREIGN.ID
    override fun field2(): Field<String?> = InnodbForeign.INNODB_FOREIGN.FOR_NAME
    override fun field3(): Field<String?> = InnodbForeign.INNODB_FOREIGN.REF_NAME
    override fun field4(): Field<Long?> = InnodbForeign.INNODB_FOREIGN.N_COLS
    override fun field5(): Field<ULong?> = InnodbForeign.INNODB_FOREIGN.TYPE
    override fun component1(): String? = id
    override fun component2(): String? = forName
    override fun component3(): String? = refName
    override fun component4(): Long? = nCols
    override fun component5(): ULong? = type
    override fun value1(): String? = id
    override fun value2(): String? = forName
    override fun value3(): String? = refName
    override fun value4(): Long? = nCols
    override fun value5(): ULong? = type

    override fun value1(value: String?): InnodbForeignRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): InnodbForeignRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): InnodbForeignRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Long?): InnodbForeignRecord {
        set(3, value)
        return this
    }

    override fun value5(value: ULong?): InnodbForeignRecord {
        set(4, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: Long?, value5: ULong?): InnodbForeignRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised InnodbForeignRecord
     */
    constructor(id: String? = null, forName: String? = null, refName: String? = null, nCols: Long? = null, type: ULong? = null): this() {
        this.id = id
        this.forName = forName
        this.refName = refName
        this.nCols = nCols
        this.type = type
        resetChangedOnNotNull()
    }
}
