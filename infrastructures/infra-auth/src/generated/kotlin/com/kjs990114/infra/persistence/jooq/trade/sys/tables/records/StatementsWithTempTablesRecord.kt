/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import com.kjs990114.infra.persistence.jooq.trade.sys.tables.StatementsWithTempTables

import java.math.BigInteger
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StatementsWithTempTablesRecord() : TableRecordImpl<StatementsWithTempTablesRecord>(StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES), Record11<String?, String?, ULong?, String?, ULong?, ULong?, BigInteger?, BigInteger?, LocalDateTime?, LocalDateTime?, String?> {

    open var query: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var db: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var execCount: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var totalLatency: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var memoryTmpTables: ULong?
        set(value): Unit = set(4, value)
        get(): ULong? = get(4) as ULong?

    open var diskTmpTables: ULong?
        set(value): Unit = set(5, value)
        get(): ULong? = get(5) as ULong?

    open var avgTmpTablesPerQuery: BigInteger?
        set(value): Unit = set(6, value)
        get(): BigInteger? = get(6) as BigInteger?

    open var tmpTablesToDiskPct: BigInteger?
        set(value): Unit = set(7, value)
        get(): BigInteger? = get(7) as BigInteger?

    open var firstSeen: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    open var lastSeen: LocalDateTime?
        set(value): Unit = set(9, value)
        get(): LocalDateTime? = get(9) as LocalDateTime?

    open var digest: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row11<String?, String?, ULong?, String?, ULong?, ULong?, BigInteger?, BigInteger?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row11<String?, String?, ULong?, String?, ULong?, ULong?, BigInteger?, BigInteger?, LocalDateTime?, LocalDateTime?, String?>
    override fun valuesRow(): Row11<String?, String?, ULong?, String?, ULong?, ULong?, BigInteger?, BigInteger?, LocalDateTime?, LocalDateTime?, String?> = super.valuesRow() as Row11<String?, String?, ULong?, String?, ULong?, ULong?, BigInteger?, BigInteger?, LocalDateTime?, LocalDateTime?, String?>
    override fun field1(): Field<String?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.QUERY
    override fun field2(): Field<String?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.DB
    override fun field3(): Field<ULong?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.EXEC_COUNT
    override fun field4(): Field<String?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.TOTAL_LATENCY
    override fun field5(): Field<ULong?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.MEMORY_TMP_TABLES
    override fun field6(): Field<ULong?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.DISK_TMP_TABLES
    override fun field7(): Field<BigInteger?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.AVG_TMP_TABLES_PER_QUERY
    override fun field8(): Field<BigInteger?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.TMP_TABLES_TO_DISK_PCT
    override fun field9(): Field<LocalDateTime?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.FIRST_SEEN
    override fun field10(): Field<LocalDateTime?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.LAST_SEEN
    override fun field11(): Field<String?> = StatementsWithTempTables.STATEMENTS_WITH_TEMP_TABLES.DIGEST
    override fun component1(): String? = query
    override fun component2(): String? = db
    override fun component3(): ULong? = execCount
    override fun component4(): String? = totalLatency
    override fun component5(): ULong? = memoryTmpTables
    override fun component6(): ULong? = diskTmpTables
    override fun component7(): BigInteger? = avgTmpTablesPerQuery
    override fun component8(): BigInteger? = tmpTablesToDiskPct
    override fun component9(): LocalDateTime? = firstSeen
    override fun component10(): LocalDateTime? = lastSeen
    override fun component11(): String? = digest
    override fun value1(): String? = query
    override fun value2(): String? = db
    override fun value3(): ULong? = execCount
    override fun value4(): String? = totalLatency
    override fun value5(): ULong? = memoryTmpTables
    override fun value6(): ULong? = diskTmpTables
    override fun value7(): BigInteger? = avgTmpTablesPerQuery
    override fun value8(): BigInteger? = tmpTablesToDiskPct
    override fun value9(): LocalDateTime? = firstSeen
    override fun value10(): LocalDateTime? = lastSeen
    override fun value11(): String? = digest

    override fun value1(value: String?): StatementsWithTempTablesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): StatementsWithTempTablesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): StatementsWithTempTablesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): StatementsWithTempTablesRecord {
        set(3, value)
        return this
    }

    override fun value5(value: ULong?): StatementsWithTempTablesRecord {
        set(4, value)
        return this
    }

    override fun value6(value: ULong?): StatementsWithTempTablesRecord {
        set(5, value)
        return this
    }

    override fun value7(value: BigInteger?): StatementsWithTempTablesRecord {
        set(6, value)
        return this
    }

    override fun value8(value: BigInteger?): StatementsWithTempTablesRecord {
        set(7, value)
        return this
    }

    override fun value9(value: LocalDateTime?): StatementsWithTempTablesRecord {
        set(8, value)
        return this
    }

    override fun value10(value: LocalDateTime?): StatementsWithTempTablesRecord {
        set(9, value)
        return this
    }

    override fun value11(value: String?): StatementsWithTempTablesRecord {
        set(10, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: ULong?, value4: String?, value5: ULong?, value6: ULong?, value7: BigInteger?, value8: BigInteger?, value9: LocalDateTime?, value10: LocalDateTime?, value11: String?): StatementsWithTempTablesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        return this
    }

    /**
     * Create a detached, initialised StatementsWithTempTablesRecord
     */
    constructor(query: String? = null, db: String? = null, execCount: ULong? = null, totalLatency: String? = null, memoryTmpTables: ULong? = null, diskTmpTables: ULong? = null, avgTmpTablesPerQuery: BigInteger? = null, tmpTablesToDiskPct: BigInteger? = null, firstSeen: LocalDateTime? = null, lastSeen: LocalDateTime? = null, digest: String? = null): this() {
        this.query = query
        this.db = db
        this.execCount = execCount
        this.totalLatency = totalLatency
        this.memoryTmpTables = memoryTmpTables
        this.diskTmpTables = diskTmpTables
        this.avgTmpTablesPerQuery = avgTmpTablesPerQuery
        this.tmpTablesToDiskPct = tmpTablesToDiskPct
        this.firstSeen = firstSeen
        this.lastSeen = lastSeen
        this.digest = digest
        resetChangedOnNotNull()
    }
}
