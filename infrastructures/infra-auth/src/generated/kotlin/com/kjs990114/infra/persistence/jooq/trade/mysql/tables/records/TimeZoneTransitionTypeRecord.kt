/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneTransitionType

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UByte
import org.jooq.types.UInteger


/**
 * Time zone transition types
 */
@Suppress("UNCHECKED_CAST")
open class TimeZoneTransitionTypeRecord() : UpdatableRecordImpl<TimeZoneTransitionTypeRecord>(TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE), Record5<UInteger?, UInteger?, Int?, UByte?, String?> {

    open var timeZoneId: UInteger?
        set(value): Unit = set(0, value)
        get(): UInteger? = get(0) as UInteger?

    open var transitionTypeId: UInteger?
        set(value): Unit = set(1, value)
        get(): UInteger? = get(1) as UInteger?

    open var offset: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsDst")
    open var isDst: UByte?
        set(value): Unit = set(3, value)
        get(): UByte? = get(3) as UByte?

    open var abbreviation: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<UInteger?, UInteger?> = super.key() as Record2<UInteger?, UInteger?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<UInteger?, UInteger?, Int?, UByte?, String?> = super.fieldsRow() as Row5<UInteger?, UInteger?, Int?, UByte?, String?>
    override fun valuesRow(): Row5<UInteger?, UInteger?, Int?, UByte?, String?> = super.valuesRow() as Row5<UInteger?, UInteger?, Int?, UByte?, String?>
    override fun field1(): Field<UInteger?> = TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TIME_ZONE_ID
    override fun field2(): Field<UInteger?> = TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TRANSITION_TYPE_ID
    override fun field3(): Field<Int?> = TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.OFFSET
    override fun field4(): Field<UByte?> = TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.IS_DST
    override fun field5(): Field<String?> = TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.ABBREVIATION
    override fun component1(): UInteger? = timeZoneId
    override fun component2(): UInteger? = transitionTypeId
    override fun component3(): Int? = offset
    override fun component4(): UByte? = isDst
    override fun component5(): String? = abbreviation
    override fun value1(): UInteger? = timeZoneId
    override fun value2(): UInteger? = transitionTypeId
    override fun value3(): Int? = offset
    override fun value4(): UByte? = isDst
    override fun value5(): String? = abbreviation

    override fun value1(value: UInteger?): TimeZoneTransitionTypeRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UInteger?): TimeZoneTransitionTypeRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): TimeZoneTransitionTypeRecord {
        set(2, value)
        return this
    }

    override fun value4(value: UByte?): TimeZoneTransitionTypeRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): TimeZoneTransitionTypeRecord {
        set(4, value)
        return this
    }

    override fun values(value1: UInteger?, value2: UInteger?, value3: Int?, value4: UByte?, value5: String?): TimeZoneTransitionTypeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised TimeZoneTransitionTypeRecord
     */
    constructor(timeZoneId: UInteger? = null, transitionTypeId: UInteger? = null, offset: Int? = null, isDst: UByte? = null, abbreviation: String? = null): this() {
        this.timeZoneId = timeZoneId
        this.transitionTypeId = transitionTypeId
        this.offset = offset
        this.isDst = isDst
        this.abbreviation = abbreviation
        resetChangedOnNotNull()
    }
}
