/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationApplierStatusServiceState
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.ReplicationApplierStatus

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationApplierStatusRecord() : UpdatableRecordImpl<ReplicationApplierStatusRecord>(ReplicationApplierStatus.REPLICATION_APPLIER_STATUS), Record4<String?, ReplicationApplierStatusServiceState?, UInteger?, ULong?> {

    open var channelName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var serviceState: ReplicationApplierStatusServiceState?
        set(value): Unit = set(1, value)
        get(): ReplicationApplierStatusServiceState? = get(1) as ReplicationApplierStatusServiceState?

    open var remainingDelay: UInteger?
        set(value): Unit = set(2, value)
        get(): UInteger? = get(2) as UInteger?

    open var countTransactionsRetries: ULong?
        set(value): Unit = set(3, value)
        get(): ULong? = get(3) as ULong?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, ReplicationApplierStatusServiceState?, UInteger?, ULong?> = super.fieldsRow() as Row4<String?, ReplicationApplierStatusServiceState?, UInteger?, ULong?>
    override fun valuesRow(): Row4<String?, ReplicationApplierStatusServiceState?, UInteger?, ULong?> = super.valuesRow() as Row4<String?, ReplicationApplierStatusServiceState?, UInteger?, ULong?>
    override fun field1(): Field<String?> = ReplicationApplierStatus.REPLICATION_APPLIER_STATUS.CHANNEL_NAME
    override fun field2(): Field<ReplicationApplierStatusServiceState?> = ReplicationApplierStatus.REPLICATION_APPLIER_STATUS.SERVICE_STATE
    override fun field3(): Field<UInteger?> = ReplicationApplierStatus.REPLICATION_APPLIER_STATUS.REMAINING_DELAY
    override fun field4(): Field<ULong?> = ReplicationApplierStatus.REPLICATION_APPLIER_STATUS.COUNT_TRANSACTIONS_RETRIES
    override fun component1(): String? = channelName
    override fun component2(): ReplicationApplierStatusServiceState? = serviceState
    override fun component3(): UInteger? = remainingDelay
    override fun component4(): ULong? = countTransactionsRetries
    override fun value1(): String? = channelName
    override fun value2(): ReplicationApplierStatusServiceState? = serviceState
    override fun value3(): UInteger? = remainingDelay
    override fun value4(): ULong? = countTransactionsRetries

    override fun value1(value: String?): ReplicationApplierStatusRecord {
        set(0, value)
        return this
    }

    override fun value2(value: ReplicationApplierStatusServiceState?): ReplicationApplierStatusRecord {
        set(1, value)
        return this
    }

    override fun value3(value: UInteger?): ReplicationApplierStatusRecord {
        set(2, value)
        return this
    }

    override fun value4(value: ULong?): ReplicationApplierStatusRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: ReplicationApplierStatusServiceState?, value3: UInteger?, value4: ULong?): ReplicationApplierStatusRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised ReplicationApplierStatusRecord
     */
    constructor(channelName: String? = null, serviceState: ReplicationApplierStatusServiceState? = null, remainingDelay: UInteger? = null, countTransactionsRetries: ULong? = null): this() {
        this.channelName = channelName
        this.serviceState = serviceState
        this.remainingDelay = remainingDelay
        this.countTransactionsRetries = countTransactionsRetries
        resetChangedOnNotNull()
    }
}
