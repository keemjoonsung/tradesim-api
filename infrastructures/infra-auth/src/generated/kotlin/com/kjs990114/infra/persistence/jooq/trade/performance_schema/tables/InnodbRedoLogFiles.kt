/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.InnodbRedoLogFilesRecord

import java.util.function.Function

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbRedoLogFiles(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, InnodbRedoLogFilesRecord>?,
    parentPath: InverseForeignKey<out Record, InnodbRedoLogFilesRecord>?,
    aliased: Table<InnodbRedoLogFilesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<InnodbRedoLogFilesRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>performance_schema.innodb_redo_log_files</code>
         */
        val INNODB_REDO_LOG_FILES: InnodbRedoLogFiles = InnodbRedoLogFiles()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InnodbRedoLogFilesRecord> = InnodbRedoLogFilesRecord::class.java

    /**
     * The column <code>performance_schema.innodb_redo_log_files.FILE_ID</code>.
     * Id of the file.
     */
    val FILE_ID: TableField<InnodbRedoLogFilesRecord, Long?> = createField(DSL.name("FILE_ID"), SQLDataType.BIGINT.nullable(false), this, "Id of the file.")

    /**
     * The column
     * <code>performance_schema.innodb_redo_log_files.FILE_NAME</code>. Path to
     * the file.
     */
    val FILE_NAME: TableField<InnodbRedoLogFilesRecord, String?> = createField(DSL.name("FILE_NAME"), SQLDataType.VARCHAR(2000).nullable(false), this, "Path to the file.")

    /**
     * The column
     * <code>performance_schema.innodb_redo_log_files.START_LSN</code>. LSN of
     * the first block in the file.
     */
    val START_LSN: TableField<InnodbRedoLogFilesRecord, Long?> = createField(DSL.name("START_LSN"), SQLDataType.BIGINT.nullable(false), this, "LSN of the first block in the file.")

    /**
     * The column <code>performance_schema.innodb_redo_log_files.END_LSN</code>.
     * LSN after the last block in the file.
     */
    val END_LSN: TableField<InnodbRedoLogFilesRecord, Long?> = createField(DSL.name("END_LSN"), SQLDataType.BIGINT.nullable(false), this, "LSN after the last block in the file.")

    /**
     * The column
     * <code>performance_schema.innodb_redo_log_files.SIZE_IN_BYTES</code>. Size
     * of the file (in bytes).
     */
    val SIZE_IN_BYTES: TableField<InnodbRedoLogFilesRecord, Long?> = createField(DSL.name("SIZE_IN_BYTES"), SQLDataType.BIGINT.nullable(false), this, "Size of the file (in bytes).")

    /**
     * The column <code>performance_schema.innodb_redo_log_files.IS_FULL</code>.
     * 1 iff file has no free space inside.
     */
    val IS_FULL: TableField<InnodbRedoLogFilesRecord, Byte?> = createField(DSL.name("IS_FULL"), SQLDataType.TINYINT.nullable(false), this, "1 iff file has no free space inside.")

    /**
     * The column
     * <code>performance_schema.innodb_redo_log_files.CONSUMER_LEVEL</code>. All
     * redo log consumers registered on smaller levels than this value, have
     * already consumed this file.
     */
    val CONSUMER_LEVEL: TableField<InnodbRedoLogFilesRecord, Int?> = createField(DSL.name("CONSUMER_LEVEL"), SQLDataType.INTEGER.nullable(false), this, "All redo log consumers registered on smaller levels than this value, have already consumed this file.")

    private constructor(alias: Name, aliased: Table<InnodbRedoLogFilesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<InnodbRedoLogFilesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<InnodbRedoLogFilesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>performance_schema.innodb_redo_log_files</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.innodb_redo_log_files</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.innodb_redo_log_files</code> table
     * reference
     */
    constructor(): this(DSL.name("innodb_redo_log_files"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun `as`(alias: String): InnodbRedoLogFiles = InnodbRedoLogFiles(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbRedoLogFiles = InnodbRedoLogFiles(alias, this)
    override fun `as`(alias: Table<*>): InnodbRedoLogFiles = InnodbRedoLogFiles(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbRedoLogFiles = InnodbRedoLogFiles(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbRedoLogFiles = InnodbRedoLogFiles(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): InnodbRedoLogFiles = InnodbRedoLogFiles(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): InnodbRedoLogFiles = InnodbRedoLogFiles(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): InnodbRedoLogFiles = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): InnodbRedoLogFiles = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): InnodbRedoLogFiles = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): InnodbRedoLogFiles = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): InnodbRedoLogFiles = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): InnodbRedoLogFiles = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): InnodbRedoLogFiles = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): InnodbRedoLogFiles = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): InnodbRedoLogFiles = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Long?, String?, Long?, Long?, Long?, Byte?, Int?> = super.fieldsRow() as Row7<Long?, String?, Long?, Long?, Long?, Byte?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, Long?, Long?, Long?, Byte?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, Long?, Long?, Long?, Byte?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
