/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables


import com.kjs990114.infra.persistence.jooq.trade.mysql.Mysql
import com.kjs990114.infra.persistence.jooq.trade.mysql.indexes.TABLES_PRIV_GRANTOR
import com.kjs990114.infra.persistence.jooq.trade.mysql.keys.KEY_TABLES_PRIV_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.TablesPrivRecord

import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Table privileges
 */
@Suppress("UNCHECKED_CAST")
open class TablesPriv(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TablesPrivRecord>?,
    parentPath: InverseForeignKey<out Record, TablesPrivRecord>?,
    aliased: Table<TablesPrivRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TablesPrivRecord>(
    alias,
    Mysql.MYSQL,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Table privileges"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>mysql.tables_priv</code>
         */
        val TABLES_PRIV: TablesPriv = TablesPriv()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TablesPrivRecord> = TablesPrivRecord::class.java

    /**
     * The column <code>mysql.tables_priv.Host</code>.
     */
    val HOST: TableField<TablesPrivRecord, String?> = createField(DSL.name("Host"), SQLDataType.CHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.tables_priv.Db</code>.
     */
    val DB: TableField<TablesPrivRecord, String?> = createField(DSL.name("Db"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.tables_priv.User</code>.
     */
    val USER: TableField<TablesPrivRecord, String?> = createField(DSL.name("User"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.tables_priv.Table_name</code>.
     */
    val TABLE_NAME: TableField<TablesPrivRecord, String?> = createField(DSL.name("Table_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.tables_priv.Grantor</code>.
     */
    val GRANTOR: TableField<TablesPrivRecord, String?> = createField(DSL.name("Grantor"), SQLDataType.VARCHAR(288).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>mysql.tables_priv.Timestamp</code>.
     */
    val TIMESTAMP: TableField<TablesPrivRecord, LocalDateTime?> = createField(DSL.name("Timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>mysql.tables_priv.Table_priv</code>.
     */
    val TABLE_PRIV: TableField<TablesPrivRecord, String?> = createField(DSL.name("Table_priv"), SQLDataType.VARCHAR(98).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>mysql.tables_priv.Column_priv</code>.
     */
    val COLUMN_PRIV: TableField<TablesPrivRecord, String?> = createField(DSL.name("Column_priv"), SQLDataType.VARCHAR(31).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<TablesPrivRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TablesPrivRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TablesPrivRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>mysql.tables_priv</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.tables_priv</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.tables_priv</code> table reference
     */
    constructor(): this(DSL.name("tables_priv"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Mysql.MYSQL
    override fun getIndexes(): List<Index> = listOf(TABLES_PRIV_GRANTOR)
    override fun getPrimaryKey(): UniqueKey<TablesPrivRecord> = KEY_TABLES_PRIV_PRIMARY
    override fun `as`(alias: String): TablesPriv = TablesPriv(DSL.name(alias), this)
    override fun `as`(alias: Name): TablesPriv = TablesPriv(alias, this)
    override fun `as`(alias: Table<*>): TablesPriv = TablesPriv(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TablesPriv = TablesPriv(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TablesPriv = TablesPriv(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TablesPriv = TablesPriv(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TablesPriv = TablesPriv(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TablesPriv = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TablesPriv = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TablesPriv = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TablesPriv = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TablesPriv = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TablesPriv = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TablesPriv = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TablesPriv = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TablesPriv = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<String?, String?, String?, String?, String?, LocalDateTime?, String?, String?> = super.fieldsRow() as Row8<String?, String?, String?, String?, String?, LocalDateTime?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, String?, String?, LocalDateTime?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, String?, String?, LocalDateTime?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
