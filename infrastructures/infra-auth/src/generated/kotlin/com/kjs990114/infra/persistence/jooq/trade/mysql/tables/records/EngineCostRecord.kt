/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.EngineCost

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EngineCostRecord() : UpdatableRecordImpl<EngineCostRecord>(EngineCost.ENGINE_COST), Record7<String?, Int?, String?, Double?, LocalDateTime?, String?, Double?> {

    open var engineName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var deviceType: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var costName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var costValue: Double?
        set(value): Unit = set(3, value)
        get(): Double? = get(3) as Double?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open var comment: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var defaultValue: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record3<String?, String?, Int?> = super.key() as Record3<String?, String?, Int?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<String?, Int?, String?, Double?, LocalDateTime?, String?, Double?> = super.fieldsRow() as Row7<String?, Int?, String?, Double?, LocalDateTime?, String?, Double?>
    override fun valuesRow(): Row7<String?, Int?, String?, Double?, LocalDateTime?, String?, Double?> = super.valuesRow() as Row7<String?, Int?, String?, Double?, LocalDateTime?, String?, Double?>
    override fun field1(): Field<String?> = EngineCost.ENGINE_COST.ENGINE_NAME
    override fun field2(): Field<Int?> = EngineCost.ENGINE_COST.DEVICE_TYPE
    override fun field3(): Field<String?> = EngineCost.ENGINE_COST.COST_NAME
    override fun field4(): Field<Double?> = EngineCost.ENGINE_COST.COST_VALUE
    override fun field5(): Field<LocalDateTime?> = EngineCost.ENGINE_COST.LAST_UPDATE
    override fun field6(): Field<String?> = EngineCost.ENGINE_COST.COMMENT
    override fun field7(): Field<Double?> = EngineCost.ENGINE_COST.DEFAULT_VALUE
    override fun component1(): String? = engineName
    override fun component2(): Int? = deviceType
    override fun component3(): String? = costName
    override fun component4(): Double? = costValue
    override fun component5(): LocalDateTime? = lastUpdate
    override fun component6(): String? = comment
    override fun component7(): Double? = defaultValue
    override fun value1(): String? = engineName
    override fun value2(): Int? = deviceType
    override fun value3(): String? = costName
    override fun value4(): Double? = costValue
    override fun value5(): LocalDateTime? = lastUpdate
    override fun value6(): String? = comment
    override fun value7(): Double? = defaultValue

    override fun value1(value: String?): EngineCostRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): EngineCostRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): EngineCostRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Double?): EngineCostRecord {
        set(3, value)
        return this
    }

    override fun value5(value: LocalDateTime?): EngineCostRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): EngineCostRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Double?): EngineCostRecord {
        set(6, value)
        return this
    }

    override fun values(value1: String?, value2: Int?, value3: String?, value4: Double?, value5: LocalDateTime?, value6: String?, value7: Double?): EngineCostRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised EngineCostRecord
     */
    constructor(engineName: String? = null, deviceType: Int? = null, costName: String? = null, costValue: Double? = null, lastUpdate: LocalDateTime? = null, comment: String? = null, defaultValue: Double? = null): this() {
        this.engineName = engineName
        this.deviceType = deviceType
        this.costName = costName
        this.costValue = costValue
        this.lastUpdate = lastUpdate
        this.comment = comment
        this.defaultValue = defaultValue
        resetChangedOnNotNull()
    }
}
