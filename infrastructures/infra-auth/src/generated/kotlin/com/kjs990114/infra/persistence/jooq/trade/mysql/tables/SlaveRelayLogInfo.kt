/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables


import com.kjs990114.infra.persistence.jooq.trade.mysql.Mysql
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.SlaveRelayLogInfoRequireTablePrimaryKeyCheck
import com.kjs990114.infra.persistence.jooq.trade.mysql.keys.KEY_SLAVE_RELAY_LOG_INFO_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.SlaveRelayLogInfoRecord

import java.util.function.Function

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row15
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * Relay Log Information
 */
@Suppress("UNCHECKED_CAST")
open class SlaveRelayLogInfo(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SlaveRelayLogInfoRecord>?,
    parentPath: InverseForeignKey<out Record, SlaveRelayLogInfoRecord>?,
    aliased: Table<SlaveRelayLogInfoRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SlaveRelayLogInfoRecord>(
    alias,
    Mysql.MYSQL,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Relay Log Information"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>mysql.slave_relay_log_info</code>
         */
        val SLAVE_RELAY_LOG_INFO: SlaveRelayLogInfo = SlaveRelayLogInfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SlaveRelayLogInfoRecord> = SlaveRelayLogInfoRecord::class.java

    /**
     * The column <code>mysql.slave_relay_log_info.Number_of_lines</code>.
     * Number of lines in the file or rows in the table. Used to version table
     * definitions.
     */
    val NUMBER_OF_LINES: TableField<SlaveRelayLogInfoRecord, UInteger?> = createField(DSL.name("Number_of_lines"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Number of lines in the file or rows in the table. Used to version table definitions.")

    /**
     * The column <code>mysql.slave_relay_log_info.Relay_log_name</code>. The
     * name of the current relay log file.
     */
    val RELAY_LOG_NAME: TableField<SlaveRelayLogInfoRecord, String?> = createField(DSL.name("Relay_log_name"), SQLDataType.CLOB, this, "The name of the current relay log file.")

    /**
     * The column <code>mysql.slave_relay_log_info.Relay_log_pos</code>. The
     * relay log position of the last executed event.
     */
    val RELAY_LOG_POS: TableField<SlaveRelayLogInfoRecord, ULong?> = createField(DSL.name("Relay_log_pos"), SQLDataType.BIGINTUNSIGNED, this, "The relay log position of the last executed event.")

    /**
     * The column <code>mysql.slave_relay_log_info.Master_log_name</code>. The
     * name of the master binary log file from which the events in the relay log
     * file were read.
     */
    val MASTER_LOG_NAME: TableField<SlaveRelayLogInfoRecord, String?> = createField(DSL.name("Master_log_name"), SQLDataType.CLOB, this, "The name of the master binary log file from which the events in the relay log file were read.")

    /**
     * The column <code>mysql.slave_relay_log_info.Master_log_pos</code>. The
     * master log position of the last executed event.
     */
    val MASTER_LOG_POS: TableField<SlaveRelayLogInfoRecord, ULong?> = createField(DSL.name("Master_log_pos"), SQLDataType.BIGINTUNSIGNED, this, "The master log position of the last executed event.")

    /**
     * The column <code>mysql.slave_relay_log_info.Sql_delay</code>. The number
     * of seconds that the slave must lag behind the master.
     */
    val SQL_DELAY: TableField<SlaveRelayLogInfoRecord, Int?> = createField(DSL.name("Sql_delay"), SQLDataType.INTEGER, this, "The number of seconds that the slave must lag behind the master.")

    /**
     * The column <code>mysql.slave_relay_log_info.Number_of_workers</code>.
     */
    val NUMBER_OF_WORKERS: TableField<SlaveRelayLogInfoRecord, UInteger?> = createField(DSL.name("Number_of_workers"), SQLDataType.INTEGERUNSIGNED, this, "")

    /**
     * The column <code>mysql.slave_relay_log_info.Id</code>. Internal Id that
     * uniquely identifies this record.
     */
    val ID: TableField<SlaveRelayLogInfoRecord, UInteger?> = createField(DSL.name("Id"), SQLDataType.INTEGERUNSIGNED, this, "Internal Id that uniquely identifies this record.")

    /**
     * The column <code>mysql.slave_relay_log_info.Channel_name</code>. The
     * channel on which the replica is connected to a source. Used in
     * Multisource Replication
     */
    val CHANNEL_NAME: TableField<SlaveRelayLogInfoRecord, String?> = createField(DSL.name("Channel_name"), SQLDataType.VARCHAR(64).nullable(false), this, "The channel on which the replica is connected to a source. Used in Multisource Replication")

    /**
     * The column
     * <code>mysql.slave_relay_log_info.Privilege_checks_username</code>.
     * Username part of PRIVILEGE_CHECKS_USER.
     */
    val PRIVILEGE_CHECKS_USERNAME: TableField<SlaveRelayLogInfoRecord, String?> = createField(DSL.name("Privilege_checks_username"), SQLDataType.VARCHAR(32), this, "Username part of PRIVILEGE_CHECKS_USER.")

    /**
     * The column
     * <code>mysql.slave_relay_log_info.Privilege_checks_hostname</code>.
     * Hostname part of PRIVILEGE_CHECKS_USER.
     */
    val PRIVILEGE_CHECKS_HOSTNAME: TableField<SlaveRelayLogInfoRecord, String?> = createField(DSL.name("Privilege_checks_hostname"), SQLDataType.VARCHAR(255), this, "Hostname part of PRIVILEGE_CHECKS_USER.")

    /**
     * The column <code>mysql.slave_relay_log_info.Require_row_format</code>.
     * Indicates whether the channel shall only accept row based events.
     */
    val REQUIRE_ROW_FORMAT: TableField<SlaveRelayLogInfoRecord, Boolean?> = createField(DSL.name("Require_row_format"), SQLDataType.BOOLEAN.nullable(false), this, "Indicates whether the channel shall only accept row based events.")

    /**
     * The column
     * <code>mysql.slave_relay_log_info.Require_table_primary_key_check</code>.
     * Indicates what is the channel policy regarding tables without primary
     * keys on create and alter table queries
     */
    val REQUIRE_TABLE_PRIMARY_KEY_CHECK: TableField<SlaveRelayLogInfoRecord, SlaveRelayLogInfoRequireTablePrimaryKeyCheck?> = createField(DSL.name("Require_table_primary_key_check"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("STREAM", SQLDataType.VARCHAR)).asEnumDataType(SlaveRelayLogInfoRequireTablePrimaryKeyCheck::class.java), this, "Indicates what is the channel policy regarding tables without primary keys on create and alter table queries")

    /**
     * The column
     * <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_type</code>.
     * Indicates whether the channel will generate a new GTID for anonymous
     * transactions. OFF means that anonymous transactions will remain
     * anonymous. LOCAL means that anonymous transactions will be assigned a
     * newly generated GTID based on server_uuid. UUID indicates that anonymous
     * transactions will be assigned a newly generated GTID based on
     * Assign_gtids_to_anonymous_transactions_value
     */
    val ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_TYPE: TableField<SlaveRelayLogInfoRecord, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType?> = createField(DSL.name("Assign_gtids_to_anonymous_transactions_type"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.inline("OFF", SQLDataType.VARCHAR)).asEnumDataType(SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType::class.java), this, "Indicates whether the channel will generate a new GTID for anonymous transactions. OFF means that anonymous transactions will remain anonymous. LOCAL means that anonymous transactions will be assigned a newly generated GTID based on server_uuid. UUID indicates that anonymous transactions will be assigned a newly generated GTID based on Assign_gtids_to_anonymous_transactions_value")

    /**
     * The column
     * <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_value</code>.
     * Indicates the UUID used while generating GTIDs for anonymous transactions
     */
    val ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_VALUE: TableField<SlaveRelayLogInfoRecord, String?> = createField(DSL.name("Assign_gtids_to_anonymous_transactions_value"), SQLDataType.CLOB, this, "Indicates the UUID used while generating GTIDs for anonymous transactions")

    private constructor(alias: Name, aliased: Table<SlaveRelayLogInfoRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SlaveRelayLogInfoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SlaveRelayLogInfoRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>mysql.slave_relay_log_info</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.slave_relay_log_info</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.slave_relay_log_info</code> table reference
     */
    constructor(): this(DSL.name("slave_relay_log_info"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<SlaveRelayLogInfoRecord> = KEY_SLAVE_RELAY_LOG_INFO_PRIMARY
    override fun `as`(alias: String): SlaveRelayLogInfo = SlaveRelayLogInfo(DSL.name(alias), this)
    override fun `as`(alias: Name): SlaveRelayLogInfo = SlaveRelayLogInfo(alias, this)
    override fun `as`(alias: Table<*>): SlaveRelayLogInfo = SlaveRelayLogInfo(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SlaveRelayLogInfo = SlaveRelayLogInfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SlaveRelayLogInfo = SlaveRelayLogInfo(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SlaveRelayLogInfo = SlaveRelayLogInfo(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): SlaveRelayLogInfo = SlaveRelayLogInfo(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): SlaveRelayLogInfo = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): SlaveRelayLogInfo = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): SlaveRelayLogInfo = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): SlaveRelayLogInfo = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): SlaveRelayLogInfo = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): SlaveRelayLogInfo = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): SlaveRelayLogInfo = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): SlaveRelayLogInfo = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): SlaveRelayLogInfo = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row15<UInteger?, String?, ULong?, String?, ULong?, Int?, UInteger?, UInteger?, String?, String?, String?, Boolean?, SlaveRelayLogInfoRequireTablePrimaryKeyCheck?, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType?, String?> = super.fieldsRow() as Row15<UInteger?, String?, ULong?, String?, ULong?, Int?, UInteger?, UInteger?, String?, String?, String?, Boolean?, SlaveRelayLogInfoRequireTablePrimaryKeyCheck?, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UInteger?, String?, ULong?, String?, ULong?, Int?, UInteger?, UInteger?, String?, String?, String?, Boolean?, SlaveRelayLogInfoRequireTablePrimaryKeyCheck?, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UInteger?, String?, ULong?, String?, ULong?, Int?, UInteger?, UInteger?, String?, String?, String?, Boolean?, SlaveRelayLogInfoRequireTablePrimaryKeyCheck?, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
