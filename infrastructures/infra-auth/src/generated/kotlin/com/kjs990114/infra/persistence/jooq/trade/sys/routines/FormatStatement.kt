/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 * Description
 * -----------
 * 
 * Formats a normalized statement, truncating it if it is &gt; 64 characters
 * long by default.
 * 
 * To configure the length to truncate the statement to by default, update the
 * `statement_truncate_len`
 * variable with `sys_config` table to a different value. Alternatively, to
 * change it just for just 
 * your particular session, use `SET @sys.statement_truncate_len := &lt;some new
 * value&gt;`.
 * 
 * Useful for printing statement related data from Performance Schema from 
 * the command line.
 * 
 * Parameters
 * -----------
 * 
 * statement (LONGTEXT): 
 *   The statement to format.
 * 
 * Returns
 * -----------
 * 
 * LONGTEXT
 * 
 * Example
 * -----------
 * 
 * mysql&gt; SELECT sys.format_statement(digest_text)
 *     -&gt;   FROM performance_schema.events_statements_summary_by_digest
 *     -&gt;  ORDER by sum_timer_wait DESC limit 5;
 * +-------------------------------------------------------------------+
 * | sys.format_statement(digest_text)                                 |
 * +-------------------------------------------------------------------+
 * | CREATE SQL SECURITY INVOKER VI ... KE ? AND `variable_value` &gt; ?  |
 * | CREATE SQL SECURITY INVOKER VI ... ait` IS NOT NULL , `esc` . ... |
 * | CREATE SQL SECURITY INVOKER VI ... ait` IS NOT NULL , `sys` . ... |
 * | CREATE SQL SECURITY INVOKER VI ...  , `compressed_size` ) ) DESC  |
 * | CREATE SQL SECURITY INVOKER VI ... LIKE ? ORDER BY `timer_start`  |
 * +-------------------------------------------------------------------+
 * 5 rows in set (0.00 sec)

 */
@Suppress("UNCHECKED_CAST")
open class FormatStatement : AbstractRoutine<String>("format_statement", Sys.SYS, SQLDataType.CLOB) {
    companion object {

        /**
         * The parameter <code>sys.format_statement.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.CLOB, false, false)

        /**
         * The parameter <code>sys.format_statement.statement</code>.
         */
        val STATEMENT: Parameter<String?> = Internal.createParameter("statement", SQLDataType.CLOB, false, false)
    }

    init {
        returnParameter = FormatStatement.RETURN_VALUE
        addInParameter(FormatStatement.STATEMENT)
    }

    /**
     * Set the <code>statement</code> parameter IN value to the routine
     */
    fun setStatement(value: String?): Unit = setValue(FormatStatement.STATEMENT, value)

    /**
     * Set the <code>statement</code> parameter to the function to be used with
     * a {@link org.jooq.Select} statement
     */
    fun setStatement(field: Field<String?>): FormatStatement {
        setField(FormatStatement.STATEMENT, field)
        return this
    }
}
