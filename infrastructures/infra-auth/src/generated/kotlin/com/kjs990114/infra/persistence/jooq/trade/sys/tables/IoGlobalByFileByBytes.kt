/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys
import com.kjs990114.infra.persistence.jooq.trade.sys.tables.records.IoGlobalByFileByBytesRecord

import java.math.BigDecimal
import java.util.function.Function

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class IoGlobalByFileByBytes(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, IoGlobalByFileByBytesRecord>?,
    parentPath: InverseForeignKey<out Record, IoGlobalByFileByBytesRecord>?,
    aliased: Table<IoGlobalByFileByBytesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<IoGlobalByFileByBytesRecord>(
    alias,
    Sys.SYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view `io_global_by_file_by_bytes` as select `sys`.`format_path`(`performance_schema`.`file_summary_by_instance`.`FILE_NAME`) AS `file`,`performance_schema`.`file_summary_by_instance`.`COUNT_READ` AS `count_read`,format_bytes(`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ`) AS `total_read`,format_bytes(ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_READ`,0)),0)) AS `avg_read`,`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE` AS `count_write`,format_bytes(`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) AS `total_written`,format_bytes(ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE`,0)),0.00)) AS `avg_write`,format_bytes((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`)) AS `total`,ifnull(round((100 - ((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`),0)) * 100)),2),0.00) AS `write_pct` from `performance_schema`.`file_summary_by_instance` order by (`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) desc"),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>sys.io_global_by_file_by_bytes</code>
         */
        val IO_GLOBAL_BY_FILE_BY_BYTES: IoGlobalByFileByBytes = IoGlobalByFileByBytes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<IoGlobalByFileByBytesRecord> = IoGlobalByFileByBytesRecord::class.java

    /**
     * The column <code>sys.io_global_by_file_by_bytes.file</code>.
     */
    val FILE: TableField<IoGlobalByFileByBytesRecord, String?> = createField(DSL.name("file"), SQLDataType.VARCHAR(512), this, "")

    /**
     * The column <code>sys.io_global_by_file_by_bytes.count_read</code>.
     */
    val COUNT_READ: TableField<IoGlobalByFileByBytesRecord, ULong?> = createField(DSL.name("count_read"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.io_global_by_file_by_bytes.total_read</code>.
     */
    val TOTAL_READ: TableField<IoGlobalByFileByBytesRecord, String?> = createField(DSL.name("total_read"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.io_global_by_file_by_bytes.avg_read</code>.
     */
    val AVG_READ: TableField<IoGlobalByFileByBytesRecord, String?> = createField(DSL.name("avg_read"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.io_global_by_file_by_bytes.count_write</code>.
     */
    val COUNT_WRITE: TableField<IoGlobalByFileByBytesRecord, ULong?> = createField(DSL.name("count_write"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.io_global_by_file_by_bytes.total_written</code>.
     */
    val TOTAL_WRITTEN: TableField<IoGlobalByFileByBytesRecord, String?> = createField(DSL.name("total_written"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.io_global_by_file_by_bytes.avg_write</code>.
     */
    val AVG_WRITE: TableField<IoGlobalByFileByBytesRecord, String?> = createField(DSL.name("avg_write"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.io_global_by_file_by_bytes.total</code>.
     */
    val TOTAL: TableField<IoGlobalByFileByBytesRecord, String?> = createField(DSL.name("total"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.io_global_by_file_by_bytes.write_pct</code>.
     */
    val WRITE_PCT: TableField<IoGlobalByFileByBytesRecord, BigDecimal?> = createField(DSL.name("write_pct"), SQLDataType.DECIMAL(26, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "")

    private constructor(alias: Name, aliased: Table<IoGlobalByFileByBytesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<IoGlobalByFileByBytesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<IoGlobalByFileByBytesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>sys.io_global_by_file_by_bytes</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.io_global_by_file_by_bytes</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.io_global_by_file_by_bytes</code> table reference
     */
    constructor(): this(DSL.name("io_global_by_file_by_bytes"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Sys.SYS
    override fun `as`(alias: String): IoGlobalByFileByBytes = IoGlobalByFileByBytes(DSL.name(alias), this)
    override fun `as`(alias: Name): IoGlobalByFileByBytes = IoGlobalByFileByBytes(alias, this)
    override fun `as`(alias: Table<*>): IoGlobalByFileByBytes = IoGlobalByFileByBytes(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): IoGlobalByFileByBytes = IoGlobalByFileByBytes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): IoGlobalByFileByBytes = IoGlobalByFileByBytes(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): IoGlobalByFileByBytes = IoGlobalByFileByBytes(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): IoGlobalByFileByBytes = IoGlobalByFileByBytes(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): IoGlobalByFileByBytes = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): IoGlobalByFileByBytes = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): IoGlobalByFileByBytes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): IoGlobalByFileByBytes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): IoGlobalByFileByBytes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): IoGlobalByFileByBytes = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): IoGlobalByFileByBytes = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): IoGlobalByFileByBytes = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): IoGlobalByFileByBytes = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<String?, ULong?, String?, String?, ULong?, String?, String?, String?, BigDecimal?> = super.fieldsRow() as Row9<String?, ULong?, String?, String?, ULong?, String?, String?, String?, BigDecimal?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, ULong?, String?, String?, ULong?, String?, String?, String?, BigDecimal?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, ULong?, String?, String?, ULong?, String?, String?, String?, BigDecimal?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
