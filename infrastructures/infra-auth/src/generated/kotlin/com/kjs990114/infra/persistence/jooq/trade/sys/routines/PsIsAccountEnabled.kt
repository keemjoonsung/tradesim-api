/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 * Description
 * -----------
 * 
 * Determines whether instrumentation of an account is enabled 
 * within Performance Schema.
 * 
 * Parameters
 * -----------
 * 
 * in_host VARCHAR(255): 
 *   The hostname of the account to check.
 * in_user VARCHAR(32):
 *   The username of the account to check.
 * 
 * Returns
 * -----------
 * 
 * ENUM('YES', 'NO', 'PARTIAL')
 * 
 * Example
 * -----------
 * 
 * mysql&gt; SELECT sys.ps_is_account_enabled('localhost', 'root');
 * +------------------------------------------------+
 * | sys.ps_is_account_enabled('localhost', 'root') |
 * +------------------------------------------------+
 * | YES                                            |
 * +------------------------------------------------+
 * 1 row in set (0.01 sec)

 */
@Suppress("UNCHECKED_CAST")
open class PsIsAccountEnabled : AbstractRoutine<String>("ps_is_account_enabled", Sys.SYS, SQLDataType.VARCHAR(3)) {
    companion object {

        /**
         * The parameter <code>sys.ps_is_account_enabled.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.VARCHAR(3), false, false)

        /**
         * The parameter <code>sys.ps_is_account_enabled.in_host</code>.
         */
        val IN_HOST: Parameter<String?> = Internal.createParameter("in_host", SQLDataType.VARCHAR(255), false, false)

        /**
         * The parameter <code>sys.ps_is_account_enabled.in_user</code>.
         */
        val IN_USER: Parameter<String?> = Internal.createParameter("in_user", SQLDataType.VARCHAR(32), false, false)
    }

    init {
        returnParameter = PsIsAccountEnabled.RETURN_VALUE
        addInParameter(PsIsAccountEnabled.IN_HOST)
        addInParameter(PsIsAccountEnabled.IN_USER)
    }

    /**
     * Set the <code>in_host</code> parameter IN value to the routine
     */
    fun setInHost(value: String?): Unit = setValue(PsIsAccountEnabled.IN_HOST, value)

    /**
     * Set the <code>in_host</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setInHost(field: Field<String?>): PsIsAccountEnabled {
        setField(PsIsAccountEnabled.IN_HOST, field)
        return this
    }

    /**
     * Set the <code>in_user</code> parameter IN value to the routine
     */
    fun setInUser(value: String?): Unit = setValue(PsIsAccountEnabled.IN_USER, value)

    /**
     * Set the <code>in_user</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setInUser(field: Field<String?>): PsIsAccountEnabled {
        setField(PsIsAccountEnabled.IN_USER, field)
        return this
    }
}
