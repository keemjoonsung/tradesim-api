/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.ColumnStatistics

import org.jooq.Field
import org.jooq.JSON
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ColumnStatisticsRecord() : TableRecordImpl<ColumnStatisticsRecord>(ColumnStatistics.COLUMN_STATISTICS), Record4<String?, String?, String?, JSON?> {

    open var schemaName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var columnName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var histogram: JSON?
        set(value): Unit = set(3, value)
        get(): JSON? = get(3) as JSON?

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, String?, JSON?> = super.fieldsRow() as Row4<String?, String?, String?, JSON?>
    override fun valuesRow(): Row4<String?, String?, String?, JSON?> = super.valuesRow() as Row4<String?, String?, String?, JSON?>
    override fun field1(): Field<String?> = ColumnStatistics.COLUMN_STATISTICS.SCHEMA_NAME
    override fun field2(): Field<String?> = ColumnStatistics.COLUMN_STATISTICS.TABLE_NAME
    override fun field3(): Field<String?> = ColumnStatistics.COLUMN_STATISTICS.COLUMN_NAME
    override fun field4(): Field<JSON?> = ColumnStatistics.COLUMN_STATISTICS.HISTOGRAM
    override fun component1(): String? = schemaName
    override fun component2(): String? = tableName
    override fun component3(): String? = columnName
    override fun component4(): JSON? = histogram
    override fun value1(): String? = schemaName
    override fun value2(): String? = tableName
    override fun value3(): String? = columnName
    override fun value4(): JSON? = histogram

    override fun value1(value: String?): ColumnStatisticsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): ColumnStatisticsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): ColumnStatisticsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: JSON?): ColumnStatisticsRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: JSON?): ColumnStatisticsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised ColumnStatisticsRecord
     */
    constructor(schemaName: String? = null, tableName: String? = null, columnName: String? = null, histogram: JSON? = null): this() {
        this.schemaName = schemaName
        this.tableName = tableName
        this.columnName = columnName
        this.histogram = histogram
        resetChangedOnNotNull()
    }
}
