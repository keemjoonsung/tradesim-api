/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.CondInstances

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CondInstancesRecord() : UpdatableRecordImpl<CondInstancesRecord>(CondInstances.COND_INSTANCES), Record2<String?, ULong?> {

    open var name: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var objectInstanceBegin: ULong?
        set(value): Unit = set(1, value)
        get(): ULong? = get(1) as ULong?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<ULong?> = super.key() as Record1<ULong?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, ULong?> = super.fieldsRow() as Row2<String?, ULong?>
    override fun valuesRow(): Row2<String?, ULong?> = super.valuesRow() as Row2<String?, ULong?>
    override fun field1(): Field<String?> = CondInstances.COND_INSTANCES.NAME
    override fun field2(): Field<ULong?> = CondInstances.COND_INSTANCES.OBJECT_INSTANCE_BEGIN
    override fun component1(): String? = name
    override fun component2(): ULong? = objectInstanceBegin
    override fun value1(): String? = name
    override fun value2(): ULong? = objectInstanceBegin

    override fun value1(value: String?): CondInstancesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: ULong?): CondInstancesRecord {
        set(1, value)
        return this
    }

    override fun values(value1: String?, value2: ULong?): CondInstancesRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised CondInstancesRecord
     */
    constructor(name: String? = null, objectInstanceBegin: ULong? = null): this() {
        this.name = name
        this.objectInstanceBegin = objectInstanceBegin
        resetChangedOnNotNull()
    }
}
