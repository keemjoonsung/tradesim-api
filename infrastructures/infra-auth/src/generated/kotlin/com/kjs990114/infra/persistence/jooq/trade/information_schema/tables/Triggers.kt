/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.information_schema.InformationSchema
import com.kjs990114.infra.persistence.jooq.trade.information_schema.enums.TriggersActionTiming
import com.kjs990114.infra.persistence.jooq.trade.information_schema.enums.TriggersEventManipulation
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records.TriggersRecord

import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row22
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Triggers(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TriggersRecord>?,
    parentPath: InverseForeignKey<out Record, TriggersRecord>?,
    aliased: Table<TriggersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TriggersRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.TRIGGERS</code>
         */
        val TRIGGERS: Triggers = Triggers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TriggersRecord> = TriggersRecord::class.java

    /**
     * The column <code>information_schema.TRIGGERS.TRIGGER_CATALOG</code>.
     */
    val TRIGGER_CATALOG: TableField<TriggersRecord, String?> = createField(DSL.name("TRIGGER_CATALOG"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.TRIGGER_SCHEMA</code>.
     */
    val TRIGGER_SCHEMA: TableField<TriggersRecord, String?> = createField(DSL.name("TRIGGER_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.TRIGGER_NAME</code>.
     */
    val TRIGGER_NAME: TableField<TriggersRecord, String?> = createField(DSL.name("TRIGGER_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.EVENT_MANIPULATION</code>.
     */
    val EVENT_MANIPULATION: TableField<TriggersRecord, TriggersEventManipulation?> = createField(DSL.name("EVENT_MANIPULATION"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(TriggersEventManipulation::class.java), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.EVENT_OBJECT_CATALOG</code>.
     */
    val EVENT_OBJECT_CATALOG: TableField<TriggersRecord, String?> = createField(DSL.name("EVENT_OBJECT_CATALOG"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.EVENT_OBJECT_SCHEMA</code>.
     */
    val EVENT_OBJECT_SCHEMA: TableField<TriggersRecord, String?> = createField(DSL.name("EVENT_OBJECT_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.EVENT_OBJECT_TABLE</code>.
     */
    val EVENT_OBJECT_TABLE: TableField<TriggersRecord, String?> = createField(DSL.name("EVENT_OBJECT_TABLE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_ORDER</code>.
     */
    val ACTION_ORDER: TableField<TriggersRecord, UInteger?> = createField(DSL.name("ACTION_ORDER"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_CONDITION</code>.
     */
    val ACTION_CONDITION: TableField<TriggersRecord, ByteArray?> = createField(DSL.name("ACTION_CONDITION"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_STATEMENT</code>.
     */
    val ACTION_STATEMENT: TableField<TriggersRecord, String?> = createField(DSL.name("ACTION_STATEMENT"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_ORIENTATION</code>.
     */
    val ACTION_ORIENTATION: TableField<TriggersRecord, String?> = createField(DSL.name("ACTION_ORIENTATION"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.ACTION_TIMING</code>.
     */
    val ACTION_TIMING: TableField<TriggersRecord, TriggersActionTiming?> = createField(DSL.name("ACTION_TIMING"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(TriggersActionTiming::class.java), this, "")

    /**
     * The column
     * <code>information_schema.TRIGGERS.ACTION_REFERENCE_OLD_TABLE</code>.
     */
    val ACTION_REFERENCE_OLD_TABLE: TableField<TriggersRecord, ByteArray?> = createField(DSL.name("ACTION_REFERENCE_OLD_TABLE"), SQLDataType.BINARY, this, "")

    /**
     * The column
     * <code>information_schema.TRIGGERS.ACTION_REFERENCE_NEW_TABLE</code>.
     */
    val ACTION_REFERENCE_NEW_TABLE: TableField<TriggersRecord, ByteArray?> = createField(DSL.name("ACTION_REFERENCE_NEW_TABLE"), SQLDataType.BINARY, this, "")

    /**
     * The column
     * <code>information_schema.TRIGGERS.ACTION_REFERENCE_OLD_ROW</code>.
     */
    val ACTION_REFERENCE_OLD_ROW: TableField<TriggersRecord, String?> = createField(DSL.name("ACTION_REFERENCE_OLD_ROW"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.TRIGGERS.ACTION_REFERENCE_NEW_ROW</code>.
     */
    val ACTION_REFERENCE_NEW_ROW: TableField<TriggersRecord, String?> = createField(DSL.name("ACTION_REFERENCE_NEW_ROW"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.CREATED</code>.
     */
    val CREATED: TableField<TriggersRecord, LocalDateTime?> = createField(DSL.name("CREATED"), SQLDataType.LOCALDATETIME(2).nullable(false), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.SQL_MODE</code>.
     */
    val SQL_MODE: TableField<TriggersRecord, String?> = createField(DSL.name("SQL_MODE"), SQLDataType.VARCHAR(520).nullable(false), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.DEFINER</code>.
     */
    val DEFINER: TableField<TriggersRecord, String?> = createField(DSL.name("DEFINER"), SQLDataType.VARCHAR(288).nullable(false), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.CHARACTER_SET_CLIENT</code>.
     */
    val CHARACTER_SET_CLIENT: TableField<TriggersRecord, String?> = createField(DSL.name("CHARACTER_SET_CLIENT"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.COLLATION_CONNECTION</code>.
     */
    val COLLATION_CONNECTION: TableField<TriggersRecord, String?> = createField(DSL.name("COLLATION_CONNECTION"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.TRIGGERS.DATABASE_COLLATION</code>.
     */
    val DATABASE_COLLATION: TableField<TriggersRecord, String?> = createField(DSL.name("DATABASE_COLLATION"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TriggersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TriggersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TriggersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.TRIGGERS</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.TRIGGERS</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.TRIGGERS</code> table reference
     */
    constructor(): this(DSL.name("TRIGGERS"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Triggers = Triggers(DSL.name(alias), this)
    override fun `as`(alias: Name): Triggers = Triggers(alias, this)
    override fun `as`(alias: Table<*>): Triggers = Triggers(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Triggers = Triggers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Triggers = Triggers(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Triggers = Triggers(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Triggers = Triggers(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Triggers = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Triggers = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Triggers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Triggers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Triggers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Triggers = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Triggers = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Triggers = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Triggers = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row22<String?, String?, String?, TriggersEventManipulation?, String?, String?, String?, UInteger?, ByteArray?, String?, String?, TriggersActionTiming?, ByteArray?, ByteArray?, String?, String?, LocalDateTime?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row22<String?, String?, String?, TriggersEventManipulation?, String?, String?, String?, UInteger?, ByteArray?, String?, String?, TriggersActionTiming?, ByteArray?, ByteArray?, String?, String?, LocalDateTime?, String?, String?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, TriggersEventManipulation?, String?, String?, String?, UInteger?, ByteArray?, String?, String?, TriggersActionTiming?, ByteArray?, ByteArray?, String?, String?, LocalDateTime?, String?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, TriggersEventManipulation?, String?, String?, String?, UInteger?, ByteArray?, String?, String?, TriggersActionTiming?, ByteArray?, ByteArray?, String?, String?, LocalDateTime?, String?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
