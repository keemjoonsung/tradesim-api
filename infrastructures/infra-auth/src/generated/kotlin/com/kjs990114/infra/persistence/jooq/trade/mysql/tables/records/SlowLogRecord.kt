/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.SlowLog

import java.time.LocalDateTime
import java.time.LocalTime

import org.jooq.Field
import org.jooq.Record12
import org.jooq.Row12
import org.jooq.impl.TableRecordImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * Slow log
 */
@Suppress("UNCHECKED_CAST")
open class SlowLogRecord() : TableRecordImpl<SlowLogRecord>(SlowLog.SLOW_LOG), Record12<LocalDateTime?, String?, LocalTime?, LocalTime?, Int?, Int?, String?, Int?, Int?, UInteger?, ByteArray?, ULong?> {

    open var startTime: LocalDateTime?
        set(value): Unit = set(0, value)
        get(): LocalDateTime? = get(0) as LocalDateTime?

    open var userHost: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var queryTime: LocalTime?
        set(value): Unit = set(2, value)
        get(): LocalTime? = get(2) as LocalTime?

    open var lockTime: LocalTime?
        set(value): Unit = set(3, value)
        get(): LocalTime? = get(3) as LocalTime?

    open var rowsSent: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var rowsExamined: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var db: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var lastInsertId: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var insertId: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open var serverId: UInteger?
        set(value): Unit = set(9, value)
        get(): UInteger? = get(9) as UInteger?

    open var sqlText: ByteArray?
        set(value): Unit = set(10, value)
        get(): ByteArray? = get(10) as ByteArray?

    open var threadId: ULong?
        set(value): Unit = set(11, value)
        get(): ULong? = get(11) as ULong?

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row12<LocalDateTime?, String?, LocalTime?, LocalTime?, Int?, Int?, String?, Int?, Int?, UInteger?, ByteArray?, ULong?> = super.fieldsRow() as Row12<LocalDateTime?, String?, LocalTime?, LocalTime?, Int?, Int?, String?, Int?, Int?, UInteger?, ByteArray?, ULong?>
    override fun valuesRow(): Row12<LocalDateTime?, String?, LocalTime?, LocalTime?, Int?, Int?, String?, Int?, Int?, UInteger?, ByteArray?, ULong?> = super.valuesRow() as Row12<LocalDateTime?, String?, LocalTime?, LocalTime?, Int?, Int?, String?, Int?, Int?, UInteger?, ByteArray?, ULong?>
    override fun field1(): Field<LocalDateTime?> = SlowLog.SLOW_LOG.START_TIME
    override fun field2(): Field<String?> = SlowLog.SLOW_LOG.USER_HOST
    override fun field3(): Field<LocalTime?> = SlowLog.SLOW_LOG.QUERY_TIME
    override fun field4(): Field<LocalTime?> = SlowLog.SLOW_LOG.LOCK_TIME
    override fun field5(): Field<Int?> = SlowLog.SLOW_LOG.ROWS_SENT
    override fun field6(): Field<Int?> = SlowLog.SLOW_LOG.ROWS_EXAMINED
    override fun field7(): Field<String?> = SlowLog.SLOW_LOG.DB
    override fun field8(): Field<Int?> = SlowLog.SLOW_LOG.LAST_INSERT_ID
    override fun field9(): Field<Int?> = SlowLog.SLOW_LOG.INSERT_ID
    override fun field10(): Field<UInteger?> = SlowLog.SLOW_LOG.SERVER_ID
    override fun field11(): Field<ByteArray?> = SlowLog.SLOW_LOG.SQL_TEXT
    override fun field12(): Field<ULong?> = SlowLog.SLOW_LOG.THREAD_ID
    override fun component1(): LocalDateTime? = startTime
    override fun component2(): String? = userHost
    override fun component3(): LocalTime? = queryTime
    override fun component4(): LocalTime? = lockTime
    override fun component5(): Int? = rowsSent
    override fun component6(): Int? = rowsExamined
    override fun component7(): String? = db
    override fun component8(): Int? = lastInsertId
    override fun component9(): Int? = insertId
    override fun component10(): UInteger? = serverId
    override fun component11(): ByteArray? = sqlText
    override fun component12(): ULong? = threadId
    override fun value1(): LocalDateTime? = startTime
    override fun value2(): String? = userHost
    override fun value3(): LocalTime? = queryTime
    override fun value4(): LocalTime? = lockTime
    override fun value5(): Int? = rowsSent
    override fun value6(): Int? = rowsExamined
    override fun value7(): String? = db
    override fun value8(): Int? = lastInsertId
    override fun value9(): Int? = insertId
    override fun value10(): UInteger? = serverId
    override fun value11(): ByteArray? = sqlText
    override fun value12(): ULong? = threadId

    override fun value1(value: LocalDateTime?): SlowLogRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): SlowLogRecord {
        set(1, value)
        return this
    }

    override fun value3(value: LocalTime?): SlowLogRecord {
        set(2, value)
        return this
    }

    override fun value4(value: LocalTime?): SlowLogRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): SlowLogRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): SlowLogRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): SlowLogRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Int?): SlowLogRecord {
        set(7, value)
        return this
    }

    override fun value9(value: Int?): SlowLogRecord {
        set(8, value)
        return this
    }

    override fun value10(value: UInteger?): SlowLogRecord {
        set(9, value)
        return this
    }

    override fun value11(value: ByteArray?): SlowLogRecord {
        set(10, value)
        return this
    }

    override fun value12(value: ULong?): SlowLogRecord {
        set(11, value)
        return this
    }

    override fun values(value1: LocalDateTime?, value2: String?, value3: LocalTime?, value4: LocalTime?, value5: Int?, value6: Int?, value7: String?, value8: Int?, value9: Int?, value10: UInteger?, value11: ByteArray?, value12: ULong?): SlowLogRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        return this
    }

    /**
     * Create a detached, initialised SlowLogRecord
     */
    constructor(startTime: LocalDateTime? = null, userHost: String? = null, queryTime: LocalTime? = null, lockTime: LocalTime? = null, rowsSent: Int? = null, rowsExamined: Int? = null, db: String? = null, lastInsertId: Int? = null, insertId: Int? = null, serverId: UInteger? = null, sqlText: ByteArray? = null, threadId: ULong? = null): this() {
        this.startTime = startTime
        this.userHost = userHost
        this.queryTime = queryTime
        this.lockTime = lockTime
        this.rowsSent = rowsSent
        this.rowsExamined = rowsExamined
        this.db = db
        this.lastInsertId = lastInsertId
        this.insertId = insertId
        this.serverId = serverId
        this.sqlText = sqlText
        this.threadId = threadId
        resetChangedOnNotNull()
    }
}
