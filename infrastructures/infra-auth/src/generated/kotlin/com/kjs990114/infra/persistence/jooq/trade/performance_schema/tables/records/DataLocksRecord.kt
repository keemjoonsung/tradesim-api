/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.DataLocks

import org.jooq.Field
import org.jooq.Record15
import org.jooq.Record2
import org.jooq.Row15
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DataLocksRecord() : UpdatableRecordImpl<DataLocksRecord>(DataLocks.DATA_LOCKS), Record15<String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?, ULong?, String?, String?, String?, String?> {

    open var engine: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var engineLockId: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var engineTransactionId: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var threadId: ULong?
        set(value): Unit = set(3, value)
        get(): ULong? = get(3) as ULong?

    open var eventId: ULong?
        set(value): Unit = set(4, value)
        get(): ULong? = get(4) as ULong?

    open var objectSchema: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var objectName: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var partitionName: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var subpartitionName: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var indexName: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var objectInstanceBegin: ULong?
        set(value): Unit = set(10, value)
        get(): ULong? = get(10) as ULong?

    open var lockType: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    open var lockMode: String?
        set(value): Unit = set(12, value)
        get(): String? = get(12) as String?

    open var lockStatus: String?
        set(value): Unit = set(13, value)
        get(): String? = get(13) as String?

    open var lockData: String?
        set(value): Unit = set(14, value)
        get(): String? = get(14) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, String?> = super.key() as Record2<String?, String?>

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row15<String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?, ULong?, String?, String?, String?, String?> = super.fieldsRow() as Row15<String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?, ULong?, String?, String?, String?, String?>
    override fun valuesRow(): Row15<String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?, ULong?, String?, String?, String?, String?> = super.valuesRow() as Row15<String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?, ULong?, String?, String?, String?, String?>
    override fun field1(): Field<String?> = DataLocks.DATA_LOCKS.ENGINE
    override fun field2(): Field<String?> = DataLocks.DATA_LOCKS.ENGINE_LOCK_ID
    override fun field3(): Field<ULong?> = DataLocks.DATA_LOCKS.ENGINE_TRANSACTION_ID
    override fun field4(): Field<ULong?> = DataLocks.DATA_LOCKS.THREAD_ID
    override fun field5(): Field<ULong?> = DataLocks.DATA_LOCKS.EVENT_ID
    override fun field6(): Field<String?> = DataLocks.DATA_LOCKS.OBJECT_SCHEMA
    override fun field7(): Field<String?> = DataLocks.DATA_LOCKS.OBJECT_NAME
    override fun field8(): Field<String?> = DataLocks.DATA_LOCKS.PARTITION_NAME
    override fun field9(): Field<String?> = DataLocks.DATA_LOCKS.SUBPARTITION_NAME
    override fun field10(): Field<String?> = DataLocks.DATA_LOCKS.INDEX_NAME
    override fun field11(): Field<ULong?> = DataLocks.DATA_LOCKS.OBJECT_INSTANCE_BEGIN
    override fun field12(): Field<String?> = DataLocks.DATA_LOCKS.LOCK_TYPE
    override fun field13(): Field<String?> = DataLocks.DATA_LOCKS.LOCK_MODE
    override fun field14(): Field<String?> = DataLocks.DATA_LOCKS.LOCK_STATUS
    override fun field15(): Field<String?> = DataLocks.DATA_LOCKS.LOCK_DATA
    override fun component1(): String? = engine
    override fun component2(): String? = engineLockId
    override fun component3(): ULong? = engineTransactionId
    override fun component4(): ULong? = threadId
    override fun component5(): ULong? = eventId
    override fun component6(): String? = objectSchema
    override fun component7(): String? = objectName
    override fun component8(): String? = partitionName
    override fun component9(): String? = subpartitionName
    override fun component10(): String? = indexName
    override fun component11(): ULong? = objectInstanceBegin
    override fun component12(): String? = lockType
    override fun component13(): String? = lockMode
    override fun component14(): String? = lockStatus
    override fun component15(): String? = lockData
    override fun value1(): String? = engine
    override fun value2(): String? = engineLockId
    override fun value3(): ULong? = engineTransactionId
    override fun value4(): ULong? = threadId
    override fun value5(): ULong? = eventId
    override fun value6(): String? = objectSchema
    override fun value7(): String? = objectName
    override fun value8(): String? = partitionName
    override fun value9(): String? = subpartitionName
    override fun value10(): String? = indexName
    override fun value11(): ULong? = objectInstanceBegin
    override fun value12(): String? = lockType
    override fun value13(): String? = lockMode
    override fun value14(): String? = lockStatus
    override fun value15(): String? = lockData

    override fun value1(value: String?): DataLocksRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): DataLocksRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): DataLocksRecord {
        set(2, value)
        return this
    }

    override fun value4(value: ULong?): DataLocksRecord {
        set(3, value)
        return this
    }

    override fun value5(value: ULong?): DataLocksRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): DataLocksRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): DataLocksRecord {
        set(6, value)
        return this
    }

    override fun value8(value: String?): DataLocksRecord {
        set(7, value)
        return this
    }

    override fun value9(value: String?): DataLocksRecord {
        set(8, value)
        return this
    }

    override fun value10(value: String?): DataLocksRecord {
        set(9, value)
        return this
    }

    override fun value11(value: ULong?): DataLocksRecord {
        set(10, value)
        return this
    }

    override fun value12(value: String?): DataLocksRecord {
        set(11, value)
        return this
    }

    override fun value13(value: String?): DataLocksRecord {
        set(12, value)
        return this
    }

    override fun value14(value: String?): DataLocksRecord {
        set(13, value)
        return this
    }

    override fun value15(value: String?): DataLocksRecord {
        set(14, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: ULong?, value4: ULong?, value5: ULong?, value6: String?, value7: String?, value8: String?, value9: String?, value10: String?, value11: ULong?, value12: String?, value13: String?, value14: String?, value15: String?): DataLocksRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        this.value13(value13)
        this.value14(value14)
        this.value15(value15)
        return this
    }

    /**
     * Create a detached, initialised DataLocksRecord
     */
    constructor(engine: String? = null, engineLockId: String? = null, engineTransactionId: ULong? = null, threadId: ULong? = null, eventId: ULong? = null, objectSchema: String? = null, objectName: String? = null, partitionName: String? = null, subpartitionName: String? = null, indexName: String? = null, objectInstanceBegin: ULong? = null, lockType: String? = null, lockMode: String? = null, lockStatus: String? = null, lockData: String? = null): this() {
        this.engine = engine
        this.engineLockId = engineLockId
        this.engineTransactionId = engineTransactionId
        this.threadId = threadId
        this.eventId = eventId
        this.objectSchema = objectSchema
        this.objectName = objectName
        this.partitionName = partitionName
        this.subpartitionName = subpartitionName
        this.indexName = indexName
        this.objectInstanceBegin = objectInstanceBegin
        this.lockType = lockType
        this.lockMode = lockMode
        this.lockStatus = lockStatus
        this.lockData = lockData
        resetChangedOnNotNull()
    }
}
