/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import com.kjs990114.infra.persistence.jooq.trade.sys.tables.InnodbBufferStatsByTable

import java.math.BigInteger

import org.jooq.Field
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbBufferStatsByTableRecord() : TableRecordImpl<InnodbBufferStatsByTableRecord>(InnodbBufferStatsByTable.INNODB_BUFFER_STATS_BY_TABLE), Record8<String?, String?, String?, String?, Long?, Long?, Long?, BigInteger?> {

    open var objectSchema: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var objectName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var allocated: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var `data`: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var pages: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    open var pagesHashed: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open var pagesOld: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    open var rowsCached: BigInteger?
        set(value): Unit = set(7, value)
        get(): BigInteger? = get(7) as BigInteger?

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<String?, String?, String?, String?, Long?, Long?, Long?, BigInteger?> = super.fieldsRow() as Row8<String?, String?, String?, String?, Long?, Long?, Long?, BigInteger?>
    override fun valuesRow(): Row8<String?, String?, String?, String?, Long?, Long?, Long?, BigInteger?> = super.valuesRow() as Row8<String?, String?, String?, String?, Long?, Long?, Long?, BigInteger?>
    override fun field1(): Field<String?> = InnodbBufferStatsByTable.INNODB_BUFFER_STATS_BY_TABLE.OBJECT_SCHEMA
    override fun field2(): Field<String?> = InnodbBufferStatsByTable.INNODB_BUFFER_STATS_BY_TABLE.OBJECT_NAME
    override fun field3(): Field<String?> = InnodbBufferStatsByTable.INNODB_BUFFER_STATS_BY_TABLE.ALLOCATED
    override fun field4(): Field<String?> = InnodbBufferStatsByTable.INNODB_BUFFER_STATS_BY_TABLE.DATA
    override fun field5(): Field<Long?> = InnodbBufferStatsByTable.INNODB_BUFFER_STATS_BY_TABLE.PAGES
    override fun field6(): Field<Long?> = InnodbBufferStatsByTable.INNODB_BUFFER_STATS_BY_TABLE.PAGES_HASHED
    override fun field7(): Field<Long?> = InnodbBufferStatsByTable.INNODB_BUFFER_STATS_BY_TABLE.PAGES_OLD
    override fun field8(): Field<BigInteger?> = InnodbBufferStatsByTable.INNODB_BUFFER_STATS_BY_TABLE.ROWS_CACHED
    override fun component1(): String? = objectSchema
    override fun component2(): String? = objectName
    override fun component3(): String? = allocated
    override fun component4(): String? = `data`
    override fun component5(): Long? = pages
    override fun component6(): Long? = pagesHashed
    override fun component7(): Long? = pagesOld
    override fun component8(): BigInteger? = rowsCached
    override fun value1(): String? = objectSchema
    override fun value2(): String? = objectName
    override fun value3(): String? = allocated
    override fun value4(): String? = `data`
    override fun value5(): Long? = pages
    override fun value6(): Long? = pagesHashed
    override fun value7(): Long? = pagesOld
    override fun value8(): BigInteger? = rowsCached

    override fun value1(value: String?): InnodbBufferStatsByTableRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): InnodbBufferStatsByTableRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): InnodbBufferStatsByTableRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): InnodbBufferStatsByTableRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Long?): InnodbBufferStatsByTableRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Long?): InnodbBufferStatsByTableRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Long?): InnodbBufferStatsByTableRecord {
        set(6, value)
        return this
    }

    override fun value8(value: BigInteger?): InnodbBufferStatsByTableRecord {
        set(7, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?, value5: Long?, value6: Long?, value7: Long?, value8: BigInteger?): InnodbBufferStatsByTableRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised InnodbBufferStatsByTableRecord
     */
    constructor(objectSchema: String? = null, objectName: String? = null, allocated: String? = null, `data`: String? = null, pages: Long? = null, pagesHashed: Long? = null, pagesOld: Long? = null, rowsCached: BigInteger? = null): this() {
        this.objectSchema = objectSchema
        this.objectName = objectName
        this.allocated = allocated
        this.`data` = `data`
        this.pages = pages
        this.pagesHashed = pagesHashed
        this.pagesOld = pagesOld
        this.rowsCached = rowsCached
        resetChangedOnNotNull()
    }
}
