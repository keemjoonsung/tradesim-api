/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ErrorLogPrio
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.ErrorLog

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ErrorLogRecord() : UpdatableRecordImpl<ErrorLogRecord>(ErrorLog.ERROR_LOG), Record6<LocalDateTime?, ULong?, ErrorLogPrio?, String?, String?, String?> {

    open var logged: LocalDateTime?
        set(value): Unit = set(0, value)
        get(): LocalDateTime? = get(0) as LocalDateTime?

    open var threadId: ULong?
        set(value): Unit = set(1, value)
        get(): ULong? = get(1) as ULong?

    open var prio: ErrorLogPrio?
        set(value): Unit = set(2, value)
        get(): ErrorLogPrio? = get(2) as ErrorLogPrio?

    open var errorCode: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var subsystem: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var `data`: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<LocalDateTime?> = super.key() as Record1<LocalDateTime?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<LocalDateTime?, ULong?, ErrorLogPrio?, String?, String?, String?> = super.fieldsRow() as Row6<LocalDateTime?, ULong?, ErrorLogPrio?, String?, String?, String?>
    override fun valuesRow(): Row6<LocalDateTime?, ULong?, ErrorLogPrio?, String?, String?, String?> = super.valuesRow() as Row6<LocalDateTime?, ULong?, ErrorLogPrio?, String?, String?, String?>
    override fun field1(): Field<LocalDateTime?> = ErrorLog.ERROR_LOG.LOGGED
    override fun field2(): Field<ULong?> = ErrorLog.ERROR_LOG.THREAD_ID
    override fun field3(): Field<ErrorLogPrio?> = ErrorLog.ERROR_LOG.PRIO
    override fun field4(): Field<String?> = ErrorLog.ERROR_LOG.ERROR_CODE
    override fun field5(): Field<String?> = ErrorLog.ERROR_LOG.SUBSYSTEM
    override fun field6(): Field<String?> = ErrorLog.ERROR_LOG.DATA
    override fun component1(): LocalDateTime? = logged
    override fun component2(): ULong? = threadId
    override fun component3(): ErrorLogPrio? = prio
    override fun component4(): String? = errorCode
    override fun component5(): String? = subsystem
    override fun component6(): String? = `data`
    override fun value1(): LocalDateTime? = logged
    override fun value2(): ULong? = threadId
    override fun value3(): ErrorLogPrio? = prio
    override fun value4(): String? = errorCode
    override fun value5(): String? = subsystem
    override fun value6(): String? = `data`

    override fun value1(value: LocalDateTime?): ErrorLogRecord {
        set(0, value)
        return this
    }

    override fun value2(value: ULong?): ErrorLogRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ErrorLogPrio?): ErrorLogRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): ErrorLogRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): ErrorLogRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): ErrorLogRecord {
        set(5, value)
        return this
    }

    override fun values(value1: LocalDateTime?, value2: ULong?, value3: ErrorLogPrio?, value4: String?, value5: String?, value6: String?): ErrorLogRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised ErrorLogRecord
     */
    constructor(logged: LocalDateTime? = null, threadId: ULong? = null, prio: ErrorLogPrio? = null, errorCode: String? = null, subsystem: String? = null, `data`: String? = null): this() {
        this.logged = logged
        this.threadId = threadId
        this.prio = prio
        this.errorCode = errorCode
        this.subsystem = subsystem
        this.`data` = `data`
        resetChangedOnNotNull()
    }
}
