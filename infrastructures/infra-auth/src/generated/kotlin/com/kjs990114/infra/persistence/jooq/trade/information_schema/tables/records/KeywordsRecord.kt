/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Keywords

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KeywordsRecord() : TableRecordImpl<KeywordsRecord>(Keywords.KEYWORDS), Record2<String?, Int?> {

    open var word: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var reserved: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, Int?> = super.fieldsRow() as Row2<String?, Int?>
    override fun valuesRow(): Row2<String?, Int?> = super.valuesRow() as Row2<String?, Int?>
    override fun field1(): Field<String?> = Keywords.KEYWORDS.WORD
    override fun field2(): Field<Int?> = Keywords.KEYWORDS.RESERVED
    override fun component1(): String? = word
    override fun component2(): Int? = reserved
    override fun value1(): String? = word
    override fun value2(): Int? = reserved

    override fun value1(value: String?): KeywordsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): KeywordsRecord {
        set(1, value)
        return this
    }

    override fun values(value1: String?, value2: Int?): KeywordsRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised KeywordsRecord
     */
    constructor(word: String? = null, reserved: Int? = null): this() {
        this.word = word
        this.reserved = reserved
        resetChangedOnNotNull()
    }
}
