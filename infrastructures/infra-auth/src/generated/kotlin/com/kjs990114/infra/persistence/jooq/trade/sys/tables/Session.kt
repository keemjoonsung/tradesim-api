/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys
import com.kjs990114.infra.persistence.jooq.trade.sys.enums.SessionExecutionEngine
import com.kjs990114.infra.persistence.jooq.trade.sys.enums.SessionTrxAutocommit
import com.kjs990114.infra.persistence.jooq.trade.sys.enums.SessionTrxState
import com.kjs990114.infra.persistence.jooq.trade.sys.tables.records.SessionRecord

import java.math.BigDecimal

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Session(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SessionRecord>?,
    parentPath: InverseForeignKey<out Record, SessionRecord>?,
    aliased: Table<SessionRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SessionRecord>(
    alias,
    Sys.SYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view `session` as select `sys`.`processlist`.`thd_id` AS `thd_id`,`sys`.`processlist`.`conn_id` AS `conn_id`,`sys`.`processlist`.`user` AS `user`,`sys`.`processlist`.`db` AS `db`,`sys`.`processlist`.`command` AS `command`,`sys`.`processlist`.`state` AS `state`,`sys`.`processlist`.`time` AS `time`,`sys`.`processlist`.`current_statement` AS `current_statement`,`sys`.`processlist`.`execution_engine` AS `execution_engine`,`sys`.`processlist`.`statement_latency` AS `statement_latency`,`sys`.`processlist`.`progress` AS `progress`,`sys`.`processlist`.`lock_latency` AS `lock_latency`,`sys`.`processlist`.`cpu_latency` AS `cpu_latency`,`sys`.`processlist`.`rows_examined` AS `rows_examined`,`sys`.`processlist`.`rows_sent` AS `rows_sent`,`sys`.`processlist`.`rows_affected` AS `rows_affected`,`sys`.`processlist`.`tmp_tables` AS `tmp_tables`,`sys`.`processlist`.`tmp_disk_tables` AS `tmp_disk_tables`,`sys`.`processlist`.`full_scan` AS `full_scan`,`sys`.`processlist`.`last_statement` AS `last_statement`,`sys`.`processlist`.`last_statement_latency` AS `last_statement_latency`,`sys`.`processlist`.`current_memory` AS `current_memory`,`sys`.`processlist`.`last_wait` AS `last_wait`,`sys`.`processlist`.`last_wait_latency` AS `last_wait_latency`,`sys`.`processlist`.`source` AS `source`,`sys`.`processlist`.`trx_latency` AS `trx_latency`,`sys`.`processlist`.`trx_state` AS `trx_state`,`sys`.`processlist`.`trx_autocommit` AS `trx_autocommit`,`sys`.`processlist`.`pid` AS `pid`,`sys`.`processlist`.`program_name` AS `program_name` from `sys`.`processlist` where ((`sys`.`processlist`.`conn_id` is not null) and (`sys`.`processlist`.`command` <> 'Daemon'))"),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>sys.session</code>
         */
        val SESSION: Session = Session()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SessionRecord> = SessionRecord::class.java

    /**
     * The column <code>sys.session.thd_id</code>.
     */
    val THD_ID: TableField<SessionRecord, ULong?> = createField(DSL.name("thd_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.session.conn_id</code>.
     */
    val CONN_ID: TableField<SessionRecord, ULong?> = createField(DSL.name("conn_id"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.session.user</code>.
     */
    val USER: TableField<SessionRecord, String?> = createField(DSL.name("user"), SQLDataType.VARCHAR(288), this, "")

    /**
     * The column <code>sys.session.db</code>.
     */
    val DB: TableField<SessionRecord, String?> = createField(DSL.name("db"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.session.command</code>.
     */
    val COMMAND: TableField<SessionRecord, String?> = createField(DSL.name("command"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>sys.session.state</code>.
     */
    val STATE: TableField<SessionRecord, String?> = createField(DSL.name("state"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.session.time</code>.
     */
    val TIME: TableField<SessionRecord, Long?> = createField(DSL.name("time"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>sys.session.current_statement</code>.
     */
    val CURRENT_STATEMENT: TableField<SessionRecord, String?> = createField(DSL.name("current_statement"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.session.execution_engine</code>.
     */
    val EXECUTION_ENGINE: TableField<SessionRecord, SessionExecutionEngine?> = createField(DSL.name("execution_engine"), SQLDataType.VARCHAR(9).asEnumDataType(SessionExecutionEngine::class.java), this, "")

    /**
     * The column <code>sys.session.statement_latency</code>.
     */
    val STATEMENT_LATENCY: TableField<SessionRecord, String?> = createField(DSL.name("statement_latency"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.session.progress</code>.
     */
    val PROGRESS: TableField<SessionRecord, BigDecimal?> = createField(DSL.name("progress"), SQLDataType.DECIMAL(26, 2), this, "")

    /**
     * The column <code>sys.session.lock_latency</code>.
     */
    val LOCK_LATENCY: TableField<SessionRecord, String?> = createField(DSL.name("lock_latency"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.session.cpu_latency</code>.
     */
    val CPU_LATENCY: TableField<SessionRecord, String?> = createField(DSL.name("cpu_latency"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.session.rows_examined</code>.
     */
    val ROWS_EXAMINED: TableField<SessionRecord, ULong?> = createField(DSL.name("rows_examined"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.session.rows_sent</code>.
     */
    val ROWS_SENT: TableField<SessionRecord, ULong?> = createField(DSL.name("rows_sent"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.session.rows_affected</code>.
     */
    val ROWS_AFFECTED: TableField<SessionRecord, ULong?> = createField(DSL.name("rows_affected"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.session.tmp_tables</code>.
     */
    val TMP_TABLES: TableField<SessionRecord, ULong?> = createField(DSL.name("tmp_tables"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.session.tmp_disk_tables</code>.
     */
    val TMP_DISK_TABLES: TableField<SessionRecord, ULong?> = createField(DSL.name("tmp_disk_tables"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.session.full_scan</code>.
     */
    val FULL_SCAN: TableField<SessionRecord, String?> = createField(DSL.name("full_scan"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>sys.session.last_statement</code>.
     */
    val LAST_STATEMENT: TableField<SessionRecord, String?> = createField(DSL.name("last_statement"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.session.last_statement_latency</code>.
     */
    val LAST_STATEMENT_LATENCY: TableField<SessionRecord, String?> = createField(DSL.name("last_statement_latency"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.session.current_memory</code>.
     */
    val CURRENT_MEMORY: TableField<SessionRecord, String?> = createField(DSL.name("current_memory"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.session.last_wait</code>.
     */
    val LAST_WAIT: TableField<SessionRecord, String?> = createField(DSL.name("last_wait"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>sys.session.last_wait_latency</code>.
     */
    val LAST_WAIT_LATENCY: TableField<SessionRecord, String?> = createField(DSL.name("last_wait_latency"), SQLDataType.VARCHAR(13), this, "")

    /**
     * The column <code>sys.session.source</code>.
     */
    val SOURCE: TableField<SessionRecord, String?> = createField(DSL.name("source"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.session.trx_latency</code>.
     */
    val TRX_LATENCY: TableField<SessionRecord, String?> = createField(DSL.name("trx_latency"), SQLDataType.VARCHAR(11), this, "")

    /**
     * The column <code>sys.session.trx_state</code>.
     */
    val TRX_STATE: TableField<SessionRecord, SessionTrxState?> = createField(DSL.name("trx_state"), SQLDataType.VARCHAR(11).asEnumDataType(SessionTrxState::class.java), this, "")

    /**
     * The column <code>sys.session.trx_autocommit</code>.
     */
    val TRX_AUTOCOMMIT: TableField<SessionRecord, SessionTrxAutocommit?> = createField(DSL.name("trx_autocommit"), SQLDataType.VARCHAR(3).asEnumDataType(SessionTrxAutocommit::class.java), this, "")

    /**
     * The column <code>sys.session.pid</code>.
     */
    val PID: TableField<SessionRecord, String?> = createField(DSL.name("pid"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column <code>sys.session.program_name</code>.
     */
    val PROGRAM_NAME: TableField<SessionRecord, String?> = createField(DSL.name("program_name"), SQLDataType.VARCHAR(1024), this, "")

    private constructor(alias: Name, aliased: Table<SessionRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SessionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SessionRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>sys.session</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.session</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.session</code> table reference
     */
    constructor(): this(DSL.name("session"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Sys.SYS
    override fun `as`(alias: String): Session = Session(DSL.name(alias), this)
    override fun `as`(alias: Name): Session = Session(alias, this)
    override fun `as`(alias: Table<*>): Session = Session(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Session = Session(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Session = Session(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Session = Session(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Session = Session(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Session = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Session = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Session = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Session = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Session = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Session = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Session = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Session = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Session = where(DSL.notExists(select))
}
