/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.enums.EventsIntervalField
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Events

import java.time.LocalDateTime

import org.jooq.impl.TableRecordImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventsRecord() : TableRecordImpl<EventsRecord>(Events.EVENTS) {

    open var eventCatalog: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var eventSchema: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var eventName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var definer: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var timeZone: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var eventBody: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var eventDefinition: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var eventType: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var executeAt: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    open var intervalValue: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var intervalField: EventsIntervalField?
        set(value): Unit = set(10, value)
        get(): EventsIntervalField? = get(10) as EventsIntervalField?

    open var sqlMode: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    open var starts: LocalDateTime?
        set(value): Unit = set(12, value)
        get(): LocalDateTime? = get(12) as LocalDateTime?

    open var ends: LocalDateTime?
        set(value): Unit = set(13, value)
        get(): LocalDateTime? = get(13) as LocalDateTime?

    open var status: String?
        set(value): Unit = set(14, value)
        get(): String? = get(14) as String?

    open var onCompletion: String?
        set(value): Unit = set(15, value)
        get(): String? = get(15) as String?

    open var created: LocalDateTime?
        set(value): Unit = set(16, value)
        get(): LocalDateTime? = get(16) as LocalDateTime?

    open var lastAltered: LocalDateTime?
        set(value): Unit = set(17, value)
        get(): LocalDateTime? = get(17) as LocalDateTime?

    open var lastExecuted: LocalDateTime?
        set(value): Unit = set(18, value)
        get(): LocalDateTime? = get(18) as LocalDateTime?

    open var eventComment: String?
        set(value): Unit = set(19, value)
        get(): String? = get(19) as String?

    open var originator: UInteger?
        set(value): Unit = set(20, value)
        get(): UInteger? = get(20) as UInteger?

    open var characterSetClient: String?
        set(value): Unit = set(21, value)
        get(): String? = get(21) as String?

    open var collationConnection: String?
        set(value): Unit = set(22, value)
        get(): String? = get(22) as String?

    open var databaseCollation: String?
        set(value): Unit = set(23, value)
        get(): String? = get(23) as String?

    /**
     * Create a detached, initialised EventsRecord
     */
    constructor(eventCatalog: String? = null, eventSchema: String? = null, eventName: String? = null, definer: String? = null, timeZone: String? = null, eventBody: String? = null, eventDefinition: String? = null, eventType: String? = null, executeAt: LocalDateTime? = null, intervalValue: String? = null, intervalField: EventsIntervalField? = null, sqlMode: String? = null, starts: LocalDateTime? = null, ends: LocalDateTime? = null, status: String? = null, onCompletion: String? = null, created: LocalDateTime? = null, lastAltered: LocalDateTime? = null, lastExecuted: LocalDateTime? = null, eventComment: String? = null, originator: UInteger? = null, characterSetClient: String? = null, collationConnection: String? = null, databaseCollation: String? = null): this() {
        this.eventCatalog = eventCatalog
        this.eventSchema = eventSchema
        this.eventName = eventName
        this.definer = definer
        this.timeZone = timeZone
        this.eventBody = eventBody
        this.eventDefinition = eventDefinition
        this.eventType = eventType
        this.executeAt = executeAt
        this.intervalValue = intervalValue
        this.intervalField = intervalField
        this.sqlMode = sqlMode
        this.starts = starts
        this.ends = ends
        this.status = status
        this.onCompletion = onCompletion
        this.created = created
        this.lastAltered = lastAltered
        this.lastExecuted = lastExecuted
        this.eventComment = eventComment
        this.originator = originator
        this.characterSetClient = characterSetClient
        this.collationConnection = collationConnection
        this.databaseCollation = databaseCollation
        resetChangedOnNotNull()
    }
}
