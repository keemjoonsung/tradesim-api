/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbFtIndexTable

import org.jooq.Field
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbFtIndexTableRecord() : TableRecordImpl<InnodbFtIndexTableRecord>(InnodbFtIndexTable.INNODB_FT_INDEX_TABLE), Record6<String?, ULong?, ULong?, ULong?, ULong?, ULong?> {

    open var word: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var firstDocId: ULong?
        set(value): Unit = set(1, value)
        get(): ULong? = get(1) as ULong?

    open var lastDocId: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var docCount: ULong?
        set(value): Unit = set(3, value)
        get(): ULong? = get(3) as ULong?

    open var docId: ULong?
        set(value): Unit = set(4, value)
        get(): ULong? = get(4) as ULong?

    open var position: ULong?
        set(value): Unit = set(5, value)
        get(): ULong? = get(5) as ULong?

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<String?, ULong?, ULong?, ULong?, ULong?, ULong?> = super.fieldsRow() as Row6<String?, ULong?, ULong?, ULong?, ULong?, ULong?>
    override fun valuesRow(): Row6<String?, ULong?, ULong?, ULong?, ULong?, ULong?> = super.valuesRow() as Row6<String?, ULong?, ULong?, ULong?, ULong?, ULong?>
    override fun field1(): Field<String?> = InnodbFtIndexTable.INNODB_FT_INDEX_TABLE.WORD
    override fun field2(): Field<ULong?> = InnodbFtIndexTable.INNODB_FT_INDEX_TABLE.FIRST_DOC_ID
    override fun field3(): Field<ULong?> = InnodbFtIndexTable.INNODB_FT_INDEX_TABLE.LAST_DOC_ID
    override fun field4(): Field<ULong?> = InnodbFtIndexTable.INNODB_FT_INDEX_TABLE.DOC_COUNT
    override fun field5(): Field<ULong?> = InnodbFtIndexTable.INNODB_FT_INDEX_TABLE.DOC_ID
    override fun field6(): Field<ULong?> = InnodbFtIndexTable.INNODB_FT_INDEX_TABLE.POSITION
    override fun component1(): String? = word
    override fun component2(): ULong? = firstDocId
    override fun component3(): ULong? = lastDocId
    override fun component4(): ULong? = docCount
    override fun component5(): ULong? = docId
    override fun component6(): ULong? = position
    override fun value1(): String? = word
    override fun value2(): ULong? = firstDocId
    override fun value3(): ULong? = lastDocId
    override fun value4(): ULong? = docCount
    override fun value5(): ULong? = docId
    override fun value6(): ULong? = position

    override fun value1(value: String?): InnodbFtIndexTableRecord {
        set(0, value)
        return this
    }

    override fun value2(value: ULong?): InnodbFtIndexTableRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): InnodbFtIndexTableRecord {
        set(2, value)
        return this
    }

    override fun value4(value: ULong?): InnodbFtIndexTableRecord {
        set(3, value)
        return this
    }

    override fun value5(value: ULong?): InnodbFtIndexTableRecord {
        set(4, value)
        return this
    }

    override fun value6(value: ULong?): InnodbFtIndexTableRecord {
        set(5, value)
        return this
    }

    override fun values(value1: String?, value2: ULong?, value3: ULong?, value4: ULong?, value5: ULong?, value6: ULong?): InnodbFtIndexTableRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised InnodbFtIndexTableRecord
     */
    constructor(word: String? = null, firstDocId: ULong? = null, lastDocId: ULong? = null, docCount: ULong? = null, docId: ULong? = null, position: ULong? = null): this() {
        this.word = word
        this.firstDocId = firstDocId
        this.lastDocId = lastDocId
        this.docCount = docCount
        this.docId = docId
        this.position = position
        resetChangedOnNotNull()
    }
}
