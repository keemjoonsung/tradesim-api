/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.FILE_SUMMARY_BY_INSTANCE_EVENT_NAME
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.FILE_SUMMARY_BY_INSTANCE_FILE_NAME
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_FILE_SUMMARY_BY_INSTANCE_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.FileSummaryByInstanceRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FileSummaryByInstance(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, FileSummaryByInstanceRecord>?,
    parentPath: InverseForeignKey<out Record, FileSummaryByInstanceRecord>?,
    aliased: Table<FileSummaryByInstanceRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<FileSummaryByInstanceRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>performance_schema.file_summary_by_instance</code>
         */
        val FILE_SUMMARY_BY_INSTANCE: FileSummaryByInstance = FileSummaryByInstance()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FileSummaryByInstanceRecord> = FileSummaryByInstanceRecord::class.java

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.FILE_NAME</code>.
     */
    val FILE_NAME: TableField<FileSummaryByInstanceRecord, String?> = createField(DSL.name("FILE_NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.EVENT_NAME</code>.
     */
    val EVENT_NAME: TableField<FileSummaryByInstanceRecord, String?> = createField(DSL.name("EVENT_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.OBJECT_INSTANCE_BEGIN</code>.
     */
    val OBJECT_INSTANCE_BEGIN: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.COUNT_STAR</code>.
     */
    val COUNT_STAR: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("COUNT_STAR"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.SUM_TIMER_WAIT</code>.
     */
    val SUM_TIMER_WAIT: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("SUM_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.MIN_TIMER_WAIT</code>.
     */
    val MIN_TIMER_WAIT: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("MIN_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.AVG_TIMER_WAIT</code>.
     */
    val AVG_TIMER_WAIT: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("AVG_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.MAX_TIMER_WAIT</code>.
     */
    val MAX_TIMER_WAIT: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("MAX_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.COUNT_READ</code>.
     */
    val COUNT_READ: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("COUNT_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.SUM_TIMER_READ</code>.
     */
    val SUM_TIMER_READ: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("SUM_TIMER_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.MIN_TIMER_READ</code>.
     */
    val MIN_TIMER_READ: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("MIN_TIMER_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.AVG_TIMER_READ</code>.
     */
    val AVG_TIMER_READ: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("AVG_TIMER_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.MAX_TIMER_READ</code>.
     */
    val MAX_TIMER_READ: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("MAX_TIMER_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.SUM_NUMBER_OF_BYTES_READ</code>.
     */
    val SUM_NUMBER_OF_BYTES_READ: TableField<FileSummaryByInstanceRecord, Long?> = createField(DSL.name("SUM_NUMBER_OF_BYTES_READ"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.COUNT_WRITE</code>.
     */
    val COUNT_WRITE: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("COUNT_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.SUM_TIMER_WRITE</code>.
     */
    val SUM_TIMER_WRITE: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("SUM_TIMER_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.MIN_TIMER_WRITE</code>.
     */
    val MIN_TIMER_WRITE: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("MIN_TIMER_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.AVG_TIMER_WRITE</code>.
     */
    val AVG_TIMER_WRITE: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("AVG_TIMER_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.MAX_TIMER_WRITE</code>.
     */
    val MAX_TIMER_WRITE: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("MAX_TIMER_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.SUM_NUMBER_OF_BYTES_WRITE</code>.
     */
    val SUM_NUMBER_OF_BYTES_WRITE: TableField<FileSummaryByInstanceRecord, Long?> = createField(DSL.name("SUM_NUMBER_OF_BYTES_WRITE"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.COUNT_MISC</code>.
     */
    val COUNT_MISC: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("COUNT_MISC"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.SUM_TIMER_MISC</code>.
     */
    val SUM_TIMER_MISC: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("SUM_TIMER_MISC"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.MIN_TIMER_MISC</code>.
     */
    val MIN_TIMER_MISC: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("MIN_TIMER_MISC"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.AVG_TIMER_MISC</code>.
     */
    val AVG_TIMER_MISC: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("AVG_TIMER_MISC"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.file_summary_by_instance.MAX_TIMER_MISC</code>.
     */
    val MAX_TIMER_MISC: TableField<FileSummaryByInstanceRecord, ULong?> = createField(DSL.name("MAX_TIMER_MISC"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<FileSummaryByInstanceRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<FileSummaryByInstanceRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<FileSummaryByInstanceRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>performance_schema.file_summary_by_instance</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>performance_schema.file_summary_by_instance</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.file_summary_by_instance</code> table
     * reference
     */
    constructor(): this(DSL.name("file_summary_by_instance"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getIndexes(): List<Index> = listOf(FILE_SUMMARY_BY_INSTANCE_EVENT_NAME, FILE_SUMMARY_BY_INSTANCE_FILE_NAME)
    override fun getPrimaryKey(): UniqueKey<FileSummaryByInstanceRecord> = KEY_FILE_SUMMARY_BY_INSTANCE_PRIMARY
    override fun `as`(alias: String): FileSummaryByInstance = FileSummaryByInstance(DSL.name(alias), this)
    override fun `as`(alias: Name): FileSummaryByInstance = FileSummaryByInstance(alias, this)
    override fun `as`(alias: Table<*>): FileSummaryByInstance = FileSummaryByInstance(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): FileSummaryByInstance = FileSummaryByInstance(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): FileSummaryByInstance = FileSummaryByInstance(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): FileSummaryByInstance = FileSummaryByInstance(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): FileSummaryByInstance = FileSummaryByInstance(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): FileSummaryByInstance = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): FileSummaryByInstance = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): FileSummaryByInstance = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): FileSummaryByInstance = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): FileSummaryByInstance = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): FileSummaryByInstance = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): FileSummaryByInstance = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): FileSummaryByInstance = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): FileSummaryByInstance = where(DSL.notExists(select))
}
