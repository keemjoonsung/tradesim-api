/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import com.kjs990114.infra.persistence.jooq.trade.sys.tables.SysConfig

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SysConfigRecord() : UpdatableRecordImpl<SysConfigRecord>(SysConfig.SYS_CONFIG), Record4<String?, String?, LocalDateTime?, String?> {

    open var variable: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var value: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var setTime: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var setBy: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, LocalDateTime?, String?> = super.fieldsRow() as Row4<String?, String?, LocalDateTime?, String?>
    override fun valuesRow(): Row4<String?, String?, LocalDateTime?, String?> = super.valuesRow() as Row4<String?, String?, LocalDateTime?, String?>
    override fun field1(): Field<String?> = SysConfig.SYS_CONFIG.VARIABLE
    override fun field2(): Field<String?> = SysConfig.SYS_CONFIG.VALUE
    override fun field3(): Field<LocalDateTime?> = SysConfig.SYS_CONFIG.SET_TIME
    override fun field4(): Field<String?> = SysConfig.SYS_CONFIG.SET_BY
    override fun component1(): String? = variable
    override fun component2(): String? = value
    override fun component3(): LocalDateTime? = setTime
    override fun component4(): String? = setBy
    override fun value1(): String? = variable
    override fun value2(): String? = value
    override fun value3(): LocalDateTime? = setTime
    override fun value4(): String? = setBy

    override fun value1(value: String?): SysConfigRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): SysConfigRecord {
        set(1, value)
        return this
    }

    override fun value3(value: LocalDateTime?): SysConfigRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): SysConfigRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: LocalDateTime?, value4: String?): SysConfigRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised SysConfigRecord
     */
    constructor(variable: String? = null, value: String? = null, setTime: LocalDateTime? = null, setBy: String? = null): this() {
        this.variable = variable
        this.value = value
        this.setTime = setTime
        this.setBy = setBy
        resetChangedOnNotNull()
    }
}
