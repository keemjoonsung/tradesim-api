/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationApplierStatusByWorkerServiceState
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.REPLICATION_APPLIER_STATUS_BY_WORKER_THREAD_ID
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_REPLICATION_APPLIER_STATUS_BY_WORKER_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.ReplicationApplierStatusByWorkerRecord

import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationApplierStatusByWorker(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ReplicationApplierStatusByWorkerRecord>?,
    parentPath: InverseForeignKey<out Record, ReplicationApplierStatusByWorkerRecord>?,
    aliased: Table<ReplicationApplierStatusByWorkerRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ReplicationApplierStatusByWorkerRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>performance_schema.replication_applier_status_by_worker</code>
         */
        val REPLICATION_APPLIER_STATUS_BY_WORKER: ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ReplicationApplierStatusByWorkerRecord> = ReplicationApplierStatusByWorkerRecord::class.java

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.CHANNEL_NAME</code>.
     */
    val CHANNEL_NAME: TableField<ReplicationApplierStatusByWorkerRecord, String?> = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.WORKER_ID</code>.
     */
    val WORKER_ID: TableField<ReplicationApplierStatusByWorkerRecord, ULong?> = createField(DSL.name("WORKER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<ReplicationApplierStatusByWorkerRecord, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.SERVICE_STATE</code>.
     */
    val SERVICE_STATE: TableField<ReplicationApplierStatusByWorkerRecord, ReplicationApplierStatusByWorkerServiceState?> = createField(DSL.name("SERVICE_STATE"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(ReplicationApplierStatusByWorkerServiceState::class.java), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_NUMBER</code>.
     */
    val LAST_ERROR_NUMBER: TableField<ReplicationApplierStatusByWorkerRecord, Int?> = createField(DSL.name("LAST_ERROR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_MESSAGE</code>.
     */
    val LAST_ERROR_MESSAGE: TableField<ReplicationApplierStatusByWorkerRecord, String?> = createField(DSL.name("LAST_ERROR_MESSAGE"), SQLDataType.VARCHAR(1024).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_TIMESTAMP</code>.
     */
    val LAST_ERROR_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("LAST_ERROR_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION</code>.
     */
    val LAST_APPLIED_TRANSACTION: TableField<ReplicationApplierStatusByWorkerRecord, String?> = createField(DSL.name("LAST_APPLIED_TRANSACTION"), SQLDataType.CHAR(57), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    val LAST_APPLIED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("LAST_APPLIED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    val LAST_APPLIED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("LAST_APPLIED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP</code>.
     */
    val LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP</code>.
     */
    val LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION</code>.
     */
    val APPLYING_TRANSACTION: TableField<ReplicationApplierStatusByWorkerRecord, String?> = createField(DSL.name("APPLYING_TRANSACTION"), SQLDataType.CHAR(57), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    val APPLYING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("APPLYING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    val APPLYING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("APPLYING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_START_APPLY_TIMESTAMP</code>.
     */
    val APPLYING_TRANSACTION_START_APPLY_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("APPLYING_TRANSACTION_START_APPLY_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_RETRIES_COUNT</code>.
     */
    val LAST_APPLIED_TRANSACTION_RETRIES_COUNT: TableField<ReplicationApplierStatusByWorkerRecord, ULong?> = createField(DSL.name("LAST_APPLIED_TRANSACTION_RETRIES_COUNT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER</code>.
     */
    val LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER: TableField<ReplicationApplierStatusByWorkerRecord, Int?> = createField(DSL.name("LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE</code>.
     */
    val LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE: TableField<ReplicationApplierStatusByWorkerRecord, String?> = createField(DSL.name("LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP</code>.
     */
    val LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_RETRIES_COUNT</code>.
     */
    val APPLYING_TRANSACTION_RETRIES_COUNT: TableField<ReplicationApplierStatusByWorkerRecord, ULong?> = createField(DSL.name("APPLYING_TRANSACTION_RETRIES_COUNT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER</code>.
     */
    val APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER: TableField<ReplicationApplierStatusByWorkerRecord, Int?> = createField(DSL.name("APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE</code>.
     */
    val APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE: TableField<ReplicationApplierStatusByWorkerRecord, String?> = createField(DSL.name("APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP</code>.
     */
    val APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP: TableField<ReplicationApplierStatusByWorkerRecord, LocalDateTime?> = createField(DSL.name("APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ReplicationApplierStatusByWorkerRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ReplicationApplierStatusByWorkerRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ReplicationApplierStatusByWorkerRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>performance_schema.replication_applier_status_by_worker</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>performance_schema.replication_applier_status_by_worker</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a
     * <code>performance_schema.replication_applier_status_by_worker</code>
     * table reference
     */
    constructor(): this(DSL.name("replication_applier_status_by_worker"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getIndexes(): List<Index> = listOf(REPLICATION_APPLIER_STATUS_BY_WORKER_THREAD_ID)
    override fun getPrimaryKey(): UniqueKey<ReplicationApplierStatusByWorkerRecord> = KEY_REPLICATION_APPLIER_STATUS_BY_WORKER_PRIMARY
    override fun `as`(alias: String): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(DSL.name(alias), this)
    override fun `as`(alias: Name): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(alias, this)
    override fun `as`(alias: Table<*>): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ReplicationApplierStatusByWorker = ReplicationApplierStatusByWorker(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ReplicationApplierStatusByWorker = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ReplicationApplierStatusByWorker = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ReplicationApplierStatusByWorker = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ReplicationApplierStatusByWorker = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ReplicationApplierStatusByWorker = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ReplicationApplierStatusByWorker = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ReplicationApplierStatusByWorker = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ReplicationApplierStatusByWorker = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ReplicationApplierStatusByWorker = where(DSL.notExists(select))
}
