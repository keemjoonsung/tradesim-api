/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.KeyringKeys

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KeyringKeysRecord() : TableRecordImpl<KeyringKeysRecord>(KeyringKeys.KEYRING_KEYS), Record3<String?, String?, String?> {

    open var keyId: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var keyOwner: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var backendKeyId: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, String?, String?> = super.fieldsRow() as Row3<String?, String?, String?>
    override fun valuesRow(): Row3<String?, String?, String?> = super.valuesRow() as Row3<String?, String?, String?>
    override fun field1(): Field<String?> = KeyringKeys.KEYRING_KEYS.KEY_ID
    override fun field2(): Field<String?> = KeyringKeys.KEYRING_KEYS.KEY_OWNER
    override fun field3(): Field<String?> = KeyringKeys.KEYRING_KEYS.BACKEND_KEY_ID
    override fun component1(): String? = keyId
    override fun component2(): String? = keyOwner
    override fun component3(): String? = backendKeyId
    override fun value1(): String? = keyId
    override fun value2(): String? = keyOwner
    override fun value3(): String? = backendKeyId

    override fun value1(value: String?): KeyringKeysRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): KeyringKeysRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): KeyringKeysRecord {
        set(2, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?): KeyringKeysRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised KeyringKeysRecord
     */
    constructor(keyId: String? = null, keyOwner: String? = null, backendKeyId: String? = null): this() {
        this.keyId = keyId
        this.keyOwner = keyOwner
        this.backendKeyId = backendKeyId
        resetChangedOnNotNull()
    }
}
