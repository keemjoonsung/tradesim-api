/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.information_schema.InformationSchema
import com.kjs990114.infra.persistence.jooq.trade.information_schema.enums.RoutinesRoutineType
import com.kjs990114.infra.persistence.jooq.trade.information_schema.enums.RoutinesSecurityType
import com.kjs990114.infra.persistence.jooq.trade.information_schema.enums.RoutinesSqlDataAccess
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records.RoutinesRecord

import java.time.LocalDateTime

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Routines(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RoutinesRecord>?,
    parentPath: InverseForeignKey<out Record, RoutinesRecord>?,
    aliased: Table<RoutinesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RoutinesRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.ROUTINES</code>
         */
        val ROUTINES: Routines = Routines()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RoutinesRecord> = RoutinesRecord::class.java

    /**
     * The column <code>information_schema.ROUTINES.SPECIFIC_NAME</code>.
     */
    val SPECIFIC_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("SPECIFIC_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_CATALOG</code>.
     */
    val ROUTINE_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("ROUTINE_CATALOG"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_SCHEMA</code>.
     */
    val ROUTINE_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("ROUTINE_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_NAME</code>.
     */
    val ROUTINE_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("ROUTINE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_TYPE</code>.
     */
    val ROUTINE_TYPE: TableField<RoutinesRecord, RoutinesRoutineType?> = createField(DSL.name("ROUTINE_TYPE"), SQLDataType.VARCHAR(9).nullable(false).asEnumDataType(RoutinesRoutineType::class.java), this, "")

    /**
     * The column <code>information_schema.ROUTINES.DATA_TYPE</code>.
     */
    val DATA_TYPE: TableField<RoutinesRecord, String?> = createField(DSL.name("DATA_TYPE"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>information_schema.ROUTINES.CHARACTER_MAXIMUM_LENGTH</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<RoutinesRecord, Long?> = createField(DSL.name("CHARACTER_MAXIMUM_LENGTH"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>information_schema.ROUTINES.CHARACTER_OCTET_LENGTH</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<RoutinesRecord, Long?> = createField(DSL.name("CHARACTER_OCTET_LENGTH"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.ROUTINES.NUMERIC_PRECISION</code>.
     */
    val NUMERIC_PRECISION: TableField<RoutinesRecord, UInteger?> = createField(DSL.name("NUMERIC_PRECISION"), SQLDataType.INTEGERUNSIGNED, this, "")

    /**
     * The column <code>information_schema.ROUTINES.NUMERIC_SCALE</code>.
     */
    val NUMERIC_SCALE: TableField<RoutinesRecord, UInteger?> = createField(DSL.name("NUMERIC_SCALE"), SQLDataType.INTEGERUNSIGNED, this, "")

    /**
     * The column <code>information_schema.ROUTINES.DATETIME_PRECISION</code>.
     */
    val DATETIME_PRECISION: TableField<RoutinesRecord, UInteger?> = createField(DSL.name("DATETIME_PRECISION"), SQLDataType.INTEGERUNSIGNED, this, "")

    /**
     * The column <code>information_schema.ROUTINES.CHARACTER_SET_NAME</code>.
     */
    val CHARACTER_SET_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("CHARACTER_SET_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.ROUTINES.COLLATION_NAME</code>.
     */
    val COLLATION_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("COLLATION_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.ROUTINES.DTD_IDENTIFIER</code>.
     */
    val DTD_IDENTIFIER: TableField<RoutinesRecord, String?> = createField(DSL.name("DTD_IDENTIFIER"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_BODY</code>.
     */
    val ROUTINE_BODY: TableField<RoutinesRecord, String?> = createField(DSL.name("ROUTINE_BODY"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_DEFINITION</code>.
     */
    val ROUTINE_DEFINITION: TableField<RoutinesRecord, String?> = createField(DSL.name("ROUTINE_DEFINITION"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>information_schema.ROUTINES.EXTERNAL_NAME</code>.
     */
    val EXTERNAL_NAME: TableField<RoutinesRecord, ByteArray?> = createField(DSL.name("EXTERNAL_NAME"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.ROUTINES.EXTERNAL_LANGUAGE</code>.
     */
    val EXTERNAL_LANGUAGE: TableField<RoutinesRecord, String?> = createField(DSL.name("EXTERNAL_LANGUAGE"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("SQL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.PARAMETER_STYLE</code>.
     */
    val PARAMETER_STYLE: TableField<RoutinesRecord, String?> = createField(DSL.name("PARAMETER_STYLE"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.IS_DETERMINISTIC</code>.
     */
    val IS_DETERMINISTIC: TableField<RoutinesRecord, String?> = createField(DSL.name("IS_DETERMINISTIC"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.ROUTINES.SQL_DATA_ACCESS</code>.
     */
    val SQL_DATA_ACCESS: TableField<RoutinesRecord, RoutinesSqlDataAccess?> = createField(DSL.name("SQL_DATA_ACCESS"), SQLDataType.VARCHAR(17).nullable(false).asEnumDataType(RoutinesSqlDataAccess::class.java), this, "")

    /**
     * The column <code>information_schema.ROUTINES.SQL_PATH</code>.
     */
    val SQL_PATH: TableField<RoutinesRecord, ByteArray?> = createField(DSL.name("SQL_PATH"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.ROUTINES.SECURITY_TYPE</code>.
     */
    val SECURITY_TYPE: TableField<RoutinesRecord, RoutinesSecurityType?> = createField(DSL.name("SECURITY_TYPE"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(RoutinesSecurityType::class.java), this, "")

    /**
     * The column <code>information_schema.ROUTINES.CREATED</code>.
     */
    val CREATED: TableField<RoutinesRecord, LocalDateTime?> = createField(DSL.name("CREATED"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.LAST_ALTERED</code>.
     */
    val LAST_ALTERED: TableField<RoutinesRecord, LocalDateTime?> = createField(DSL.name("LAST_ALTERED"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.SQL_MODE</code>.
     */
    val SQL_MODE: TableField<RoutinesRecord, String?> = createField(DSL.name("SQL_MODE"), SQLDataType.VARCHAR(520).nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.ROUTINE_COMMENT</code>.
     */
    val ROUTINE_COMMENT: TableField<RoutinesRecord, String?> = createField(DSL.name("ROUTINE_COMMENT"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.DEFINER</code>.
     */
    val DEFINER: TableField<RoutinesRecord, String?> = createField(DSL.name("DEFINER"), SQLDataType.VARCHAR(288).nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.CHARACTER_SET_CLIENT</code>.
     */
    val CHARACTER_SET_CLIENT: TableField<RoutinesRecord, String?> = createField(DSL.name("CHARACTER_SET_CLIENT"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.COLLATION_CONNECTION</code>.
     */
    val COLLATION_CONNECTION: TableField<RoutinesRecord, String?> = createField(DSL.name("COLLATION_CONNECTION"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.ROUTINES.DATABASE_COLLATION</code>.
     */
    val DATABASE_COLLATION: TableField<RoutinesRecord, String?> = createField(DSL.name("DATABASE_COLLATION"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RoutinesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RoutinesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RoutinesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.ROUTINES</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.ROUTINES</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.ROUTINES</code> table reference
     */
    constructor(): this(DSL.name("ROUTINES"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Routines = Routines(DSL.name(alias), this)
    override fun `as`(alias: Name): Routines = Routines(alias, this)
    override fun `as`(alias: Table<*>): Routines = Routines(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Routines = Routines(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Routines = Routines(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Routines = Routines(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Routines = Routines(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Routines = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Routines = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Routines = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Routines = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Routines = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Routines = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Routines = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Routines = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Routines = where(DSL.notExists(select))
}
