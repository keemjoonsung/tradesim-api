/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines.references


import com.kjs990114.infra.persistence.jooq.trade.sys.routines.CreateSynonymDb
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.Diagnostics
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.ExecutePreparedStmt
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.ExtractSchemaFromFileName
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.ExtractTableFromFileName
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.FormatBytes
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.FormatPath
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.FormatStatement
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.FormatTime
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.ListAdd
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.ListDrop
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsIsAccountEnabled
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsIsConsumerEnabled
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsIsInstrumentDefaultEnabled
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsIsInstrumentDefaultTimed
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsIsThreadInstrumented
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupDisableBackgroundThreads
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupDisableConsumer
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupDisableInstrument
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupDisableThread
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupEnableBackgroundThreads
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupEnableConsumer
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupEnableInstrument
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupEnableThread
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupReloadSaved
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupResetToDefault
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupSave
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupShowDisabled
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupShowDisabledConsumers
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupShowDisabledInstruments
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupShowEnabled
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupShowEnabledConsumers
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsSetupShowEnabledInstruments
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsStatementAvgLatencyHistogram
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsThreadAccount
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsThreadId
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsThreadStack
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsThreadTrxInfo
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsTraceStatementDigest
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsTraceThread
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.PsTruncateAllTables
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.QuoteIdentifier
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.StatementPerformanceAnalyzer
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.SysGetConfig
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.TableExists
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.VersionMajor
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.VersionMinor
import com.kjs990114.infra.persistence.jooq.trade.sys.routines.VersionPatch

import java.math.BigDecimal

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.types.UByte
import org.jooq.types.UInteger
import org.jooq.types.ULong



/**
 * Call <code>sys.create_synonym_db</code>
 */
fun createSynonymDb(
      configuration: Configuration
    , inDbName: String?
    , inSynonym: String?
): Unit {
    val p = CreateSynonymDb()
    p.setInDbName(inDbName)
    p.setInSynonym(inSynonym)

    p.execute(configuration)
}

/**
 * Call <code>sys.diagnostics</code>
 */
fun diagnostics(
      configuration: Configuration
    , inMaxRuntime: UInteger?
    , inInterval: UInteger?
    , inAutoConfig: String?
): Unit {
    val p = Diagnostics()
    p.setInMaxRuntime(inMaxRuntime)
    p.setInInterval(inInterval)
    p.setInAutoConfig(inAutoConfig)

    p.execute(configuration)
}

/**
 * Call <code>sys.execute_prepared_stmt</code>
 */
fun executePreparedStmt(
      configuration: Configuration
    , inQuery: String?
): Unit {
    val p = ExecutePreparedStmt()
    p.setInQuery(inQuery)

    p.execute(configuration)
}

/**
 * Call <code>sys.extract_schema_from_file_name</code>
 */
fun extractSchemaFromFileName(
      configuration: Configuration
    , path: String?
): String? {
    val f = ExtractSchemaFromFileName()
    f.setPath(path)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.extract_schema_from_file_name</code> as a field.
 */
fun extractSchemaFromFileName(
      path: String?
): Field<String?> {
    val f = ExtractSchemaFromFileName()
    f.setPath(path)

    return f.asField()
}

/**
 * Get <code>sys.extract_schema_from_file_name</code> as a field.
 */
fun extractSchemaFromFileName(
      path: Field<String?>
): Field<String?> {
    val f = ExtractSchemaFromFileName()
    f.setPath(path)

    return f.asField()
}

/**
 * Call <code>sys.extract_table_from_file_name</code>
 */
fun extractTableFromFileName(
      configuration: Configuration
    , path: String?
): String? {
    val f = ExtractTableFromFileName()
    f.setPath(path)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.extract_table_from_file_name</code> as a field.
 */
fun extractTableFromFileName(
      path: String?
): Field<String?> {
    val f = ExtractTableFromFileName()
    f.setPath(path)

    return f.asField()
}

/**
 * Get <code>sys.extract_table_from_file_name</code> as a field.
 */
fun extractTableFromFileName(
      path: Field<String?>
): Field<String?> {
    val f = ExtractTableFromFileName()
    f.setPath(path)

    return f.asField()
}

/**
 * Call <code>sys.format_bytes</code>
 */
fun formatBytes(
      configuration: Configuration
    , bytes: String?
): String? {
    val f = FormatBytes()
    f.setBytes(bytes)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.format_bytes</code> as a field.
 */
fun formatBytes(
      bytes: String?
): Field<String?> {
    val f = FormatBytes()
    f.setBytes(bytes)

    return f.asField()
}

/**
 * Get <code>sys.format_bytes</code> as a field.
 */
fun formatBytes(
      bytes: Field<String?>
): Field<String?> {
    val f = FormatBytes()
    f.setBytes(bytes)

    return f.asField()
}

/**
 * Call <code>sys.format_path</code>
 */
fun formatPath(
      configuration: Configuration
    , inPath: String?
): String? {
    val f = FormatPath()
    f.setInPath(inPath)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.format_path</code> as a field.
 */
fun formatPath(
      inPath: String?
): Field<String?> {
    val f = FormatPath()
    f.setInPath(inPath)

    return f.asField()
}

/**
 * Get <code>sys.format_path</code> as a field.
 */
fun formatPath(
      inPath: Field<String?>
): Field<String?> {
    val f = FormatPath()
    f.setInPath(inPath)

    return f.asField()
}

/**
 * Call <code>sys.format_statement</code>
 */
fun formatStatement(
      configuration: Configuration
    , statement: String?
): String? {
    val f = FormatStatement()
    f.setStatement(statement)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.format_statement</code> as a field.
 */
fun formatStatement(
      statement: String?
): Field<String?> {
    val f = FormatStatement()
    f.setStatement(statement)

    return f.asField()
}

/**
 * Get <code>sys.format_statement</code> as a field.
 */
fun formatStatement(
      statement: Field<String?>
): Field<String?> {
    val f = FormatStatement()
    f.setStatement(statement)

    return f.asField()
}

/**
 * Call <code>sys.format_time</code>
 */
fun formatTime(
      configuration: Configuration
    , picoseconds: String?
): String? {
    val f = FormatTime()
    f.setPicoseconds(picoseconds)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.format_time</code> as a field.
 */
fun formatTime(
      picoseconds: String?
): Field<String?> {
    val f = FormatTime()
    f.setPicoseconds(picoseconds)

    return f.asField()
}

/**
 * Get <code>sys.format_time</code> as a field.
 */
fun formatTime(
      picoseconds: Field<String?>
): Field<String?> {
    val f = FormatTime()
    f.setPicoseconds(picoseconds)

    return f.asField()
}

/**
 * Call <code>sys.list_add</code>
 */
fun listAdd(
      configuration: Configuration
    , inList: String?
    , inAddValue: String?
): String? {
    val f = ListAdd()
    f.setInList(inList)
    f.setInAddValue(inAddValue)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.list_add</code> as a field.
 */
fun listAdd(
      inList: String?
    , inAddValue: String?
): Field<String?> {
    val f = ListAdd()
    f.setInList(inList)
    f.setInAddValue(inAddValue)

    return f.asField()
}

/**
 * Get <code>sys.list_add</code> as a field.
 */
fun listAdd(
      inList: Field<String?>
    , inAddValue: Field<String?>
): Field<String?> {
    val f = ListAdd()
    f.setInList(inList)
    f.setInAddValue(inAddValue)

    return f.asField()
}

/**
 * Call <code>sys.list_drop</code>
 */
fun listDrop(
      configuration: Configuration
    , inList: String?
    , inDropValue: String?
): String? {
    val f = ListDrop()
    f.setInList(inList)
    f.setInDropValue(inDropValue)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.list_drop</code> as a field.
 */
fun listDrop(
      inList: String?
    , inDropValue: String?
): Field<String?> {
    val f = ListDrop()
    f.setInList(inList)
    f.setInDropValue(inDropValue)

    return f.asField()
}

/**
 * Get <code>sys.list_drop</code> as a field.
 */
fun listDrop(
      inList: Field<String?>
    , inDropValue: Field<String?>
): Field<String?> {
    val f = ListDrop()
    f.setInList(inList)
    f.setInDropValue(inDropValue)

    return f.asField()
}

/**
 * Call <code>sys.ps_is_account_enabled</code>
 */
fun psIsAccountEnabled(
      configuration: Configuration
    , inHost: String?
    , inUser: String?
): String? {
    val f = PsIsAccountEnabled()
    f.setInHost(inHost)
    f.setInUser(inUser)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.ps_is_account_enabled</code> as a field.
 */
fun psIsAccountEnabled(
      inHost: String?
    , inUser: String?
): Field<String?> {
    val f = PsIsAccountEnabled()
    f.setInHost(inHost)
    f.setInUser(inUser)

    return f.asField()
}

/**
 * Get <code>sys.ps_is_account_enabled</code> as a field.
 */
fun psIsAccountEnabled(
      inHost: Field<String?>
    , inUser: Field<String?>
): Field<String?> {
    val f = PsIsAccountEnabled()
    f.setInHost(inHost)
    f.setInUser(inUser)

    return f.asField()
}

/**
 * Call <code>sys.ps_is_consumer_enabled</code>
 */
fun psIsConsumerEnabled(
      configuration: Configuration
    , inConsumer: String?
): String? {
    val f = PsIsConsumerEnabled()
    f.setInConsumer(inConsumer)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.ps_is_consumer_enabled</code> as a field.
 */
fun psIsConsumerEnabled(
      inConsumer: String?
): Field<String?> {
    val f = PsIsConsumerEnabled()
    f.setInConsumer(inConsumer)

    return f.asField()
}

/**
 * Get <code>sys.ps_is_consumer_enabled</code> as a field.
 */
fun psIsConsumerEnabled(
      inConsumer: Field<String?>
): Field<String?> {
    val f = PsIsConsumerEnabled()
    f.setInConsumer(inConsumer)

    return f.asField()
}

/**
 * Call <code>sys.ps_is_instrument_default_enabled</code>
 */
fun psIsInstrumentDefaultEnabled(
      configuration: Configuration
    , inInstrument: String?
): String? {
    val f = PsIsInstrumentDefaultEnabled()
    f.setInInstrument(inInstrument)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.ps_is_instrument_default_enabled</code> as a field.
 */
fun psIsInstrumentDefaultEnabled(
      inInstrument: String?
): Field<String?> {
    val f = PsIsInstrumentDefaultEnabled()
    f.setInInstrument(inInstrument)

    return f.asField()
}

/**
 * Get <code>sys.ps_is_instrument_default_enabled</code> as a field.
 */
fun psIsInstrumentDefaultEnabled(
      inInstrument: Field<String?>
): Field<String?> {
    val f = PsIsInstrumentDefaultEnabled()
    f.setInInstrument(inInstrument)

    return f.asField()
}

/**
 * Call <code>sys.ps_is_instrument_default_timed</code>
 */
fun psIsInstrumentDefaultTimed(
      configuration: Configuration
    , inInstrument: String?
): String? {
    val f = PsIsInstrumentDefaultTimed()
    f.setInInstrument(inInstrument)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.ps_is_instrument_default_timed</code> as a field.
 */
fun psIsInstrumentDefaultTimed(
      inInstrument: String?
): Field<String?> {
    val f = PsIsInstrumentDefaultTimed()
    f.setInInstrument(inInstrument)

    return f.asField()
}

/**
 * Get <code>sys.ps_is_instrument_default_timed</code> as a field.
 */
fun psIsInstrumentDefaultTimed(
      inInstrument: Field<String?>
): Field<String?> {
    val f = PsIsInstrumentDefaultTimed()
    f.setInInstrument(inInstrument)

    return f.asField()
}

/**
 * Call <code>sys.ps_is_thread_instrumented</code>
 */
fun psIsThreadInstrumented(
      configuration: Configuration
    , inConnectionId: ULong?
): String? {
    val f = PsIsThreadInstrumented()
    f.setInConnectionId(inConnectionId)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.ps_is_thread_instrumented</code> as a field.
 */
fun psIsThreadInstrumented(
      inConnectionId: ULong?
): Field<String?> {
    val f = PsIsThreadInstrumented()
    f.setInConnectionId(inConnectionId)

    return f.asField()
}

/**
 * Get <code>sys.ps_is_thread_instrumented</code> as a field.
 */
fun psIsThreadInstrumented(
      inConnectionId: Field<ULong?>
): Field<String?> {
    val f = PsIsThreadInstrumented()
    f.setInConnectionId(inConnectionId)

    return f.asField()
}

/**
 * Call <code>sys.ps_setup_disable_background_threads</code>
 */
fun psSetupDisableBackgroundThreads(
      configuration: Configuration
): Unit {
    val p = PsSetupDisableBackgroundThreads()

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_disable_consumer</code>
 */
fun psSetupDisableConsumer(
      configuration: Configuration
    , consumer: String?
): Unit {
    val p = PsSetupDisableConsumer()
    p.setConsumer(consumer)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_disable_instrument</code>
 */
fun psSetupDisableInstrument(
      configuration: Configuration
    , inPattern: String?
): Unit {
    val p = PsSetupDisableInstrument()
    p.setInPattern(inPattern)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_disable_thread</code>
 */
fun psSetupDisableThread(
      configuration: Configuration
    , inConnectionId: Long?
): Unit {
    val p = PsSetupDisableThread()
    p.setInConnectionId(inConnectionId)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_enable_background_threads</code>
 */
fun psSetupEnableBackgroundThreads(
      configuration: Configuration
): Unit {
    val p = PsSetupEnableBackgroundThreads()

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_enable_consumer</code>
 */
fun psSetupEnableConsumer(
      configuration: Configuration
    , consumer: String?
): Unit {
    val p = PsSetupEnableConsumer()
    p.setConsumer(consumer)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_enable_instrument</code>
 */
fun psSetupEnableInstrument(
      configuration: Configuration
    , inPattern: String?
): Unit {
    val p = PsSetupEnableInstrument()
    p.setInPattern(inPattern)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_enable_thread</code>
 */
fun psSetupEnableThread(
      configuration: Configuration
    , inConnectionId: Long?
): Unit {
    val p = PsSetupEnableThread()
    p.setInConnectionId(inConnectionId)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_reload_saved</code>
 */
fun psSetupReloadSaved(
      configuration: Configuration
): Unit {
    val p = PsSetupReloadSaved()

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_reset_to_default</code>
 */
fun psSetupResetToDefault(
      configuration: Configuration
    , inVerbose: Byte?
): Unit {
    val p = PsSetupResetToDefault()
    p.setInVerbose(inVerbose)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_save</code>
 */
fun psSetupSave(
      configuration: Configuration
    , inTimeout: Int?
): Unit {
    val p = PsSetupSave()
    p.setInTimeout(inTimeout)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_show_disabled</code>
 */
fun psSetupShowDisabled(
      configuration: Configuration
    , inShowInstruments: Byte?
    , inShowThreads: Byte?
): Unit {
    val p = PsSetupShowDisabled()
    p.setInShowInstruments(inShowInstruments)
    p.setInShowThreads(inShowThreads)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_show_disabled_consumers</code>
 */
fun psSetupShowDisabledConsumers(
      configuration: Configuration
): Unit {
    val p = PsSetupShowDisabledConsumers()

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_show_disabled_instruments</code>
 */
fun psSetupShowDisabledInstruments(
      configuration: Configuration
): Unit {
    val p = PsSetupShowDisabledInstruments()

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_show_enabled</code>
 */
fun psSetupShowEnabled(
      configuration: Configuration
    , inShowInstruments: Byte?
    , inShowThreads: Byte?
): Unit {
    val p = PsSetupShowEnabled()
    p.setInShowInstruments(inShowInstruments)
    p.setInShowThreads(inShowThreads)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_show_enabled_consumers</code>
 */
fun psSetupShowEnabledConsumers(
      configuration: Configuration
): Unit {
    val p = PsSetupShowEnabledConsumers()

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_setup_show_enabled_instruments</code>
 */
fun psSetupShowEnabledInstruments(
      configuration: Configuration
): Unit {
    val p = PsSetupShowEnabledInstruments()

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_statement_avg_latency_histogram</code>
 */
fun psStatementAvgLatencyHistogram(
      configuration: Configuration
): Unit {
    val p = PsStatementAvgLatencyHistogram()

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_thread_account</code>
 */
fun psThreadAccount(
      configuration: Configuration
    , inThreadId: ULong?
): String? {
    val f = PsThreadAccount()
    f.setInThreadId(inThreadId)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.ps_thread_account</code> as a field.
 */
fun psThreadAccount(
      inThreadId: ULong?
): Field<String?> {
    val f = PsThreadAccount()
    f.setInThreadId(inThreadId)

    return f.asField()
}

/**
 * Get <code>sys.ps_thread_account</code> as a field.
 */
fun psThreadAccount(
      inThreadId: Field<ULong?>
): Field<String?> {
    val f = PsThreadAccount()
    f.setInThreadId(inThreadId)

    return f.asField()
}

/**
 * Call <code>sys.ps_thread_id</code>
 */
fun psThreadId(
      configuration: Configuration
    , inConnectionId: ULong?
): ULong? {
    val f = PsThreadId()
    f.setInConnectionId(inConnectionId)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.ps_thread_id</code> as a field.
 */
fun psThreadId(
      inConnectionId: ULong?
): Field<ULong?> {
    val f = PsThreadId()
    f.setInConnectionId(inConnectionId)

    return f.asField()
}

/**
 * Get <code>sys.ps_thread_id</code> as a field.
 */
fun psThreadId(
      inConnectionId: Field<ULong?>
): Field<ULong?> {
    val f = PsThreadId()
    f.setInConnectionId(inConnectionId)

    return f.asField()
}

/**
 * Call <code>sys.ps_thread_stack</code>
 */
fun psThreadStack(
      configuration: Configuration
    , thdId: ULong?
    , debug: Byte?
): String? {
    val f = PsThreadStack()
    f.setThdId(thdId)
    f.setDebug(debug)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.ps_thread_stack</code> as a field.
 */
fun psThreadStack(
      thdId: ULong?
    , debug: Byte?
): Field<String?> {
    val f = PsThreadStack()
    f.setThdId(thdId)
    f.setDebug(debug)

    return f.asField()
}

/**
 * Get <code>sys.ps_thread_stack</code> as a field.
 */
fun psThreadStack(
      thdId: Field<ULong?>
    , debug: Field<Byte?>
): Field<String?> {
    val f = PsThreadStack()
    f.setThdId(thdId)
    f.setDebug(debug)

    return f.asField()
}

/**
 * Call <code>sys.ps_thread_trx_info</code>
 */
fun psThreadTrxInfo(
      configuration: Configuration
    , inThreadId: ULong?
): String? {
    val f = PsThreadTrxInfo()
    f.setInThreadId(inThreadId)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.ps_thread_trx_info</code> as a field.
 */
fun psThreadTrxInfo(
      inThreadId: ULong?
): Field<String?> {
    val f = PsThreadTrxInfo()
    f.setInThreadId(inThreadId)

    return f.asField()
}

/**
 * Get <code>sys.ps_thread_trx_info</code> as a field.
 */
fun psThreadTrxInfo(
      inThreadId: Field<ULong?>
): Field<String?> {
    val f = PsThreadTrxInfo()
    f.setInThreadId(inThreadId)

    return f.asField()
}

/**
 * Call <code>sys.ps_trace_statement_digest</code>
 */
fun psTraceStatementDigest(
      configuration: Configuration
    , inDigest: String?
    , inRuntime: Int?
    , inInterval: BigDecimal?
    , inStartFresh: Byte?
    , inAutoEnable: Byte?
): Unit {
    val p = PsTraceStatementDigest()
    p.setInDigest(inDigest)
    p.setInRuntime(inRuntime)
    p.setInInterval(inInterval)
    p.setInStartFresh(inStartFresh)
    p.setInAutoEnable(inAutoEnable)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_trace_thread</code>
 */
fun psTraceThread(
      configuration: Configuration
    , inThreadId: ULong?
    , inOutfile: String?
    , inMaxRuntime: BigDecimal?
    , inInterval: BigDecimal?
    , inStartFresh: Byte?
    , inAutoSetup: Byte?
    , inDebug: Byte?
): Unit {
    val p = PsTraceThread()
    p.setInThreadId(inThreadId)
    p.setInOutfile(inOutfile)
    p.setInMaxRuntime(inMaxRuntime)
    p.setInInterval(inInterval)
    p.setInStartFresh(inStartFresh)
    p.setInAutoSetup(inAutoSetup)
    p.setInDebug(inDebug)

    p.execute(configuration)
}

/**
 * Call <code>sys.ps_truncate_all_tables</code>
 */
fun psTruncateAllTables(
      configuration: Configuration
    , inVerbose: Byte?
): Unit {
    val p = PsTruncateAllTables()
    p.setInVerbose(inVerbose)

    p.execute(configuration)
}

/**
 * Call <code>sys.quote_identifier</code>
 */
fun quoteIdentifier(
      configuration: Configuration
    , inIdentifier: String?
): String? {
    val f = QuoteIdentifier()
    f.setInIdentifier(inIdentifier)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.quote_identifier</code> as a field.
 */
fun quoteIdentifier(
      inIdentifier: String?
): Field<String?> {
    val f = QuoteIdentifier()
    f.setInIdentifier(inIdentifier)

    return f.asField()
}

/**
 * Get <code>sys.quote_identifier</code> as a field.
 */
fun quoteIdentifier(
      inIdentifier: Field<String?>
): Field<String?> {
    val f = QuoteIdentifier()
    f.setInIdentifier(inIdentifier)

    return f.asField()
}

/**
 * Call <code>sys.statement_performance_analyzer</code>
 */
fun statementPerformanceAnalyzer(
      configuration: Configuration
    , inAction: String?
    , inTable: String?
    , inViews: String?
): Unit {
    val p = StatementPerformanceAnalyzer()
    p.setInAction(inAction)
    p.setInTable(inTable)
    p.setInViews(inViews)

    p.execute(configuration)
}

/**
 * Call <code>sys.sys_get_config</code>
 */
fun sysGetConfig(
      configuration: Configuration
    , inVariableName: String?
    , inDefaultValue: String?
): String? {
    val f = SysGetConfig()
    f.setInVariableName(inVariableName)
    f.setInDefaultValue(inDefaultValue)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.sys_get_config</code> as a field.
 */
fun sysGetConfig(
      inVariableName: String?
    , inDefaultValue: String?
): Field<String?> {
    val f = SysGetConfig()
    f.setInVariableName(inVariableName)
    f.setInDefaultValue(inDefaultValue)

    return f.asField()
}

/**
 * Get <code>sys.sys_get_config</code> as a field.
 */
fun sysGetConfig(
      inVariableName: Field<String?>
    , inDefaultValue: Field<String?>
): Field<String?> {
    val f = SysGetConfig()
    f.setInVariableName(inVariableName)
    f.setInDefaultValue(inDefaultValue)

    return f.asField()
}

/**
 * Call <code>sys.table_exists</code>
 */
fun tableExists(
      configuration: Configuration
    , inDb: String?
    , inTable: String?
): String? {
    val p = TableExists()
    p.setInDb(inDb)
    p.setInTable(inTable)

    p.execute(configuration)
    return p.getOutExists()
}

/**
 * Call <code>sys.version_major</code>
 */
fun versionMajor(
      configuration: Configuration
): UByte? {
    val f = VersionMajor()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.version_major</code> as a field.
 */
fun versionMajor(): Field<UByte?> {
    val f = VersionMajor()

    return f.asField()
}

/**
 * Call <code>sys.version_minor</code>
 */
fun versionMinor(
      configuration: Configuration
): UByte? {
    val f = VersionMinor()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.version_minor</code> as a field.
 */
fun versionMinor(): Field<UByte?> {
    val f = VersionMinor()

    return f.asField()
}

/**
 * Call <code>sys.version_patch</code>
 */
fun versionPatch(
      configuration: Configuration
): UByte? {
    val f = VersionPatch()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sys.version_patch</code> as a field.
 */
fun versionPatch(): Field<UByte?> {
    val f = VersionPatch()

    return f.asField()
}
