/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.information_schema.InformationSchema
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records.InnodbTrxRecord

import java.time.LocalDateTime

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbTrx(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, InnodbTrxRecord>?,
    parentPath: InverseForeignKey<out Record, InnodbTrxRecord>?,
    aliased: Table<InnodbTrxRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<InnodbTrxRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.INNODB_TRX</code>
         */
        val INNODB_TRX: InnodbTrx = InnodbTrx()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InnodbTrxRecord> = InnodbTrxRecord::class.java

    /**
     * The column <code>information_schema.INNODB_TRX.trx_id</code>.
     */
    val TRX_ID: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_state</code>.
     */
    val TRX_STATE: TableField<InnodbTrxRecord, String?> = createField(DSL.name("trx_state"), SQLDataType.VARCHAR(4).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_started</code>.
     */
    val TRX_STARTED: TableField<InnodbTrxRecord, LocalDateTime?> = createField(DSL.name("trx_started"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_requested_lock_id</code>.
     */
    val TRX_REQUESTED_LOCK_ID: TableField<InnodbTrxRecord, String?> = createField(DSL.name("trx_requested_lock_id"), SQLDataType.VARCHAR(35).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_wait_started</code>.
     */
    val TRX_WAIT_STARTED: TableField<InnodbTrxRecord, LocalDateTime?> = createField(DSL.name("trx_wait_started"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_weight</code>.
     */
    val TRX_WEIGHT: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_weight"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_mysql_thread_id</code>.
     */
    val TRX_MYSQL_THREAD_ID: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_mysql_thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_query</code>.
     */
    val TRX_QUERY: TableField<InnodbTrxRecord, String?> = createField(DSL.name("trx_query"), SQLDataType.VARCHAR(341).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_operation_state</code>.
     */
    val TRX_OPERATION_STATE: TableField<InnodbTrxRecord, String?> = createField(DSL.name("trx_operation_state"), SQLDataType.VARCHAR(21).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_tables_in_use</code>.
     */
    val TRX_TABLES_IN_USE: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_tables_in_use"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_tables_locked</code>.
     */
    val TRX_TABLES_LOCKED: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_tables_locked"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_lock_structs</code>.
     */
    val TRX_LOCK_STRUCTS: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_lock_structs"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_lock_memory_bytes</code>.
     */
    val TRX_LOCK_MEMORY_BYTES: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_lock_memory_bytes"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_rows_locked</code>.
     */
    val TRX_ROWS_LOCKED: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_rows_locked"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_rows_modified</code>.
     */
    val TRX_ROWS_MODIFIED: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_rows_modified"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_concurrency_tickets</code>.
     */
    val TRX_CONCURRENCY_TICKETS: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_concurrency_tickets"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_isolation_level</code>.
     */
    val TRX_ISOLATION_LEVEL: TableField<InnodbTrxRecord, String?> = createField(DSL.name("trx_isolation_level"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_unique_checks</code>.
     */
    val TRX_UNIQUE_CHECKS: TableField<InnodbTrxRecord, Int?> = createField(DSL.name("trx_unique_checks"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_foreign_key_checks</code>.
     */
    val TRX_FOREIGN_KEY_CHECKS: TableField<InnodbTrxRecord, Int?> = createField(DSL.name("trx_foreign_key_checks"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_last_foreign_key_error</code>.
     */
    val TRX_LAST_FOREIGN_KEY_ERROR: TableField<InnodbTrxRecord, String?> = createField(DSL.name("trx_last_foreign_key_error"), SQLDataType.VARCHAR(85).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_adaptive_hash_latched</code>.
     */
    val TRX_ADAPTIVE_HASH_LATCHED: TableField<InnodbTrxRecord, Int?> = createField(DSL.name("trx_adaptive_hash_latched"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_adaptive_hash_timeout</code>.
     */
    val TRX_ADAPTIVE_HASH_TIMEOUT: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_adaptive_hash_timeout"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TRX.trx_is_read_only</code>.
     */
    val TRX_IS_READ_ONLY: TableField<InnodbTrxRecord, Int?> = createField(DSL.name("trx_is_read_only"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_autocommit_non_locking</code>.
     */
    val TRX_AUTOCOMMIT_NON_LOCKING: TableField<InnodbTrxRecord, Int?> = createField(DSL.name("trx_autocommit_non_locking"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TRX.trx_schedule_weight</code>.
     */
    val TRX_SCHEDULE_WEIGHT: TableField<InnodbTrxRecord, ULong?> = createField(DSL.name("trx_schedule_weight"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    private constructor(alias: Name, aliased: Table<InnodbTrxRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<InnodbTrxRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<InnodbTrxRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.INNODB_TRX</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.INNODB_TRX</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.INNODB_TRX</code> table reference
     */
    constructor(): this(DSL.name("INNODB_TRX"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): InnodbTrx = InnodbTrx(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbTrx = InnodbTrx(alias, this)
    override fun `as`(alias: Table<*>): InnodbTrx = InnodbTrx(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbTrx = InnodbTrx(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbTrx = InnodbTrx(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): InnodbTrx = InnodbTrx(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): InnodbTrx = InnodbTrx(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): InnodbTrx = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): InnodbTrx = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): InnodbTrx = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): InnodbTrx = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): InnodbTrx = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): InnodbTrx = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): InnodbTrx = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): InnodbTrx = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): InnodbTrx = where(DSL.notExists(select))
}
