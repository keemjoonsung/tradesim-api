/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.TablesExtensions

import org.jooq.Field
import org.jooq.JSON
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TablesExtensionsRecord() : TableRecordImpl<TablesExtensionsRecord>(TablesExtensions.TABLES_EXTENSIONS), Record5<String?, String?, String?, JSON?, JSON?> {

    open var tableCatalog: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableSchema: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var tableName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var engineAttribute: JSON?
        set(value): Unit = set(3, value)
        get(): JSON? = get(3) as JSON?

    open var secondaryEngineAttribute: JSON?
        set(value): Unit = set(4, value)
        get(): JSON? = get(4) as JSON?

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<String?, String?, String?, JSON?, JSON?> = super.fieldsRow() as Row5<String?, String?, String?, JSON?, JSON?>
    override fun valuesRow(): Row5<String?, String?, String?, JSON?, JSON?> = super.valuesRow() as Row5<String?, String?, String?, JSON?, JSON?>
    override fun field1(): Field<String?> = TablesExtensions.TABLES_EXTENSIONS.TABLE_CATALOG
    override fun field2(): Field<String?> = TablesExtensions.TABLES_EXTENSIONS.TABLE_SCHEMA
    override fun field3(): Field<String?> = TablesExtensions.TABLES_EXTENSIONS.TABLE_NAME
    override fun field4(): Field<JSON?> = TablesExtensions.TABLES_EXTENSIONS.ENGINE_ATTRIBUTE
    override fun field5(): Field<JSON?> = TablesExtensions.TABLES_EXTENSIONS.SECONDARY_ENGINE_ATTRIBUTE
    override fun component1(): String? = tableCatalog
    override fun component2(): String? = tableSchema
    override fun component3(): String? = tableName
    override fun component4(): JSON? = engineAttribute
    override fun component5(): JSON? = secondaryEngineAttribute
    override fun value1(): String? = tableCatalog
    override fun value2(): String? = tableSchema
    override fun value3(): String? = tableName
    override fun value4(): JSON? = engineAttribute
    override fun value5(): JSON? = secondaryEngineAttribute

    override fun value1(value: String?): TablesExtensionsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): TablesExtensionsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): TablesExtensionsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: JSON?): TablesExtensionsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: JSON?): TablesExtensionsRecord {
        set(4, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: JSON?, value5: JSON?): TablesExtensionsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised TablesExtensionsRecord
     */
    constructor(tableCatalog: String? = null, tableSchema: String? = null, tableName: String? = null, engineAttribute: JSON? = null, secondaryEngineAttribute: JSON? = null): this() {
        this.tableCatalog = tableCatalog
        this.tableSchema = tableSchema
        this.tableName = tableName
        this.engineAttribute = engineAttribute
        this.secondaryEngineAttribute = secondaryEngineAttribute
        resetChangedOnNotNull()
    }
}
