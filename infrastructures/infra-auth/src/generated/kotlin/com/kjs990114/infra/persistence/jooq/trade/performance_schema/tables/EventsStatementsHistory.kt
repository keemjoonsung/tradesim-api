/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.EventsStatementsHistoryExecutionEngine
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.EventsStatementsHistoryNestingEventType
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_EVENTS_STATEMENTS_HISTORY_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.EventsStatementsHistoryRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventsStatementsHistory(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, EventsStatementsHistoryRecord>?,
    parentPath: InverseForeignKey<out Record, EventsStatementsHistoryRecord>?,
    aliased: Table<EventsStatementsHistoryRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<EventsStatementsHistoryRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>performance_schema.events_statements_history</code>
         */
        val EVENTS_STATEMENTS_HISTORY: EventsStatementsHistory = EventsStatementsHistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EventsStatementsHistoryRecord> = EventsStatementsHistoryRecord::class.java

    /**
     * The column
     * <code>performance_schema.events_statements_history.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.EVENT_ID</code>.
     */
    val EVENT_ID: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("EVENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.END_EVENT_ID</code>.
     */
    val END_EVENT_ID: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("END_EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.EVENT_NAME</code>.
     */
    val EVENT_NAME: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("EVENT_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SOURCE</code>.
     */
    val SOURCE: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("SOURCE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.TIMER_START</code>.
     */
    val TIMER_START: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("TIMER_START"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.TIMER_END</code>.
     */
    val TIMER_END: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("TIMER_END"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.TIMER_WAIT</code>.
     */
    val TIMER_WAIT: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.LOCK_TIME</code>.
     */
    val LOCK_TIME: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("LOCK_TIME"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SQL_TEXT</code>.
     */
    val SQL_TEXT: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("SQL_TEXT"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.DIGEST</code>.
     */
    val DIGEST: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("DIGEST"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.DIGEST_TEXT</code>.
     */
    val DIGEST_TEXT: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("DIGEST_TEXT"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.CURRENT_SCHEMA</code>.
     */
    val CURRENT_SCHEMA: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("CURRENT_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.OBJECT_TYPE</code>.
     */
    val OBJECT_TYPE: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("OBJECT_TYPE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.OBJECT_SCHEMA</code>.
     */
    val OBJECT_SCHEMA: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("OBJECT_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.OBJECT_NAME</code>.
     */
    val OBJECT_NAME: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("OBJECT_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.OBJECT_INSTANCE_BEGIN</code>.
     */
    val OBJECT_INSTANCE_BEGIN: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.MYSQL_ERRNO</code>.
     */
    val MYSQL_ERRNO: TableField<EventsStatementsHistoryRecord, Int?> = createField(DSL.name("MYSQL_ERRNO"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.RETURNED_SQLSTATE</code>.
     */
    val RETURNED_SQLSTATE: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("RETURNED_SQLSTATE"), SQLDataType.VARCHAR(5), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.MESSAGE_TEXT</code>.
     */
    val MESSAGE_TEXT: TableField<EventsStatementsHistoryRecord, String?> = createField(DSL.name("MESSAGE_TEXT"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.ERRORS</code>.
     */
    val ERRORS: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("ERRORS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.WARNINGS</code>.
     */
    val WARNINGS: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("WARNINGS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.ROWS_AFFECTED</code>.
     */
    val ROWS_AFFECTED: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("ROWS_AFFECTED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.ROWS_SENT</code>.
     */
    val ROWS_SENT: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("ROWS_SENT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.ROWS_EXAMINED</code>.
     */
    val ROWS_EXAMINED: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("ROWS_EXAMINED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.CREATED_TMP_DISK_TABLES</code>.
     */
    val CREATED_TMP_DISK_TABLES: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("CREATED_TMP_DISK_TABLES"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.CREATED_TMP_TABLES</code>.
     */
    val CREATED_TMP_TABLES: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("CREATED_TMP_TABLES"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SELECT_FULL_JOIN</code>.
     */
    val SELECT_FULL_JOIN: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("SELECT_FULL_JOIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SELECT_FULL_RANGE_JOIN</code>.
     */
    val SELECT_FULL_RANGE_JOIN: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("SELECT_FULL_RANGE_JOIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SELECT_RANGE</code>.
     */
    val SELECT_RANGE: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("SELECT_RANGE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SELECT_RANGE_CHECK</code>.
     */
    val SELECT_RANGE_CHECK: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("SELECT_RANGE_CHECK"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SELECT_SCAN</code>.
     */
    val SELECT_SCAN: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("SELECT_SCAN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SORT_MERGE_PASSES</code>.
     */
    val SORT_MERGE_PASSES: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("SORT_MERGE_PASSES"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SORT_RANGE</code>.
     */
    val SORT_RANGE: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("SORT_RANGE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SORT_ROWS</code>.
     */
    val SORT_ROWS: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("SORT_ROWS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.SORT_SCAN</code>.
     */
    val SORT_SCAN: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("SORT_SCAN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.NO_INDEX_USED</code>.
     */
    val NO_INDEX_USED: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("NO_INDEX_USED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.NO_GOOD_INDEX_USED</code>.
     */
    val NO_GOOD_INDEX_USED: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("NO_GOOD_INDEX_USED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.NESTING_EVENT_ID</code>.
     */
    val NESTING_EVENT_ID: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("NESTING_EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.NESTING_EVENT_TYPE</code>.
     */
    val NESTING_EVENT_TYPE: TableField<EventsStatementsHistoryRecord, EventsStatementsHistoryNestingEventType?> = createField(DSL.name("NESTING_EVENT_TYPE"), SQLDataType.VARCHAR(11).asEnumDataType(EventsStatementsHistoryNestingEventType::class.java), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.NESTING_EVENT_LEVEL</code>.
     */
    val NESTING_EVENT_LEVEL: TableField<EventsStatementsHistoryRecord, Int?> = createField(DSL.name("NESTING_EVENT_LEVEL"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.STATEMENT_ID</code>.
     */
    val STATEMENT_ID: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("STATEMENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.CPU_TIME</code>.
     */
    val CPU_TIME: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("CPU_TIME"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.MAX_CONTROLLED_MEMORY</code>.
     */
    val MAX_CONTROLLED_MEMORY: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("MAX_CONTROLLED_MEMORY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.MAX_TOTAL_MEMORY</code>.
     */
    val MAX_TOTAL_MEMORY: TableField<EventsStatementsHistoryRecord, ULong?> = createField(DSL.name("MAX_TOTAL_MEMORY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_statements_history.EXECUTION_ENGINE</code>.
     */
    val EXECUTION_ENGINE: TableField<EventsStatementsHistoryRecord, EventsStatementsHistoryExecutionEngine?> = createField(DSL.name("EXECUTION_ENGINE"), SQLDataType.VARCHAR(9).asEnumDataType(EventsStatementsHistoryExecutionEngine::class.java), this, "")

    private constructor(alias: Name, aliased: Table<EventsStatementsHistoryRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<EventsStatementsHistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<EventsStatementsHistoryRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>performance_schema.events_statements_history</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>performance_schema.events_statements_history</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.events_statements_history</code> table
     * reference
     */
    constructor(): this(DSL.name("events_statements_history"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getPrimaryKey(): UniqueKey<EventsStatementsHistoryRecord> = KEY_EVENTS_STATEMENTS_HISTORY_PRIMARY
    override fun `as`(alias: String): EventsStatementsHistory = EventsStatementsHistory(DSL.name(alias), this)
    override fun `as`(alias: Name): EventsStatementsHistory = EventsStatementsHistory(alias, this)
    override fun `as`(alias: Table<*>): EventsStatementsHistory = EventsStatementsHistory(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): EventsStatementsHistory = EventsStatementsHistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): EventsStatementsHistory = EventsStatementsHistory(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): EventsStatementsHistory = EventsStatementsHistory(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): EventsStatementsHistory = EventsStatementsHistory(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): EventsStatementsHistory = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): EventsStatementsHistory = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): EventsStatementsHistory = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): EventsStatementsHistory = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): EventsStatementsHistory = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): EventsStatementsHistory = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): EventsStatementsHistory = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): EventsStatementsHistory = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): EventsStatementsHistory = where(DSL.notExists(select))
}
