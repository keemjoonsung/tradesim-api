/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql


import com.kjs990114.infra.persistence.jooq.trade.DefaultCatalog
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ColumnsPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Component
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Db
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.DefaultRoles
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.EngineCost
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Func
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.GeneralLog
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.GlobalGrants
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.GtidExecuted
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpCategory
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpKeyword
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpRelation
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpTopic
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.InnodbIndexStats
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.InnodbTableStats
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.NdbBinlogIndex
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.PasswordHistory
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Plugin
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ProcsPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ProxiesPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ReplicationAsynchronousConnectionFailover
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ReplicationAsynchronousConnectionFailoverManaged
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ReplicationGroupConfigurationVersion
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ReplicationGroupMemberActions
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.RoleEdges
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ServerCost
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Servers
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.SlaveMasterInfo
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.SlaveRelayLogInfo
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.SlaveWorkerInfo
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.SlowLog
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TablesPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZone
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneLeapSecond
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneName
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneTransition
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneTransitionType
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.User

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Mysql : SchemaImpl("mysql", DefaultCatalog.DEFAULT_CATALOG) {
    companion object {

        /**
         * The reference instance of <code>mysql</code>
         */
        val MYSQL: Mysql = Mysql()
    }

    /**
     * Column privileges
     */
    val COLUMNS_PRIV: ColumnsPriv get() = ColumnsPriv.COLUMNS_PRIV

    /**
     * Components
     */
    val COMPONENT: Component get() = Component.COMPONENT

    /**
     * Database privileges
     */
    val DB: Db get() = Db.DB

    /**
     * Default roles
     */
    val DEFAULT_ROLES: DefaultRoles get() = DefaultRoles.DEFAULT_ROLES

    /**
     * The table <code>mysql.engine_cost</code>.
     */
    val ENGINE_COST: EngineCost get() = EngineCost.ENGINE_COST

    /**
     * User defined functions
     */
    val FUNC: Func get() = Func.FUNC

    /**
     * General log
     */
    val GENERAL_LOG: GeneralLog get() = GeneralLog.GENERAL_LOG

    /**
     * Extended global grants
     */
    val GLOBAL_GRANTS: GlobalGrants get() = GlobalGrants.GLOBAL_GRANTS

    /**
     * The table <code>mysql.gtid_executed</code>.
     */
    val GTID_EXECUTED: GtidExecuted get() = GtidExecuted.GTID_EXECUTED

    /**
     * help categories
     */
    val HELP_CATEGORY: HelpCategory get() = HelpCategory.HELP_CATEGORY

    /**
     * help keywords
     */
    val HELP_KEYWORD: HelpKeyword get() = HelpKeyword.HELP_KEYWORD

    /**
     * keyword-topic relation
     */
    val HELP_RELATION: HelpRelation get() = HelpRelation.HELP_RELATION

    /**
     * help topics
     */
    val HELP_TOPIC: HelpTopic get() = HelpTopic.HELP_TOPIC

    /**
     * The table <code>mysql.innodb_index_stats</code>.
     */
    val INNODB_INDEX_STATS: InnodbIndexStats get() = InnodbIndexStats.INNODB_INDEX_STATS

    /**
     * The table <code>mysql.innodb_table_stats</code>.
     */
    val INNODB_TABLE_STATS: InnodbTableStats get() = InnodbTableStats.INNODB_TABLE_STATS

    /**
     * The table <code>mysql.ndb_binlog_index</code>.
     */
    val NDB_BINLOG_INDEX: NdbBinlogIndex get() = NdbBinlogIndex.NDB_BINLOG_INDEX

    /**
     * Password history for user accounts
     */
    val PASSWORD_HISTORY: PasswordHistory get() = PasswordHistory.PASSWORD_HISTORY

    /**
     * MySQL plugins
     */
    val PLUGIN: Plugin get() = Plugin.PLUGIN

    /**
     * Procedure privileges
     */
    val PROCS_PRIV: ProcsPriv get() = ProcsPriv.PROCS_PRIV

    /**
     * User proxy privileges
     */
    val PROXIES_PRIV: ProxiesPriv get() = ProxiesPriv.PROXIES_PRIV

    /**
     * The source configuration details
     */
    val REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER: ReplicationAsynchronousConnectionFailover get() = ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER

    /**
     * The managed source configuration details
     */
    val REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED: ReplicationAsynchronousConnectionFailoverManaged get() = ReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED

    /**
     * The group configuration version.
     */
    val REPLICATION_GROUP_CONFIGURATION_VERSION: ReplicationGroupConfigurationVersion get() = ReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION

    /**
     * The member actions configuration.
     */
    val REPLICATION_GROUP_MEMBER_ACTIONS: ReplicationGroupMemberActions get() = ReplicationGroupMemberActions.REPLICATION_GROUP_MEMBER_ACTIONS

    /**
     * Role hierarchy and role grants
     */
    val ROLE_EDGES: RoleEdges get() = RoleEdges.ROLE_EDGES

    /**
     * The table <code>mysql.server_cost</code>.
     */
    val SERVER_COST: ServerCost get() = ServerCost.SERVER_COST

    /**
     * MySQL Foreign Servers table
     */
    val SERVERS: Servers get() = Servers.SERVERS

    /**
     * Master Information
     */
    val SLAVE_MASTER_INFO: SlaveMasterInfo get() = SlaveMasterInfo.SLAVE_MASTER_INFO

    /**
     * Relay Log Information
     */
    val SLAVE_RELAY_LOG_INFO: SlaveRelayLogInfo get() = SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO

    /**
     * Worker Information
     */
    val SLAVE_WORKER_INFO: SlaveWorkerInfo get() = SlaveWorkerInfo.SLAVE_WORKER_INFO

    /**
     * Slow log
     */
    val SLOW_LOG: SlowLog get() = SlowLog.SLOW_LOG

    /**
     * Table privileges
     */
    val TABLES_PRIV: TablesPriv get() = TablesPriv.TABLES_PRIV

    /**
     * Time zones
     */
    val TIME_ZONE: TimeZone get() = TimeZone.TIME_ZONE

    /**
     * Leap seconds information for time zones
     */
    val TIME_ZONE_LEAP_SECOND: TimeZoneLeapSecond get() = TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND

    /**
     * Time zone names
     */
    val TIME_ZONE_NAME: TimeZoneName get() = TimeZoneName.TIME_ZONE_NAME

    /**
     * Time zone transitions
     */
    val TIME_ZONE_TRANSITION: TimeZoneTransition get() = TimeZoneTransition.TIME_ZONE_TRANSITION

    /**
     * Time zone transition types
     */
    val TIME_ZONE_TRANSITION_TYPE: TimeZoneTransitionType get() = TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE

    /**
     * Users and global privileges
     */
    val USER: User get() = User.USER

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        ColumnsPriv.COLUMNS_PRIV,
        Component.COMPONENT,
        Db.DB,
        DefaultRoles.DEFAULT_ROLES,
        EngineCost.ENGINE_COST,
        Func.FUNC,
        GeneralLog.GENERAL_LOG,
        GlobalGrants.GLOBAL_GRANTS,
        GtidExecuted.GTID_EXECUTED,
        HelpCategory.HELP_CATEGORY,
        HelpKeyword.HELP_KEYWORD,
        HelpRelation.HELP_RELATION,
        HelpTopic.HELP_TOPIC,
        InnodbIndexStats.INNODB_INDEX_STATS,
        InnodbTableStats.INNODB_TABLE_STATS,
        NdbBinlogIndex.NDB_BINLOG_INDEX,
        PasswordHistory.PASSWORD_HISTORY,
        Plugin.PLUGIN,
        ProcsPriv.PROCS_PRIV,
        ProxiesPriv.PROXIES_PRIV,
        ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER,
        ReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED,
        ReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION,
        ReplicationGroupMemberActions.REPLICATION_GROUP_MEMBER_ACTIONS,
        RoleEdges.ROLE_EDGES,
        ServerCost.SERVER_COST,
        Servers.SERVERS,
        SlaveMasterInfo.SLAVE_MASTER_INFO,
        SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO,
        SlaveWorkerInfo.SLAVE_WORKER_INFO,
        SlowLog.SLOW_LOG,
        TablesPriv.TABLES_PRIV,
        TimeZone.TIME_ZONE,
        TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND,
        TimeZoneName.TIME_ZONE_NAME,
        TimeZoneTransition.TIME_ZONE_TRANSITION,
        TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE,
        User.USER
    )
}
