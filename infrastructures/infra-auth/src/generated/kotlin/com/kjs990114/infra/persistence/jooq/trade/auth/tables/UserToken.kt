/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.auth.tables


import com.kjs990114.infra.persistence.jooq.trade.auth.Auth
import com.kjs990114.infra.persistence.jooq.trade.auth.indexes.USER_TOKEN_IDX_USER_TOKEN_001
import com.kjs990114.infra.persistence.jooq.trade.auth.keys.KEY_USER_TOKEN_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.auth.tables.records.UserTokenRecord

import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserToken(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UserTokenRecord>?,
    parentPath: InverseForeignKey<out Record, UserTokenRecord>?,
    aliased: Table<UserTokenRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UserTokenRecord>(
    alias,
    Auth.AUTH,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>auth.user_token</code>
         */
        val USER_TOKEN: UserToken = UserToken()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserTokenRecord> = UserTokenRecord::class.java

    /**
     * The column <code>auth.user_token.id</code>. PK
     */
    val ID: TableField<UserTokenRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "PK")

    /**
     * The column <code>auth.user_token.user_id</code>. user PK
     */
    val USER_ID: TableField<UserTokenRecord, Long?> = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "user PK")

    /**
     * The column <code>auth.user_token.access_token</code>. access token
     */
    val ACCESS_TOKEN: TableField<UserTokenRecord, String?> = createField(DSL.name("access_token"), SQLDataType.VARCHAR(256).nullable(false), this, "access token")

    /**
     * The column <code>auth.user_token.access_expired</code>. access token 만료일시
     */
    val ACCESS_EXPIRED: TableField<UserTokenRecord, LocalDateTime?> = createField(DSL.name("access_expired"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "access token 만료일시")

    /**
     * The column <code>auth.user_token.refresh_token</code>. refresh token
     */
    val REFRESH_TOKEN: TableField<UserTokenRecord, String?> = createField(DSL.name("refresh_token"), SQLDataType.VARCHAR(256).nullable(false), this, "refresh token")

    /**
     * The column <code>auth.user_token.refresh_expired</code>. refresh token
     * 만료일시
     */
    val REFRESH_EXPIRED: TableField<UserTokenRecord, LocalDateTime?> = createField(DSL.name("refresh_expired"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "refresh token 만료일시")

    /**
     * The column <code>auth.user_token.created_at</code>. 생성일시
     */
    val CREATED_AT: TableField<UserTokenRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "생성일시")

    /**
     * The column <code>auth.user_token.updated_at</code>. 수정일시
     */
    val UPDATED_AT: TableField<UserTokenRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "수정일시")

    private constructor(alias: Name, aliased: Table<UserTokenRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UserTokenRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UserTokenRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>auth.user_token</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>auth.user_token</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>auth.user_token</code> table reference
     */
    constructor(): this(DSL.name("user_token"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Auth.AUTH
    override fun getIndexes(): List<Index> = listOf(USER_TOKEN_IDX_USER_TOKEN_001)
    override fun getIdentity(): Identity<UserTokenRecord, Long?> = super.getIdentity() as Identity<UserTokenRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<UserTokenRecord> = KEY_USER_TOKEN_PRIMARY
    override fun `as`(alias: String): UserToken = UserToken(DSL.name(alias), this)
    override fun `as`(alias: Name): UserToken = UserToken(alias, this)
    override fun `as`(alias: Table<*>): UserToken = UserToken(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserToken = UserToken(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserToken = UserToken(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UserToken = UserToken(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): UserToken = UserToken(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): UserToken = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): UserToken = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): UserToken = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): UserToken = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): UserToken = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): UserToken = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): UserToken = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): UserToken = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): UserToken = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Long?, Long?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row8<Long?, Long?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
