/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Plugin

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * MySQL plugins
 */
@Suppress("UNCHECKED_CAST")
open class PluginRecord() : UpdatableRecordImpl<PluginRecord>(Plugin.PLUGIN), Record2<String?, String?> {

    open var name: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var dl: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, String?> = super.fieldsRow() as Row2<String?, String?>
    override fun valuesRow(): Row2<String?, String?> = super.valuesRow() as Row2<String?, String?>
    override fun field1(): Field<String?> = Plugin.PLUGIN.NAME
    override fun field2(): Field<String?> = Plugin.PLUGIN.DL
    override fun component1(): String? = name
    override fun component2(): String? = dl
    override fun value1(): String? = name
    override fun value2(): String? = dl

    override fun value1(value: String?): PluginRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): PluginRecord {
        set(1, value)
        return this
    }

    override fun values(value1: String?, value2: String?): PluginRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised PluginRecord
     */
    constructor(name: String? = null, dl: String? = null): this() {
        this.name = name
        this.dl = dl
        resetChangedOnNotNull()
    }
}
