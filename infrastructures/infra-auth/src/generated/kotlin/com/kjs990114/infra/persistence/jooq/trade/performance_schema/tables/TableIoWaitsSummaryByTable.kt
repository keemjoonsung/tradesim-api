/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_TABLE_IO_WAITS_SUMMARY_BY_TABLE_OBJECT
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.TableIoWaitsSummaryByTableRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TableIoWaitsSummaryByTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TableIoWaitsSummaryByTableRecord>?,
    parentPath: InverseForeignKey<out Record, TableIoWaitsSummaryByTableRecord>?,
    aliased: Table<TableIoWaitsSummaryByTableRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TableIoWaitsSummaryByTableRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>performance_schema.table_io_waits_summary_by_table</code>
         */
        val TABLE_IO_WAITS_SUMMARY_BY_TABLE: TableIoWaitsSummaryByTable = TableIoWaitsSummaryByTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TableIoWaitsSummaryByTableRecord> = TableIoWaitsSummaryByTableRecord::class.java

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.OBJECT_TYPE</code>.
     */
    val OBJECT_TYPE: TableField<TableIoWaitsSummaryByTableRecord, String?> = createField(DSL.name("OBJECT_TYPE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.OBJECT_SCHEMA</code>.
     */
    val OBJECT_SCHEMA: TableField<TableIoWaitsSummaryByTableRecord, String?> = createField(DSL.name("OBJECT_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.OBJECT_NAME</code>.
     */
    val OBJECT_NAME: TableField<TableIoWaitsSummaryByTableRecord, String?> = createField(DSL.name("OBJECT_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.COUNT_STAR</code>.
     */
    val COUNT_STAR: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("COUNT_STAR"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.SUM_TIMER_WAIT</code>.
     */
    val SUM_TIMER_WAIT: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("SUM_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MIN_TIMER_WAIT</code>.
     */
    val MIN_TIMER_WAIT: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MIN_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.AVG_TIMER_WAIT</code>.
     */
    val AVG_TIMER_WAIT: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("AVG_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MAX_TIMER_WAIT</code>.
     */
    val MAX_TIMER_WAIT: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MAX_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.COUNT_READ</code>.
     */
    val COUNT_READ: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("COUNT_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.SUM_TIMER_READ</code>.
     */
    val SUM_TIMER_READ: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("SUM_TIMER_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MIN_TIMER_READ</code>.
     */
    val MIN_TIMER_READ: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MIN_TIMER_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.AVG_TIMER_READ</code>.
     */
    val AVG_TIMER_READ: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("AVG_TIMER_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MAX_TIMER_READ</code>.
     */
    val MAX_TIMER_READ: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MAX_TIMER_READ"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.COUNT_WRITE</code>.
     */
    val COUNT_WRITE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("COUNT_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.SUM_TIMER_WRITE</code>.
     */
    val SUM_TIMER_WRITE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("SUM_TIMER_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MIN_TIMER_WRITE</code>.
     */
    val MIN_TIMER_WRITE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MIN_TIMER_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.AVG_TIMER_WRITE</code>.
     */
    val AVG_TIMER_WRITE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("AVG_TIMER_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MAX_TIMER_WRITE</code>.
     */
    val MAX_TIMER_WRITE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MAX_TIMER_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.COUNT_FETCH</code>.
     */
    val COUNT_FETCH: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("COUNT_FETCH"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.SUM_TIMER_FETCH</code>.
     */
    val SUM_TIMER_FETCH: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("SUM_TIMER_FETCH"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MIN_TIMER_FETCH</code>.
     */
    val MIN_TIMER_FETCH: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MIN_TIMER_FETCH"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.AVG_TIMER_FETCH</code>.
     */
    val AVG_TIMER_FETCH: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("AVG_TIMER_FETCH"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MAX_TIMER_FETCH</code>.
     */
    val MAX_TIMER_FETCH: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MAX_TIMER_FETCH"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.COUNT_INSERT</code>.
     */
    val COUNT_INSERT: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("COUNT_INSERT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.SUM_TIMER_INSERT</code>.
     */
    val SUM_TIMER_INSERT: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("SUM_TIMER_INSERT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MIN_TIMER_INSERT</code>.
     */
    val MIN_TIMER_INSERT: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MIN_TIMER_INSERT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.AVG_TIMER_INSERT</code>.
     */
    val AVG_TIMER_INSERT: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("AVG_TIMER_INSERT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MAX_TIMER_INSERT</code>.
     */
    val MAX_TIMER_INSERT: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MAX_TIMER_INSERT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.COUNT_UPDATE</code>.
     */
    val COUNT_UPDATE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("COUNT_UPDATE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.SUM_TIMER_UPDATE</code>.
     */
    val SUM_TIMER_UPDATE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("SUM_TIMER_UPDATE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MIN_TIMER_UPDATE</code>.
     */
    val MIN_TIMER_UPDATE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MIN_TIMER_UPDATE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.AVG_TIMER_UPDATE</code>.
     */
    val AVG_TIMER_UPDATE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("AVG_TIMER_UPDATE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MAX_TIMER_UPDATE</code>.
     */
    val MAX_TIMER_UPDATE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MAX_TIMER_UPDATE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.COUNT_DELETE</code>.
     */
    val COUNT_DELETE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("COUNT_DELETE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.SUM_TIMER_DELETE</code>.
     */
    val SUM_TIMER_DELETE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("SUM_TIMER_DELETE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MIN_TIMER_DELETE</code>.
     */
    val MIN_TIMER_DELETE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MIN_TIMER_DELETE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.AVG_TIMER_DELETE</code>.
     */
    val AVG_TIMER_DELETE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("AVG_TIMER_DELETE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.table_io_waits_summary_by_table.MAX_TIMER_DELETE</code>.
     */
    val MAX_TIMER_DELETE: TableField<TableIoWaitsSummaryByTableRecord, ULong?> = createField(DSL.name("MAX_TIMER_DELETE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TableIoWaitsSummaryByTableRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TableIoWaitsSummaryByTableRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TableIoWaitsSummaryByTableRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>performance_schema.table_io_waits_summary_by_table</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>performance_schema.table_io_waits_summary_by_table</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.table_io_waits_summary_by_table</code>
     * table reference
     */
    constructor(): this(DSL.name("table_io_waits_summary_by_table"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getUniqueKeys(): List<UniqueKey<TableIoWaitsSummaryByTableRecord>> = listOf(KEY_TABLE_IO_WAITS_SUMMARY_BY_TABLE_OBJECT)
    override fun `as`(alias: String): TableIoWaitsSummaryByTable = TableIoWaitsSummaryByTable(DSL.name(alias), this)
    override fun `as`(alias: Name): TableIoWaitsSummaryByTable = TableIoWaitsSummaryByTable(alias, this)
    override fun `as`(alias: Table<*>): TableIoWaitsSummaryByTable = TableIoWaitsSummaryByTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TableIoWaitsSummaryByTable = TableIoWaitsSummaryByTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TableIoWaitsSummaryByTable = TableIoWaitsSummaryByTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TableIoWaitsSummaryByTable = TableIoWaitsSummaryByTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TableIoWaitsSummaryByTable = TableIoWaitsSummaryByTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TableIoWaitsSummaryByTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TableIoWaitsSummaryByTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TableIoWaitsSummaryByTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TableIoWaitsSummaryByTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TableIoWaitsSummaryByTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TableIoWaitsSummaryByTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TableIoWaitsSummaryByTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TableIoWaitsSummaryByTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TableIoWaitsSummaryByTable = where(DSL.notExists(select))
}
