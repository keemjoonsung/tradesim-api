/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables


import com.kjs990114.infra.persistence.jooq.trade.mysql.Mysql
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserAccountLocked
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserAlterPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserAlterRoutinePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserCreatePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserCreateRolePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserCreateRoutinePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserCreateTablespacePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserCreateTmpTablePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserCreateUserPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserCreateViewPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserDeletePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserDropPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserDropRolePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserEventPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserExecutePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserFilePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserGrantPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserIndexPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserInsertPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserLockTablesPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserPasswordExpired
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserPasswordRequireCurrent
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserProcessPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserReferencesPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserReloadPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserReplClientPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserReplSlavePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserSelectPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserShowDbPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserShowViewPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserShutdownPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserSslType
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserSuperPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserTriggerPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.UserUpdatePriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.keys.KEY_USER_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.UserRecord

import java.time.LocalDateTime

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.JSON
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.UShort


/**
 * Users and global privileges
 */
@Suppress("UNCHECKED_CAST")
open class User(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UserRecord>?,
    parentPath: InverseForeignKey<out Record, UserRecord>?,
    aliased: Table<UserRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UserRecord>(
    alias,
    Mysql.MYSQL,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Users and global privileges"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>mysql.user</code>
         */
        val USER: User = User()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRecord> = UserRecord::class.java

    /**
     * The column <code>mysql.user.Host</code>.
     */
    val HOST: TableField<UserRecord, String?> = createField(DSL.name("Host"), SQLDataType.CHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.user.User</code>.
     */
    val USER_: TableField<UserRecord, String?> = createField(DSL.name("User"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.user.Select_priv</code>.
     */
    val SELECT_PRIV: TableField<UserRecord, UserSelectPriv?> = createField(DSL.name("Select_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserSelectPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Insert_priv</code>.
     */
    val INSERT_PRIV: TableField<UserRecord, UserInsertPriv?> = createField(DSL.name("Insert_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserInsertPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Update_priv</code>.
     */
    val UPDATE_PRIV: TableField<UserRecord, UserUpdatePriv?> = createField(DSL.name("Update_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserUpdatePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Delete_priv</code>.
     */
    val DELETE_PRIV: TableField<UserRecord, UserDeletePriv?> = createField(DSL.name("Delete_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserDeletePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Create_priv</code>.
     */
    val CREATE_PRIV: TableField<UserRecord, UserCreatePriv?> = createField(DSL.name("Create_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserCreatePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Drop_priv</code>.
     */
    val DROP_PRIV: TableField<UserRecord, UserDropPriv?> = createField(DSL.name("Drop_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserDropPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Reload_priv</code>.
     */
    val RELOAD_PRIV: TableField<UserRecord, UserReloadPriv?> = createField(DSL.name("Reload_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserReloadPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Shutdown_priv</code>.
     */
    val SHUTDOWN_PRIV: TableField<UserRecord, UserShutdownPriv?> = createField(DSL.name("Shutdown_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserShutdownPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Process_priv</code>.
     */
    val PROCESS_PRIV: TableField<UserRecord, UserProcessPriv?> = createField(DSL.name("Process_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserProcessPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.File_priv</code>.
     */
    val FILE_PRIV: TableField<UserRecord, UserFilePriv?> = createField(DSL.name("File_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserFilePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Grant_priv</code>.
     */
    val GRANT_PRIV: TableField<UserRecord, UserGrantPriv?> = createField(DSL.name("Grant_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserGrantPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.References_priv</code>.
     */
    val REFERENCES_PRIV: TableField<UserRecord, UserReferencesPriv?> = createField(DSL.name("References_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserReferencesPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Index_priv</code>.
     */
    val INDEX_PRIV: TableField<UserRecord, UserIndexPriv?> = createField(DSL.name("Index_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserIndexPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Alter_priv</code>.
     */
    val ALTER_PRIV: TableField<UserRecord, UserAlterPriv?> = createField(DSL.name("Alter_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserAlterPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Show_db_priv</code>.
     */
    val SHOW_DB_PRIV: TableField<UserRecord, UserShowDbPriv?> = createField(DSL.name("Show_db_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserShowDbPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Super_priv</code>.
     */
    val SUPER_PRIV: TableField<UserRecord, UserSuperPriv?> = createField(DSL.name("Super_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserSuperPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Create_tmp_table_priv</code>.
     */
    val CREATE_TMP_TABLE_PRIV: TableField<UserRecord, UserCreateTmpTablePriv?> = createField(DSL.name("Create_tmp_table_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserCreateTmpTablePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Lock_tables_priv</code>.
     */
    val LOCK_TABLES_PRIV: TableField<UserRecord, UserLockTablesPriv?> = createField(DSL.name("Lock_tables_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserLockTablesPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Execute_priv</code>.
     */
    val EXECUTE_PRIV: TableField<UserRecord, UserExecutePriv?> = createField(DSL.name("Execute_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserExecutePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Repl_slave_priv</code>.
     */
    val REPL_SLAVE_PRIV: TableField<UserRecord, UserReplSlavePriv?> = createField(DSL.name("Repl_slave_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserReplSlavePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Repl_client_priv</code>.
     */
    val REPL_CLIENT_PRIV: TableField<UserRecord, UserReplClientPriv?> = createField(DSL.name("Repl_client_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserReplClientPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Create_view_priv</code>.
     */
    val CREATE_VIEW_PRIV: TableField<UserRecord, UserCreateViewPriv?> = createField(DSL.name("Create_view_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserCreateViewPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Show_view_priv</code>.
     */
    val SHOW_VIEW_PRIV: TableField<UserRecord, UserShowViewPriv?> = createField(DSL.name("Show_view_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserShowViewPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Create_routine_priv</code>.
     */
    val CREATE_ROUTINE_PRIV: TableField<UserRecord, UserCreateRoutinePriv?> = createField(DSL.name("Create_routine_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserCreateRoutinePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Alter_routine_priv</code>.
     */
    val ALTER_ROUTINE_PRIV: TableField<UserRecord, UserAlterRoutinePriv?> = createField(DSL.name("Alter_routine_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserAlterRoutinePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Create_user_priv</code>.
     */
    val CREATE_USER_PRIV: TableField<UserRecord, UserCreateUserPriv?> = createField(DSL.name("Create_user_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserCreateUserPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Event_priv</code>.
     */
    val EVENT_PRIV: TableField<UserRecord, UserEventPriv?> = createField(DSL.name("Event_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserEventPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Trigger_priv</code>.
     */
    val TRIGGER_PRIV: TableField<UserRecord, UserTriggerPriv?> = createField(DSL.name("Trigger_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserTriggerPriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Create_tablespace_priv</code>.
     */
    val CREATE_TABLESPACE_PRIV: TableField<UserRecord, UserCreateTablespacePriv?> = createField(DSL.name("Create_tablespace_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserCreateTablespacePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.ssl_type</code>.
     */
    val SSL_TYPE: TableField<UserRecord, UserSslType?> = createField(DSL.name("ssl_type"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)).asEnumDataType(UserSslType::class.java), this, "")

    /**
     * The column <code>mysql.user.ssl_cipher</code>.
     */
    val SSL_CIPHER: TableField<UserRecord, ByteArray?> = createField(DSL.name("ssl_cipher"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.user.x509_issuer</code>.
     */
    val X509_ISSUER: TableField<UserRecord, ByteArray?> = createField(DSL.name("x509_issuer"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.user.x509_subject</code>.
     */
    val X509_SUBJECT: TableField<UserRecord, ByteArray?> = createField(DSL.name("x509_subject"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>mysql.user.max_questions</code>.
     */
    val MAX_QUESTIONS: TableField<UserRecord, UInteger?> = createField(DSL.name("max_questions"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>mysql.user.max_updates</code>.
     */
    val MAX_UPDATES: TableField<UserRecord, UInteger?> = createField(DSL.name("max_updates"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>mysql.user.max_connections</code>.
     */
    val MAX_CONNECTIONS: TableField<UserRecord, UInteger?> = createField(DSL.name("max_connections"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>mysql.user.max_user_connections</code>.
     */
    val MAX_USER_CONNECTIONS: TableField<UserRecord, UInteger?> = createField(DSL.name("max_user_connections"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>mysql.user.plugin</code>.
     */
    val PLUGIN: TableField<UserRecord, String?> = createField(DSL.name("plugin"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("caching_sha2_password", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>mysql.user.authentication_string</code>.
     */
    val AUTHENTICATION_STRING: TableField<UserRecord, String?> = createField(DSL.name("authentication_string"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>mysql.user.password_expired</code>.
     */
    val PASSWORD_EXPIRED: TableField<UserRecord, UserPasswordExpired?> = createField(DSL.name("password_expired"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserPasswordExpired::class.java), this, "")

    /**
     * The column <code>mysql.user.password_last_changed</code>.
     */
    val PASSWORD_LAST_CHANGED: TableField<UserRecord, LocalDateTime?> = createField(DSL.name("password_last_changed"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>mysql.user.password_lifetime</code>.
     */
    val PASSWORD_LIFETIME: TableField<UserRecord, UShort?> = createField(DSL.name("password_lifetime"), SQLDataType.SMALLINTUNSIGNED, this, "")

    /**
     * The column <code>mysql.user.account_locked</code>.
     */
    val ACCOUNT_LOCKED: TableField<UserRecord, UserAccountLocked?> = createField(DSL.name("account_locked"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserAccountLocked::class.java), this, "")

    /**
     * The column <code>mysql.user.Create_role_priv</code>.
     */
    val CREATE_ROLE_PRIV: TableField<UserRecord, UserCreateRolePriv?> = createField(DSL.name("Create_role_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserCreateRolePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Drop_role_priv</code>.
     */
    val DROP_ROLE_PRIV: TableField<UserRecord, UserDropRolePriv?> = createField(DSL.name("Drop_role_priv"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(UserDropRolePriv::class.java), this, "")

    /**
     * The column <code>mysql.user.Password_reuse_history</code>.
     */
    val PASSWORD_REUSE_HISTORY: TableField<UserRecord, UShort?> = createField(DSL.name("Password_reuse_history"), SQLDataType.SMALLINTUNSIGNED, this, "")

    /**
     * The column <code>mysql.user.Password_reuse_time</code>.
     */
    val PASSWORD_REUSE_TIME: TableField<UserRecord, UShort?> = createField(DSL.name("Password_reuse_time"), SQLDataType.SMALLINTUNSIGNED, this, "")

    /**
     * The column <code>mysql.user.Password_require_current</code>.
     */
    val PASSWORD_REQUIRE_CURRENT: TableField<UserRecord, UserPasswordRequireCurrent?> = createField(DSL.name("Password_require_current"), SQLDataType.VARCHAR(1).asEnumDataType(UserPasswordRequireCurrent::class.java), this, "")

    /**
     * The column <code>mysql.user.User_attributes</code>.
     */
    val USER_ATTRIBUTES: TableField<UserRecord, JSON?> = createField(DSL.name("User_attributes"), SQLDataType.JSON, this, "")

    private constructor(alias: Name, aliased: Table<UserRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UserRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UserRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>mysql.user</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.user</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.user</code> table reference
     */
    constructor(): this(DSL.name("user"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<UserRecord> = KEY_USER_PRIMARY
    override fun `as`(alias: String): User = User(DSL.name(alias), this)
    override fun `as`(alias: Name): User = User(alias, this)
    override fun `as`(alias: Table<*>): User = User(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): User = User(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): User = User(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): User = User(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): User = User(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): User = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): User = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): User = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): User = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): User = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): User = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): User = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): User = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): User = where(DSL.notExists(select))
}
