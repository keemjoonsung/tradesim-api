/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 * Description
 * -----------
 * 
 * Returns whether an instrument is enabled by default in this version of MySQL.
 * 
 * Parameters
 * -----------
 * 
 * in_instrument VARCHAR(128): 
 *   The instrument to check.
 * 
 * Returns
 * -----------
 * 
 * ENUM('YES', 'NO')
 * 
 * Example
 * -----------
 * 
 * mysql&gt; SELECT
 * sys.ps_is_instrument_default_enabled('statement/sql/select');
 * +--------------------------------------------------------------+
 * | sys.ps_is_instrument_default_enabled('statement/sql/select') |
 * +--------------------------------------------------------------+
 * | YES                                                          |
 * +--------------------------------------------------------------+
 * 1 row in set (0.00 sec)

 */
@Suppress("UNCHECKED_CAST")
open class PsIsInstrumentDefaultEnabled : AbstractRoutine<String>("ps_is_instrument_default_enabled", Sys.SYS, SQLDataType.VARCHAR(3)) {
    companion object {

        /**
         * The parameter
         * <code>sys.ps_is_instrument_default_enabled.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.VARCHAR(3), false, false)

        /**
         * The parameter
         * <code>sys.ps_is_instrument_default_enabled.in_instrument</code>.
         */
        val IN_INSTRUMENT: Parameter<String?> = Internal.createParameter("in_instrument", SQLDataType.VARCHAR(128), false, false)
    }

    init {
        returnParameter = PsIsInstrumentDefaultEnabled.RETURN_VALUE
        addInParameter(PsIsInstrumentDefaultEnabled.IN_INSTRUMENT)
    }

    /**
     * Set the <code>in_instrument</code> parameter IN value to the routine
     */
    fun setInInstrument(value: String?): Unit = setValue(PsIsInstrumentDefaultEnabled.IN_INSTRUMENT, value)

    /**
     * Set the <code>in_instrument</code> parameter to the function to be used
     * with a {@link org.jooq.Select} statement
     */
    fun setInInstrument(field: Field<String?>): PsIsInstrumentDefaultEnabled {
        setField(PsIsInstrumentDefaultEnabled.IN_INSTRUMENT, field)
        return this
    }
}
