/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 * Description
 * -----------
 * 
 * Takes a raw bytes value, and converts it to a human readable format.
 * 
 * Parameters
 * -----------
 * 
 * bytes (TEXT):
 *   A raw bytes value.
 * 
 * Returns
 * -----------
 * 
 * TEXT
 * 
 * Example
 * -----------
 * 
 * mysql&gt; SELECT sys.format_bytes(2348723492723746) AS size;
 * +----------+
 * | size     |
 * +----------+
 * | 2.09 PiB |
 * +----------+
 * 1 row in set (0.00 sec)
 * 
 * mysql&gt; SELECT sys.format_bytes(2348723492723) AS size;
 * +----------+
 * | size     |
 * +----------+
 * | 2.14 TiB |
 * +----------+
 * 1 row in set (0.00 sec)
 * 
 * mysql&gt; SELECT sys.format_bytes(23487234) AS size;
 * +-----------+
 * | size      |
 * +-----------+
 * | 22.40 MiB |
 * +-----------+
 * 1 row in set (0.00 sec)

 */
@Suppress("UNCHECKED_CAST")
open class FormatBytes : AbstractRoutine<String>("format_bytes", Sys.SYS, SQLDataType.CLOB) {
    companion object {

        /**
         * The parameter <code>sys.format_bytes.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.CLOB, false, false)

        /**
         * The parameter <code>sys.format_bytes.bytes</code>.
         */
        val BYTES: Parameter<String?> = Internal.createParameter("bytes", SQLDataType.CLOB, false, false)
    }

    init {
        returnParameter = FormatBytes.RETURN_VALUE
        addInParameter(FormatBytes.BYTES)
    }

    /**
     * Set the <code>bytes</code> parameter IN value to the routine
     */
    fun setBytes(value: String?): Unit = setValue(FormatBytes.BYTES, value)

    /**
     * Set the <code>bytes</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setBytes(field: Field<String?>): FormatBytes {
        setField(FormatBytes.BYTES, field)
        return this
    }
}
