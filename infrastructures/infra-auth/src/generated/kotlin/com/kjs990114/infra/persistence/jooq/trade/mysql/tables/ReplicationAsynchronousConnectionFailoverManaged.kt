/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables


import com.kjs990114.infra.persistence.jooq.trade.mysql.Mysql
import com.kjs990114.infra.persistence.jooq.trade.mysql.keys.KEY_REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ReplicationAsynchronousConnectionFailoverManagedRecord

import java.util.function.Function

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.JSON
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row4
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * The managed source configuration details
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationAsynchronousConnectionFailoverManaged(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ReplicationAsynchronousConnectionFailoverManagedRecord>?,
    parentPath: InverseForeignKey<out Record, ReplicationAsynchronousConnectionFailoverManagedRecord>?,
    aliased: Table<ReplicationAsynchronousConnectionFailoverManagedRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ReplicationAsynchronousConnectionFailoverManagedRecord>(
    alias,
    Mysql.MYSQL,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("The managed source configuration details"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>mysql.replication_asynchronous_connection_failover_managed</code>
         */
        val REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED: ReplicationAsynchronousConnectionFailoverManaged = ReplicationAsynchronousConnectionFailoverManaged()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ReplicationAsynchronousConnectionFailoverManagedRecord> = ReplicationAsynchronousConnectionFailoverManagedRecord::class.java

    /**
     * The column
     * <code>mysql.replication_asynchronous_connection_failover_managed.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    val CHANNEL_NAME: TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, String?> = createField(DSL.name("Channel_name"), SQLDataType.CHAR(64).nullable(false), this, "The replication channel name that connects source and replica.")

    /**
     * The column
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_name</code>.
     * The name of the source which needs to be managed.
     */
    val MANAGED_NAME: TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, String?> = createField(DSL.name("Managed_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "The name of the source which needs to be managed.")

    /**
     * The column
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_type</code>.
     * Determines the managed type.
     */
    val MANAGED_TYPE: TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, String?> = createField(DSL.name("Managed_type"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "Determines the managed type.")

    /**
     * The column
     * <code>mysql.replication_asynchronous_connection_failover_managed.Configuration</code>.
     * The data to help manage group. For Managed_type = GroupReplication,
     * Configuration value should contain {"Primary_weight": 80,
     * "Secondary_weight": 60}, so that it assigns weight=80 to PRIMARY of the
     * group, and weight=60 for rest of the members in
     * mysql.replication_asynchronous_connection_failover table.
     */
    val CONFIGURATION: TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, JSON?> = createField(DSL.name("Configuration"), SQLDataType.JSON, this, "The data to help manage group. For Managed_type = GroupReplication, Configuration value should contain {\"Primary_weight\": 80, \"Secondary_weight\": 60}, so that it assigns weight=80 to PRIMARY of the group, and weight=60 for rest of the members in mysql.replication_asynchronous_connection_failover table.")

    private constructor(alias: Name, aliased: Table<ReplicationAsynchronousConnectionFailoverManagedRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ReplicationAsynchronousConnectionFailoverManagedRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ReplicationAsynchronousConnectionFailoverManagedRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>mysql.replication_asynchronous_connection_failover_managed</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>mysql.replication_asynchronous_connection_failover_managed</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a
     * <code>mysql.replication_asynchronous_connection_failover_managed</code>
     * table reference
     */
    constructor(): this(DSL.name("replication_asynchronous_connection_failover_managed"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Mysql.MYSQL
    override fun getPrimaryKey(): UniqueKey<ReplicationAsynchronousConnectionFailoverManagedRecord> = KEY_REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED_PRIMARY
    override fun `as`(alias: String): ReplicationAsynchronousConnectionFailoverManaged = ReplicationAsynchronousConnectionFailoverManaged(DSL.name(alias), this)
    override fun `as`(alias: Name): ReplicationAsynchronousConnectionFailoverManaged = ReplicationAsynchronousConnectionFailoverManaged(alias, this)
    override fun `as`(alias: Table<*>): ReplicationAsynchronousConnectionFailoverManaged = ReplicationAsynchronousConnectionFailoverManaged(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReplicationAsynchronousConnectionFailoverManaged = ReplicationAsynchronousConnectionFailoverManaged(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReplicationAsynchronousConnectionFailoverManaged = ReplicationAsynchronousConnectionFailoverManaged(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ReplicationAsynchronousConnectionFailoverManaged = ReplicationAsynchronousConnectionFailoverManaged(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ReplicationAsynchronousConnectionFailoverManaged = ReplicationAsynchronousConnectionFailoverManaged(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ReplicationAsynchronousConnectionFailoverManaged = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ReplicationAsynchronousConnectionFailoverManaged = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ReplicationAsynchronousConnectionFailoverManaged = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ReplicationAsynchronousConnectionFailoverManaged = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ReplicationAsynchronousConnectionFailoverManaged = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ReplicationAsynchronousConnectionFailoverManaged = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ReplicationAsynchronousConnectionFailoverManaged = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ReplicationAsynchronousConnectionFailoverManaged = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ReplicationAsynchronousConnectionFailoverManaged = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<String?, String?, String?, JSON?> = super.fieldsRow() as Row4<String?, String?, String?, JSON?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, JSON?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, JSON?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
