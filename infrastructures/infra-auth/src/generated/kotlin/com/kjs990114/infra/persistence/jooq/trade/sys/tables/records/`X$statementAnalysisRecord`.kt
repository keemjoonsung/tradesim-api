/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import java.math.BigInteger
import java.time.LocalDateTime

import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class `X$statementAnalysisRecord`() : TableRecordImpl<`X$statementAnalysisRecord`>(com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementAnalysis`.`X$STATEMENT_ANALYSIS`) {

    open var query: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var db: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var fullScan: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var execCount: ULong?
        set(value): Unit = set(3, value)
        get(): ULong? = get(3) as ULong?

    open var execSecondaryCount: ULong?
        set(value): Unit = set(4, value)
        get(): ULong? = get(4) as ULong?

    open var errCount: ULong?
        set(value): Unit = set(5, value)
        get(): ULong? = get(5) as ULong?

    open var warnCount: ULong?
        set(value): Unit = set(6, value)
        get(): ULong? = get(6) as ULong?

    open var totalLatency: ULong?
        set(value): Unit = set(7, value)
        get(): ULong? = get(7) as ULong?

    open var maxLatency: ULong?
        set(value): Unit = set(8, value)
        get(): ULong? = get(8) as ULong?

    open var avgLatency: ULong?
        set(value): Unit = set(9, value)
        get(): ULong? = get(9) as ULong?

    open var lockLatency: ULong?
        set(value): Unit = set(10, value)
        get(): ULong? = get(10) as ULong?

    open var cpuLatency: ULong?
        set(value): Unit = set(11, value)
        get(): ULong? = get(11) as ULong?

    open var rowsSent: ULong?
        set(value): Unit = set(12, value)
        get(): ULong? = get(12) as ULong?

    open var rowsSentAvg: BigInteger?
        set(value): Unit = set(13, value)
        get(): BigInteger? = get(13) as BigInteger?

    open var rowsExamined: ULong?
        set(value): Unit = set(14, value)
        get(): ULong? = get(14) as ULong?

    open var rowsExaminedAvg: BigInteger?
        set(value): Unit = set(15, value)
        get(): BigInteger? = get(15) as BigInteger?

    open var rowsAffected: ULong?
        set(value): Unit = set(16, value)
        get(): ULong? = get(16) as ULong?

    open var rowsAffectedAvg: BigInteger?
        set(value): Unit = set(17, value)
        get(): BigInteger? = get(17) as BigInteger?

    open var tmpTables: ULong?
        set(value): Unit = set(18, value)
        get(): ULong? = get(18) as ULong?

    open var tmpDiskTables: ULong?
        set(value): Unit = set(19, value)
        get(): ULong? = get(19) as ULong?

    open var rowsSorted: ULong?
        set(value): Unit = set(20, value)
        get(): ULong? = get(20) as ULong?

    open var sortMergePasses: ULong?
        set(value): Unit = set(21, value)
        get(): ULong? = get(21) as ULong?

    open var maxControlledMemory: ULong?
        set(value): Unit = set(22, value)
        get(): ULong? = get(22) as ULong?

    open var maxTotalMemory: ULong?
        set(value): Unit = set(23, value)
        get(): ULong? = get(23) as ULong?

    open var digest: String?
        set(value): Unit = set(24, value)
        get(): String? = get(24) as String?

    open var firstSeen: LocalDateTime?
        set(value): Unit = set(25, value)
        get(): LocalDateTime? = get(25) as LocalDateTime?

    open var lastSeen: LocalDateTime?
        set(value): Unit = set(26, value)
        get(): LocalDateTime? = get(26) as LocalDateTime?

    /**
     * Create a detached, initialised `X$statementAnalysisRecord`
     */
    constructor(query: String? = null, db: String? = null, fullScan: String? = null, execCount: ULong? = null, execSecondaryCount: ULong? = null, errCount: ULong? = null, warnCount: ULong? = null, totalLatency: ULong? = null, maxLatency: ULong? = null, avgLatency: ULong? = null, lockLatency: ULong? = null, cpuLatency: ULong? = null, rowsSent: ULong? = null, rowsSentAvg: BigInteger? = null, rowsExamined: ULong? = null, rowsExaminedAvg: BigInteger? = null, rowsAffected: ULong? = null, rowsAffectedAvg: BigInteger? = null, tmpTables: ULong? = null, tmpDiskTables: ULong? = null, rowsSorted: ULong? = null, sortMergePasses: ULong? = null, maxControlledMemory: ULong? = null, maxTotalMemory: ULong? = null, digest: String? = null, firstSeen: LocalDateTime? = null, lastSeen: LocalDateTime? = null): this() {
        this.query = query
        this.db = db
        this.fullScan = fullScan
        this.execCount = execCount
        this.execSecondaryCount = execSecondaryCount
        this.errCount = errCount
        this.warnCount = warnCount
        this.totalLatency = totalLatency
        this.maxLatency = maxLatency
        this.avgLatency = avgLatency
        this.lockLatency = lockLatency
        this.cpuLatency = cpuLatency
        this.rowsSent = rowsSent
        this.rowsSentAvg = rowsSentAvg
        this.rowsExamined = rowsExamined
        this.rowsExaminedAvg = rowsExaminedAvg
        this.rowsAffected = rowsAffected
        this.rowsAffectedAvg = rowsAffectedAvg
        this.tmpTables = tmpTables
        this.tmpDiskTables = tmpDiskTables
        this.rowsSorted = rowsSorted
        this.sortMergePasses = sortMergePasses
        this.maxControlledMemory = maxControlledMemory
        this.maxTotalMemory = maxTotalMemory
        this.digest = digest
        this.firstSeen = firstSeen
        this.lastSeen = lastSeen
        resetChangedOnNotNull()
    }
}
