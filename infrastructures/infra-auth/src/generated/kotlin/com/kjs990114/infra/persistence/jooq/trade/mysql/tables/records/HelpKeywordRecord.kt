/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpKeyword

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger


/**
 * help keywords
 */
@Suppress("UNCHECKED_CAST")
open class HelpKeywordRecord() : UpdatableRecordImpl<HelpKeywordRecord>(HelpKeyword.HELP_KEYWORD), Record2<UInteger?, String?> {

    open var helpKeywordId: UInteger?
        set(value): Unit = set(0, value)
        get(): UInteger? = get(0) as UInteger?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UInteger?> = super.key() as Record1<UInteger?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<UInteger?, String?> = super.fieldsRow() as Row2<UInteger?, String?>
    override fun valuesRow(): Row2<UInteger?, String?> = super.valuesRow() as Row2<UInteger?, String?>
    override fun field1(): Field<UInteger?> = HelpKeyword.HELP_KEYWORD.HELP_KEYWORD_ID
    override fun field2(): Field<String?> = HelpKeyword.HELP_KEYWORD.NAME
    override fun component1(): UInteger? = helpKeywordId
    override fun component2(): String? = name
    override fun value1(): UInteger? = helpKeywordId
    override fun value2(): String? = name

    override fun value1(value: UInteger?): HelpKeywordRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): HelpKeywordRecord {
        set(1, value)
        return this
    }

    override fun values(value1: UInteger?, value2: String?): HelpKeywordRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised HelpKeywordRecord
     */
    constructor(helpKeywordId: UInteger? = null, name: String? = null): this() {
        this.helpKeywordId = helpKeywordId
        this.name = name
        resetChangedOnNotNull()
    }
}
