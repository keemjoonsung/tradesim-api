/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.EventsErrorsSummaryByUserByError

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventsErrorsSummaryByUserByErrorRecord() : TableRecordImpl<EventsErrorsSummaryByUserByErrorRecord>(EventsErrorsSummaryByUserByError.EVENTS_ERRORS_SUMMARY_BY_USER_BY_ERROR), Record8<String?, Int?, String?, String?, ULong?, ULong?, LocalDateTime?, LocalDateTime?> {

    open var user: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var errorNumber: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var errorName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var sqlState: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var sumErrorRaised: ULong?
        set(value): Unit = set(4, value)
        get(): ULong? = get(4) as ULong?

    open var sumErrorHandled: ULong?
        set(value): Unit = set(5, value)
        get(): ULong? = get(5) as ULong?

    open var firstSeen: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    open var lastSeen: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<String?, Int?, String?, String?, ULong?, ULong?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row8<String?, Int?, String?, String?, ULong?, ULong?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row8<String?, Int?, String?, String?, ULong?, ULong?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row8<String?, Int?, String?, String?, ULong?, ULong?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<String?> = EventsErrorsSummaryByUserByError.EVENTS_ERRORS_SUMMARY_BY_USER_BY_ERROR.USER
    override fun field2(): Field<Int?> = EventsErrorsSummaryByUserByError.EVENTS_ERRORS_SUMMARY_BY_USER_BY_ERROR.ERROR_NUMBER
    override fun field3(): Field<String?> = EventsErrorsSummaryByUserByError.EVENTS_ERRORS_SUMMARY_BY_USER_BY_ERROR.ERROR_NAME
    override fun field4(): Field<String?> = EventsErrorsSummaryByUserByError.EVENTS_ERRORS_SUMMARY_BY_USER_BY_ERROR.SQL_STATE
    override fun field5(): Field<ULong?> = EventsErrorsSummaryByUserByError.EVENTS_ERRORS_SUMMARY_BY_USER_BY_ERROR.SUM_ERROR_RAISED
    override fun field6(): Field<ULong?> = EventsErrorsSummaryByUserByError.EVENTS_ERRORS_SUMMARY_BY_USER_BY_ERROR.SUM_ERROR_HANDLED
    override fun field7(): Field<LocalDateTime?> = EventsErrorsSummaryByUserByError.EVENTS_ERRORS_SUMMARY_BY_USER_BY_ERROR.FIRST_SEEN
    override fun field8(): Field<LocalDateTime?> = EventsErrorsSummaryByUserByError.EVENTS_ERRORS_SUMMARY_BY_USER_BY_ERROR.LAST_SEEN
    override fun component1(): String? = user
    override fun component2(): Int? = errorNumber
    override fun component3(): String? = errorName
    override fun component4(): String? = sqlState
    override fun component5(): ULong? = sumErrorRaised
    override fun component6(): ULong? = sumErrorHandled
    override fun component7(): LocalDateTime? = firstSeen
    override fun component8(): LocalDateTime? = lastSeen
    override fun value1(): String? = user
    override fun value2(): Int? = errorNumber
    override fun value3(): String? = errorName
    override fun value4(): String? = sqlState
    override fun value5(): ULong? = sumErrorRaised
    override fun value6(): ULong? = sumErrorHandled
    override fun value7(): LocalDateTime? = firstSeen
    override fun value8(): LocalDateTime? = lastSeen

    override fun value1(value: String?): EventsErrorsSummaryByUserByErrorRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): EventsErrorsSummaryByUserByErrorRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): EventsErrorsSummaryByUserByErrorRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): EventsErrorsSummaryByUserByErrorRecord {
        set(3, value)
        return this
    }

    override fun value5(value: ULong?): EventsErrorsSummaryByUserByErrorRecord {
        set(4, value)
        return this
    }

    override fun value6(value: ULong?): EventsErrorsSummaryByUserByErrorRecord {
        set(5, value)
        return this
    }

    override fun value7(value: LocalDateTime?): EventsErrorsSummaryByUserByErrorRecord {
        set(6, value)
        return this
    }

    override fun value8(value: LocalDateTime?): EventsErrorsSummaryByUserByErrorRecord {
        set(7, value)
        return this
    }

    override fun values(value1: String?, value2: Int?, value3: String?, value4: String?, value5: ULong?, value6: ULong?, value7: LocalDateTime?, value8: LocalDateTime?): EventsErrorsSummaryByUserByErrorRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised EventsErrorsSummaryByUserByErrorRecord
     */
    constructor(user: String? = null, errorNumber: Int? = null, errorName: String? = null, sqlState: String? = null, sumErrorRaised: ULong? = null, sumErrorHandled: ULong? = null, firstSeen: LocalDateTime? = null, lastSeen: LocalDateTime? = null): this() {
        this.user = user
        this.errorNumber = errorNumber
        this.errorName = errorName
        this.sqlState = sqlState
        this.sumErrorRaised = sumErrorRaised
        this.sumErrorHandled = sumErrorHandled
        this.firstSeen = firstSeen
        this.lastSeen = lastSeen
        resetChangedOnNotNull()
    }
}
