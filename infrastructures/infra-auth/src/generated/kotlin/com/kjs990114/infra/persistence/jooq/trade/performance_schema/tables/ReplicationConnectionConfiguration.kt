/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationConnectionConfigurationAutoPosition
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationConnectionConfigurationGetPublicKey
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationConnectionConfigurationGtidOnly
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationConnectionConfigurationSourceConnectionAutoFailover
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationConnectionConfigurationSslAllowed
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationConnectionConfigurationSslVerifyServerCertificate
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_REPLICATION_CONNECTION_CONFIGURATION_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.ReplicationConnectionConfigurationRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationConnectionConfiguration(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ReplicationConnectionConfigurationRecord>?,
    parentPath: InverseForeignKey<out Record, ReplicationConnectionConfigurationRecord>?,
    aliased: Table<ReplicationConnectionConfigurationRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ReplicationConnectionConfigurationRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>performance_schema.replication_connection_configuration</code>
         */
        val REPLICATION_CONNECTION_CONFIGURATION: ReplicationConnectionConfiguration = ReplicationConnectionConfiguration()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ReplicationConnectionConfigurationRecord> = ReplicationConnectionConfigurationRecord::class.java

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.CHANNEL_NAME</code>.
     */
    val CHANNEL_NAME: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.HOST</code>.
     */
    val HOST: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("HOST"), SQLDataType.CHAR(255).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.PORT</code>.
     */
    val PORT: TableField<ReplicationConnectionConfigurationRecord, Int?> = createField(DSL.name("PORT"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.USER</code>.
     */
    val USER: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("USER"), SQLDataType.CHAR(32).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.NETWORK_INTERFACE</code>.
     */
    val NETWORK_INTERFACE: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("NETWORK_INTERFACE"), SQLDataType.CHAR(60).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.AUTO_POSITION</code>.
     */
    val AUTO_POSITION: TableField<ReplicationConnectionConfigurationRecord, ReplicationConnectionConfigurationAutoPosition?> = createField(DSL.name("AUTO_POSITION"), SQLDataType.VARCHAR(1).nullable(false).asEnumDataType(ReplicationConnectionConfigurationAutoPosition::class.java), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SSL_ALLOWED</code>.
     */
    val SSL_ALLOWED: TableField<ReplicationConnectionConfigurationRecord, ReplicationConnectionConfigurationSslAllowed?> = createField(DSL.name("SSL_ALLOWED"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(ReplicationConnectionConfigurationSslAllowed::class.java), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SSL_CA_FILE</code>.
     */
    val SSL_CA_FILE: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("SSL_CA_FILE"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SSL_CA_PATH</code>.
     */
    val SSL_CA_PATH: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("SSL_CA_PATH"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SSL_CERTIFICATE</code>.
     */
    val SSL_CERTIFICATE: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("SSL_CERTIFICATE"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SSL_CIPHER</code>.
     */
    val SSL_CIPHER: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("SSL_CIPHER"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SSL_KEY</code>.
     */
    val SSL_KEY: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("SSL_KEY"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SSL_VERIFY_SERVER_CERTIFICATE</code>.
     */
    val SSL_VERIFY_SERVER_CERTIFICATE: TableField<ReplicationConnectionConfigurationRecord, ReplicationConnectionConfigurationSslVerifyServerCertificate?> = createField(DSL.name("SSL_VERIFY_SERVER_CERTIFICATE"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(ReplicationConnectionConfigurationSslVerifyServerCertificate::class.java), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SSL_CRL_FILE</code>.
     */
    val SSL_CRL_FILE: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("SSL_CRL_FILE"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SSL_CRL_PATH</code>.
     */
    val SSL_CRL_PATH: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("SSL_CRL_PATH"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.CONNECTION_RETRY_INTERVAL</code>.
     */
    val CONNECTION_RETRY_INTERVAL: TableField<ReplicationConnectionConfigurationRecord, Int?> = createField(DSL.name("CONNECTION_RETRY_INTERVAL"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.CONNECTION_RETRY_COUNT</code>.
     */
    val CONNECTION_RETRY_COUNT: TableField<ReplicationConnectionConfigurationRecord, ULong?> = createField(DSL.name("CONNECTION_RETRY_COUNT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.HEARTBEAT_INTERVAL</code>.
     * Number of seconds after which a heartbeat will be sent .
     */
    val HEARTBEAT_INTERVAL: TableField<ReplicationConnectionConfigurationRecord, Double?> = createField(DSL.name("HEARTBEAT_INTERVAL"), SQLDataType.DOUBLE.nullable(false), this, "Number of seconds after which a heartbeat will be sent .")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.TLS_VERSION</code>.
     */
    val TLS_VERSION: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("TLS_VERSION"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.PUBLIC_KEY_PATH</code>.
     */
    val PUBLIC_KEY_PATH: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("PUBLIC_KEY_PATH"), SQLDataType.VARCHAR(512).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.GET_PUBLIC_KEY</code>.
     */
    val GET_PUBLIC_KEY: TableField<ReplicationConnectionConfigurationRecord, ReplicationConnectionConfigurationGetPublicKey?> = createField(DSL.name("GET_PUBLIC_KEY"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(ReplicationConnectionConfigurationGetPublicKey::class.java), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.NETWORK_NAMESPACE</code>.
     */
    val NETWORK_NAMESPACE: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("NETWORK_NAMESPACE"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.COMPRESSION_ALGORITHM</code>.
     * Compression algorithm used for data transfer between master and slave.
     */
    val COMPRESSION_ALGORITHM: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("COMPRESSION_ALGORITHM"), SQLDataType.CHAR(64).nullable(false), this, "Compression algorithm used for data transfer between master and slave.")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.ZSTD_COMPRESSION_LEVEL</code>.
     * Compression level associated with zstd compression algorithm.
     */
    val ZSTD_COMPRESSION_LEVEL: TableField<ReplicationConnectionConfigurationRecord, Int?> = createField(DSL.name("ZSTD_COMPRESSION_LEVEL"), SQLDataType.INTEGER.nullable(false), this, "Compression level associated with zstd compression algorithm.")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.TLS_CIPHERSUITES</code>.
     */
    val TLS_CIPHERSUITES: TableField<ReplicationConnectionConfigurationRecord, String?> = createField(DSL.name("TLS_CIPHERSUITES"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.SOURCE_CONNECTION_AUTO_FAILOVER</code>.
     */
    val SOURCE_CONNECTION_AUTO_FAILOVER: TableField<ReplicationConnectionConfigurationRecord, ReplicationConnectionConfigurationSourceConnectionAutoFailover?> = createField(DSL.name("SOURCE_CONNECTION_AUTO_FAILOVER"), SQLDataType.VARCHAR(1).nullable(false).asEnumDataType(ReplicationConnectionConfigurationSourceConnectionAutoFailover::class.java), this, "")

    /**
     * The column
     * <code>performance_schema.replication_connection_configuration.GTID_ONLY</code>.
     * Indicates if this channel only uses GTIDs and does not persist positions.
     */
    val GTID_ONLY: TableField<ReplicationConnectionConfigurationRecord, ReplicationConnectionConfigurationGtidOnly?> = createField(DSL.name("GTID_ONLY"), SQLDataType.VARCHAR(1).nullable(false).asEnumDataType(ReplicationConnectionConfigurationGtidOnly::class.java), this, "Indicates if this channel only uses GTIDs and does not persist positions.")

    private constructor(alias: Name, aliased: Table<ReplicationConnectionConfigurationRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ReplicationConnectionConfigurationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ReplicationConnectionConfigurationRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>performance_schema.replication_connection_configuration</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>performance_schema.replication_connection_configuration</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a
     * <code>performance_schema.replication_connection_configuration</code>
     * table reference
     */
    constructor(): this(DSL.name("replication_connection_configuration"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getPrimaryKey(): UniqueKey<ReplicationConnectionConfigurationRecord> = KEY_REPLICATION_CONNECTION_CONFIGURATION_PRIMARY
    override fun `as`(alias: String): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(DSL.name(alias), this)
    override fun `as`(alias: Name): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(alias, this)
    override fun `as`(alias: Table<*>): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ReplicationConnectionConfiguration = ReplicationConnectionConfiguration(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ReplicationConnectionConfiguration = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ReplicationConnectionConfiguration = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ReplicationConnectionConfiguration = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ReplicationConnectionConfiguration = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ReplicationConnectionConfiguration = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ReplicationConnectionConfiguration = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ReplicationConnectionConfiguration = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ReplicationConnectionConfiguration = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ReplicationConnectionConfiguration = where(DSL.notExists(select))
}
