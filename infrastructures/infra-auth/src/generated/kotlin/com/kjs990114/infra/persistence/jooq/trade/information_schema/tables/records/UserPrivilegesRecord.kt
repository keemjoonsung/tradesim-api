/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.UserPrivileges

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserPrivilegesRecord() : TableRecordImpl<UserPrivilegesRecord>(UserPrivileges.USER_PRIVILEGES), Record4<String?, String?, String?, String?> {

    open var grantee: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableCatalog: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var privilegeType: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsGrantable")
    open var isGrantable: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, String?, String?> = super.fieldsRow() as Row4<String?, String?, String?, String?>
    override fun valuesRow(): Row4<String?, String?, String?, String?> = super.valuesRow() as Row4<String?, String?, String?, String?>
    override fun field1(): Field<String?> = UserPrivileges.USER_PRIVILEGES.GRANTEE
    override fun field2(): Field<String?> = UserPrivileges.USER_PRIVILEGES.TABLE_CATALOG
    override fun field3(): Field<String?> = UserPrivileges.USER_PRIVILEGES.PRIVILEGE_TYPE
    override fun field4(): Field<String?> = UserPrivileges.USER_PRIVILEGES.IS_GRANTABLE
    override fun component1(): String? = grantee
    override fun component2(): String? = tableCatalog
    override fun component3(): String? = privilegeType
    override fun component4(): String? = isGrantable
    override fun value1(): String? = grantee
    override fun value2(): String? = tableCatalog
    override fun value3(): String? = privilegeType
    override fun value4(): String? = isGrantable

    override fun value1(value: String?): UserPrivilegesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): UserPrivilegesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): UserPrivilegesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): UserPrivilegesRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?): UserPrivilegesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised UserPrivilegesRecord
     */
    constructor(grantee: String? = null, tableCatalog: String? = null, privilegeType: String? = null, isGrantable: String? = null): this() {
        this.grantee = grantee
        this.tableCatalog = tableCatalog
        this.privilegeType = privilegeType
        this.isGrantable = isGrantable
        resetChangedOnNotNull()
    }
}
