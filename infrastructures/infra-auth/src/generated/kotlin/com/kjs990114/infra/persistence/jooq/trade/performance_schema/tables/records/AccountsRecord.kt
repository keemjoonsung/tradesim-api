/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.Accounts

import org.jooq.Field
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountsRecord() : TableRecordImpl<AccountsRecord>(Accounts.ACCOUNTS), Record6<String?, String?, Long?, Long?, ULong?, ULong?> {

    open var user: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var host: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var currentConnections: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var totalConnections: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var maxSessionControlledMemory: ULong?
        set(value): Unit = set(4, value)
        get(): ULong? = get(4) as ULong?

    open var maxSessionTotalMemory: ULong?
        set(value): Unit = set(5, value)
        get(): ULong? = get(5) as ULong?

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<String?, String?, Long?, Long?, ULong?, ULong?> = super.fieldsRow() as Row6<String?, String?, Long?, Long?, ULong?, ULong?>
    override fun valuesRow(): Row6<String?, String?, Long?, Long?, ULong?, ULong?> = super.valuesRow() as Row6<String?, String?, Long?, Long?, ULong?, ULong?>
    override fun field1(): Field<String?> = Accounts.ACCOUNTS.USER
    override fun field2(): Field<String?> = Accounts.ACCOUNTS.HOST
    override fun field3(): Field<Long?> = Accounts.ACCOUNTS.CURRENT_CONNECTIONS
    override fun field4(): Field<Long?> = Accounts.ACCOUNTS.TOTAL_CONNECTIONS
    override fun field5(): Field<ULong?> = Accounts.ACCOUNTS.MAX_SESSION_CONTROLLED_MEMORY
    override fun field6(): Field<ULong?> = Accounts.ACCOUNTS.MAX_SESSION_TOTAL_MEMORY
    override fun component1(): String? = user
    override fun component2(): String? = host
    override fun component3(): Long? = currentConnections
    override fun component4(): Long? = totalConnections
    override fun component5(): ULong? = maxSessionControlledMemory
    override fun component6(): ULong? = maxSessionTotalMemory
    override fun value1(): String? = user
    override fun value2(): String? = host
    override fun value3(): Long? = currentConnections
    override fun value4(): Long? = totalConnections
    override fun value5(): ULong? = maxSessionControlledMemory
    override fun value6(): ULong? = maxSessionTotalMemory

    override fun value1(value: String?): AccountsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): AccountsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Long?): AccountsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Long?): AccountsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: ULong?): AccountsRecord {
        set(4, value)
        return this
    }

    override fun value6(value: ULong?): AccountsRecord {
        set(5, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: Long?, value4: Long?, value5: ULong?, value6: ULong?): AccountsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised AccountsRecord
     */
    constructor(user: String? = null, host: String? = null, currentConnections: Long? = null, totalConnections: Long? = null, maxSessionControlledMemory: ULong? = null, maxSessionTotalMemory: ULong? = null): this() {
        this.user = user
        this.host = host
        this.currentConnections = currentConnections
        this.totalConnections = totalConnections
        this.maxSessionControlledMemory = maxSessionControlledMemory
        this.maxSessionTotalMemory = maxSessionTotalMemory
        resetChangedOnNotNull()
    }
}
