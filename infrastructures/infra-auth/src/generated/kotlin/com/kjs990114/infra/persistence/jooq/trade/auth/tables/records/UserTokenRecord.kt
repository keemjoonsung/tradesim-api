/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.auth.tables.records


import com.kjs990114.infra.persistence.jooq.trade.auth.tables.UserToken

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserTokenRecord() : UpdatableRecordImpl<UserTokenRecord>(UserToken.USER_TOKEN), Record8<Long?, Long?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var userId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var accessToken: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var accessExpired: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    open var refreshToken: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var refreshExpired: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Long?, Long?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row8<Long?, Long?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row8<Long?, Long?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row8<Long?, Long?, String?, LocalDateTime?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Long?> = UserToken.USER_TOKEN.ID
    override fun field2(): Field<Long?> = UserToken.USER_TOKEN.USER_ID
    override fun field3(): Field<String?> = UserToken.USER_TOKEN.ACCESS_TOKEN
    override fun field4(): Field<LocalDateTime?> = UserToken.USER_TOKEN.ACCESS_EXPIRED
    override fun field5(): Field<String?> = UserToken.USER_TOKEN.REFRESH_TOKEN
    override fun field6(): Field<LocalDateTime?> = UserToken.USER_TOKEN.REFRESH_EXPIRED
    override fun field7(): Field<LocalDateTime?> = UserToken.USER_TOKEN.CREATED_AT
    override fun field8(): Field<LocalDateTime?> = UserToken.USER_TOKEN.UPDATED_AT
    override fun component1(): Long? = id
    override fun component2(): Long? = userId
    override fun component3(): String? = accessToken
    override fun component4(): LocalDateTime? = accessExpired
    override fun component5(): String? = refreshToken
    override fun component6(): LocalDateTime? = refreshExpired
    override fun component7(): LocalDateTime? = createdAt
    override fun component8(): LocalDateTime? = updatedAt
    override fun value1(): Long? = id
    override fun value2(): Long? = userId
    override fun value3(): String? = accessToken
    override fun value4(): LocalDateTime? = accessExpired
    override fun value5(): String? = refreshToken
    override fun value6(): LocalDateTime? = refreshExpired
    override fun value7(): LocalDateTime? = createdAt
    override fun value8(): LocalDateTime? = updatedAt

    override fun value1(value: Long?): UserTokenRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): UserTokenRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): UserTokenRecord {
        set(2, value)
        return this
    }

    override fun value4(value: LocalDateTime?): UserTokenRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): UserTokenRecord {
        set(4, value)
        return this
    }

    override fun value6(value: LocalDateTime?): UserTokenRecord {
        set(5, value)
        return this
    }

    override fun value7(value: LocalDateTime?): UserTokenRecord {
        set(6, value)
        return this
    }

    override fun value8(value: LocalDateTime?): UserTokenRecord {
        set(7, value)
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: String?, value4: LocalDateTime?, value5: String?, value6: LocalDateTime?, value7: LocalDateTime?, value8: LocalDateTime?): UserTokenRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised UserTokenRecord
     */
    constructor(id: Long? = null, userId: Long? = null, accessToken: String? = null, accessExpired: LocalDateTime? = null, refreshToken: String? = null, refreshExpired: LocalDateTime? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.accessToken = accessToken
        this.accessExpired = accessExpired
        this.refreshToken = refreshToken
        this.refreshExpired = refreshExpired
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }
}
