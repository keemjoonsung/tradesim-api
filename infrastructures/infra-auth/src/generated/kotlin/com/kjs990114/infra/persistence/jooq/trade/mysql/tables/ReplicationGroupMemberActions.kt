/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables


import com.kjs990114.infra.persistence.jooq.trade.mysql.Mysql
import com.kjs990114.infra.persistence.jooq.trade.mysql.indexes.REPLICATION_GROUP_MEMBER_ACTIONS_EVENT
import com.kjs990114.infra.persistence.jooq.trade.mysql.keys.KEY_REPLICATION_GROUP_MEMBER_ACTIONS_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ReplicationGroupMemberActionsRecord

import java.util.function.Function

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UByte


/**
 * The member actions configuration.
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationGroupMemberActions(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ReplicationGroupMemberActionsRecord>?,
    parentPath: InverseForeignKey<out Record, ReplicationGroupMemberActionsRecord>?,
    aliased: Table<ReplicationGroupMemberActionsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ReplicationGroupMemberActionsRecord>(
    alias,
    Mysql.MYSQL,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("The member actions configuration."),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>mysql.replication_group_member_actions</code>
         */
        val REPLICATION_GROUP_MEMBER_ACTIONS: ReplicationGroupMemberActions = ReplicationGroupMemberActions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ReplicationGroupMemberActionsRecord> = ReplicationGroupMemberActionsRecord::class.java

    /**
     * The column <code>mysql.replication_group_member_actions.name</code>. The
     * action name.
     */
    val NAME: TableField<ReplicationGroupMemberActionsRecord, String?> = createField(DSL.name("name"), SQLDataType.CHAR(255).nullable(false), this, "The action name.")

    /**
     * The column <code>mysql.replication_group_member_actions.event</code>. The
     * event that will trigger the action.
     */
    val EVENT: TableField<ReplicationGroupMemberActionsRecord, String?> = createField(DSL.name("event"), SQLDataType.CHAR(64).nullable(false), this, "The event that will trigger the action.")

    /**
     * The column <code>mysql.replication_group_member_actions.enabled</code>.
     * Whether the action is enabled.
     */
    val ENABLED: TableField<ReplicationGroupMemberActionsRecord, Boolean?> = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "Whether the action is enabled.")

    /**
     * The column <code>mysql.replication_group_member_actions.type</code>. The
     * action type.
     */
    val TYPE: TableField<ReplicationGroupMemberActionsRecord, String?> = createField(DSL.name("type"), SQLDataType.CHAR(64).nullable(false), this, "The action type.")

    /**
     * The column <code>mysql.replication_group_member_actions.priority</code>.
     * The order on which the action will be run, value between 1 and 100, lower
     * values first.
     */
    val PRIORITY: TableField<ReplicationGroupMemberActionsRecord, UByte?> = createField(DSL.name("priority"), SQLDataType.TINYINTUNSIGNED.nullable(false), this, "The order on which the action will be run, value between 1 and 100, lower values first.")

    /**
     * The column
     * <code>mysql.replication_group_member_actions.error_handling</code>. On
     * errors during the action will be handled: IGNORE, CRITICAL.
     */
    val ERROR_HANDLING: TableField<ReplicationGroupMemberActionsRecord, String?> = createField(DSL.name("error_handling"), SQLDataType.CHAR(64).nullable(false), this, "On errors during the action will be handled: IGNORE, CRITICAL.")

    private constructor(alias: Name, aliased: Table<ReplicationGroupMemberActionsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ReplicationGroupMemberActionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ReplicationGroupMemberActionsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>mysql.replication_group_member_actions</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mysql.replication_group_member_actions</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mysql.replication_group_member_actions</code> table
     * reference
     */
    constructor(): this(DSL.name("replication_group_member_actions"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Mysql.MYSQL
    override fun getIndexes(): List<Index> = listOf(REPLICATION_GROUP_MEMBER_ACTIONS_EVENT)
    override fun getPrimaryKey(): UniqueKey<ReplicationGroupMemberActionsRecord> = KEY_REPLICATION_GROUP_MEMBER_ACTIONS_PRIMARY
    override fun `as`(alias: String): ReplicationGroupMemberActions = ReplicationGroupMemberActions(DSL.name(alias), this)
    override fun `as`(alias: Name): ReplicationGroupMemberActions = ReplicationGroupMemberActions(alias, this)
    override fun `as`(alias: Table<*>): ReplicationGroupMemberActions = ReplicationGroupMemberActions(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReplicationGroupMemberActions = ReplicationGroupMemberActions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReplicationGroupMemberActions = ReplicationGroupMemberActions(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ReplicationGroupMemberActions = ReplicationGroupMemberActions(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ReplicationGroupMemberActions = ReplicationGroupMemberActions(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ReplicationGroupMemberActions = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ReplicationGroupMemberActions = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ReplicationGroupMemberActions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ReplicationGroupMemberActions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ReplicationGroupMemberActions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ReplicationGroupMemberActions = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ReplicationGroupMemberActions = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ReplicationGroupMemberActions = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ReplicationGroupMemberActions = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<String?, String?, Boolean?, String?, UByte?, String?> = super.fieldsRow() as Row6<String?, String?, Boolean?, String?, UByte?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, Boolean?, String?, UByte?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, Boolean?, String?, UByte?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
