/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys

import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 * Description
 * -----------
 * 
 * Tests whether the table specified in in_db and in_table exists either as a
 * regular
 * table, or as a temporary table. The returned value corresponds to the table
 * that
 * will be used, so if there's both a temporary and a permanent table with the
 * given
 * name, then 'TEMPORARY' will be returned.
 * 
 * Parameters
 * -----------
 * 
 * in_db (VARCHAR(64)):
 *   The database name to check for the existance of the table in.
 * 
 * in_table (VARCHAR(64)):
 *   The name of the table to check the existance of.
 * 
 * out_exists ENUM('', 'BASE TABLE', 'VIEW', 'TEMPORARY'):
 *   The return value: whether the table exists. The value is one of:
 *     * ''           - the table does not exist neither as a base table, view,
 * nor temporary table.
 *     * 'BASE TABLE' - the table name exists as a permanent base table table.
 *     * 'VIEW'       - the table name exists as a view.
 *     * 'TEMPORARY'  - the table name exists as a temporary table.
 * 
 * Example
 * --------
 * 
 * mysql&gt; CREATE DATABASE db1;
 * Query OK, 1 row affected (0.07 sec)
 * 
 * mysql&gt; use db1;
 * Database changed
 * mysql&gt; CREATE TABLE t1 (id INT PRIMARY KEY);
 * Query OK, 0 rows affected (0.08 sec)
 * 
 * mysql&gt; CREATE TABLE t2 (id INT PRIMARY KEY);
 * Query OK, 0 rows affected (0.08 sec)
 * 
 * mysql&gt; CREATE view v_t1 AS SELECT * FROM t1;
 * Query OK, 0 rows affected (0.00 sec)
 * 
 * mysql&gt; CREATE TEMPORARY TABLE t1 (id INT PRIMARY KEY);
 * Query OK, 0 rows affected (0.00 sec)
 * 
 * mysql&gt; CALL sys.table_exists('db1', 't1', @exists); SELECT @exists;
 * Query OK, 0 rows affected (0.00 sec)
 * 
 * +------------+
 * | @exists    |
 * +------------+
 * | TEMPORARY  |
 * +------------+
 * 1 row in set (0.00 sec)
 * 
 * mysql&gt; CALL sys.table_exists('db1', 't2', @exists); SELECT @exists;
 * Query OK, 0 rows affected (0.00 sec)
 * 
 * +------------+
 * | @exists    |
 * +------------+
 * | BASE TABLE |
 * +------------+
 * 1 row in set (0.01 sec)
 * 
 * mysql&gt; CALL sys.table_exists('db1', 'v_t1', @exists); SELECT @exists;
 * Query OK, 0 rows affected (0.00 sec)
 * 
 * +---------+
 * | @exists |
 * +---------+
 * | VIEW    |
 * +---------+
 * 1 row in set (0.00 sec)
 * 
 * mysql&gt; CALL sys.table_exists('db1', 't3', @exists); SELECT @exists;
 * Query OK, 0 rows affected (0.01 sec)
 * 
 * +---------+
 * | @exists |
 * +---------+
 * |         |
 * +---------+
 * 1 row in set (0.00 sec)

 */
@Suppress("UNCHECKED_CAST")
open class TableExists : AbstractRoutine<java.lang.Void>("table_exists", Sys.SYS) {
    companion object {

        /**
         * The parameter <code>sys.table_exists.in_db</code>.
         */
        val IN_DB: Parameter<String?> = Internal.createParameter("in_db", SQLDataType.VARCHAR(64), false, false)

        /**
         * The parameter <code>sys.table_exists.in_table</code>.
         */
        val IN_TABLE: Parameter<String?> = Internal.createParameter("in_table", SQLDataType.VARCHAR(64), false, false)

        /**
         * The parameter <code>sys.table_exists.out_exists</code>.
         */
        val OUT_EXISTS: Parameter<String?> = Internal.createParameter("out_exists", SQLDataType.VARCHAR(10), false, false)
    }

    init {
        addInParameter(TableExists.IN_DB)
        addInParameter(TableExists.IN_TABLE)
        addOutParameter(TableExists.OUT_EXISTS)
    }

    /**
     * Set the <code>in_db</code> parameter IN value to the routine
     */
    fun setInDb(value: String?): Unit = setValue(TableExists.IN_DB, value)

    /**
     * Set the <code>in_table</code> parameter IN value to the routine
     */
    fun setInTable(value: String?): Unit = setValue(TableExists.IN_TABLE, value)

    /**
     * Get the <code>out_exists</code> parameter OUT value from the routine
     */
    fun getOutExists(): String? = get(TableExists.OUT_EXISTS)
}
