/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 * Description
 * -----------
 * 
 * Takes a raw path value, and strips out the datadir or tmpdir
 * replacing with @@datadir and @@tmpdir respectively.
 * 
 * Also normalizes the paths across operating systems, so backslashes
 * on Windows are converted to forward slashes
 * 
 * Parameters
 * -----------
 * 
 * path (VARCHAR(512)):
 *   The raw file path value to format.
 * 
 * Returns
 * -----------
 * 
 * VARCHAR(512) CHARSET UTF8MB4
 * 
 * Example
 * -----------
 * 
 * mysql&gt; select @@datadir;
 * +-----------------------------------------------+
 * | @@datadir                                     |
 * +-----------------------------------------------+
 * | /Users/mark/sandboxes/SmallTree/AMaster/data/ |
 * +-----------------------------------------------+
 * 1 row in set (0.06 sec)
 * 
 * mysql&gt; select
 * format_path('/Users/mark/sandboxes/SmallTree/AMaster/data/mysql/proc.MYD') AS
 * path;
 * +--------------------------+
 * | path                     |
 * +--------------------------+
 * | @@datadir/mysql/proc.MYD |
 * +--------------------------+
 * 1 row in set (0.03 sec)

 */
@Suppress("UNCHECKED_CAST")
open class FormatPath : AbstractRoutine<String>("format_path", Sys.SYS, SQLDataType.VARCHAR(512)) {
    companion object {

        /**
         * The parameter <code>sys.format_path.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.VARCHAR(512), false, false)

        /**
         * The parameter <code>sys.format_path.in_path</code>.
         */
        val IN_PATH: Parameter<String?> = Internal.createParameter("in_path", SQLDataType.VARCHAR(512), false, false)
    }

    init {
        returnParameter = FormatPath.RETURN_VALUE
        addInParameter(FormatPath.IN_PATH)
    }

    /**
     * Set the <code>in_path</code> parameter IN value to the routine
     */
    fun setInPath(value: String?): Unit = setValue(FormatPath.IN_PATH, value)

    /**
     * Set the <code>in_path</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setInPath(field: Field<String?>): FormatPath {
        setField(FormatPath.IN_PATH, field)
        return this
    }
}
