/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import com.kjs990114.infra.persistence.jooq.trade.sys.tables.SchemaTableStatisticsWithBuffer

import java.math.BigInteger

import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SchemaTableStatisticsWithBufferRecord() : TableRecordImpl<SchemaTableStatisticsWithBufferRecord>(SchemaTableStatisticsWithBuffer.SCHEMA_TABLE_STATISTICS_WITH_BUFFER) {

    open var tableSchema: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var rowsFetched: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var fetchLatency: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var rowsInserted: ULong?
        set(value): Unit = set(4, value)
        get(): ULong? = get(4) as ULong?

    open var insertLatency: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var rowsUpdated: ULong?
        set(value): Unit = set(6, value)
        get(): ULong? = get(6) as ULong?

    open var updateLatency: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var rowsDeleted: ULong?
        set(value): Unit = set(8, value)
        get(): ULong? = get(8) as ULong?

    open var deleteLatency: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var ioReadRequests: BigInteger?
        set(value): Unit = set(10, value)
        get(): BigInteger? = get(10) as BigInteger?

    open var ioRead: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    open var ioReadLatency: String?
        set(value): Unit = set(12, value)
        get(): String? = get(12) as String?

    open var ioWriteRequests: BigInteger?
        set(value): Unit = set(13, value)
        get(): BigInteger? = get(13) as BigInteger?

    open var ioWrite: String?
        set(value): Unit = set(14, value)
        get(): String? = get(14) as String?

    open var ioWriteLatency: String?
        set(value): Unit = set(15, value)
        get(): String? = get(15) as String?

    open var ioMiscRequests: BigInteger?
        set(value): Unit = set(16, value)
        get(): BigInteger? = get(16) as BigInteger?

    open var ioMiscLatency: String?
        set(value): Unit = set(17, value)
        get(): String? = get(17) as String?

    open var innodbBufferAllocated: String?
        set(value): Unit = set(18, value)
        get(): String? = get(18) as String?

    open var innodbBufferData: String?
        set(value): Unit = set(19, value)
        get(): String? = get(19) as String?

    open var innodbBufferFree: String?
        set(value): Unit = set(20, value)
        get(): String? = get(20) as String?

    open var innodbBufferPages: Long?
        set(value): Unit = set(21, value)
        get(): Long? = get(21) as Long?

    open var innodbBufferPagesHashed: Long?
        set(value): Unit = set(22, value)
        get(): Long? = get(22) as Long?

    open var innodbBufferPagesOld: Long?
        set(value): Unit = set(23, value)
        get(): Long? = get(23) as Long?

    open var innodbBufferRowsCached: BigInteger?
        set(value): Unit = set(24, value)
        get(): BigInteger? = get(24) as BigInteger?

    /**
     * Create a detached, initialised SchemaTableStatisticsWithBufferRecord
     */
    constructor(tableSchema: String? = null, tableName: String? = null, rowsFetched: ULong? = null, fetchLatency: String? = null, rowsInserted: ULong? = null, insertLatency: String? = null, rowsUpdated: ULong? = null, updateLatency: String? = null, rowsDeleted: ULong? = null, deleteLatency: String? = null, ioReadRequests: BigInteger? = null, ioRead: String? = null, ioReadLatency: String? = null, ioWriteRequests: BigInteger? = null, ioWrite: String? = null, ioWriteLatency: String? = null, ioMiscRequests: BigInteger? = null, ioMiscLatency: String? = null, innodbBufferAllocated: String? = null, innodbBufferData: String? = null, innodbBufferFree: String? = null, innodbBufferPages: Long? = null, innodbBufferPagesHashed: Long? = null, innodbBufferPagesOld: Long? = null, innodbBufferRowsCached: BigInteger? = null): this() {
        this.tableSchema = tableSchema
        this.tableName = tableName
        this.rowsFetched = rowsFetched
        this.fetchLatency = fetchLatency
        this.rowsInserted = rowsInserted
        this.insertLatency = insertLatency
        this.rowsUpdated = rowsUpdated
        this.updateLatency = updateLatency
        this.rowsDeleted = rowsDeleted
        this.deleteLatency = deleteLatency
        this.ioReadRequests = ioReadRequests
        this.ioRead = ioRead
        this.ioReadLatency = ioReadLatency
        this.ioWriteRequests = ioWriteRequests
        this.ioWrite = ioWrite
        this.ioWriteLatency = ioWriteLatency
        this.ioMiscRequests = ioMiscRequests
        this.ioMiscLatency = ioMiscLatency
        this.innodbBufferAllocated = innodbBufferAllocated
        this.innodbBufferData = innodbBufferData
        this.innodbBufferFree = innodbBufferFree
        this.innodbBufferPages = innodbBufferPages
        this.innodbBufferPagesHashed = innodbBufferPagesHashed
        this.innodbBufferPagesOld = innodbBufferPagesOld
        this.innodbBufferRowsCached = innodbBufferRowsCached
        resetChangedOnNotNull()
    }
}
