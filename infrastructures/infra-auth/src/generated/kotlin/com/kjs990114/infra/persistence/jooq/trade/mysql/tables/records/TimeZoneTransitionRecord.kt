/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneTransition

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger


/**
 * Time zone transitions
 */
@Suppress("UNCHECKED_CAST")
open class TimeZoneTransitionRecord() : UpdatableRecordImpl<TimeZoneTransitionRecord>(TimeZoneTransition.TIME_ZONE_TRANSITION), Record3<UInteger?, Long?, UInteger?> {

    open var timeZoneId: UInteger?
        set(value): Unit = set(0, value)
        get(): UInteger? = get(0) as UInteger?

    open var transitionTime: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var transitionTypeId: UInteger?
        set(value): Unit = set(2, value)
        get(): UInteger? = get(2) as UInteger?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<UInteger?, Long?> = super.key() as Record2<UInteger?, Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UInteger?, Long?, UInteger?> = super.fieldsRow() as Row3<UInteger?, Long?, UInteger?>
    override fun valuesRow(): Row3<UInteger?, Long?, UInteger?> = super.valuesRow() as Row3<UInteger?, Long?, UInteger?>
    override fun field1(): Field<UInteger?> = TimeZoneTransition.TIME_ZONE_TRANSITION.TIME_ZONE_ID
    override fun field2(): Field<Long?> = TimeZoneTransition.TIME_ZONE_TRANSITION.TRANSITION_TIME
    override fun field3(): Field<UInteger?> = TimeZoneTransition.TIME_ZONE_TRANSITION.TRANSITION_TYPE_ID
    override fun component1(): UInteger? = timeZoneId
    override fun component2(): Long? = transitionTime
    override fun component3(): UInteger? = transitionTypeId
    override fun value1(): UInteger? = timeZoneId
    override fun value2(): Long? = transitionTime
    override fun value3(): UInteger? = transitionTypeId

    override fun value1(value: UInteger?): TimeZoneTransitionRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): TimeZoneTransitionRecord {
        set(1, value)
        return this
    }

    override fun value3(value: UInteger?): TimeZoneTransitionRecord {
        set(2, value)
        return this
    }

    override fun values(value1: UInteger?, value2: Long?, value3: UInteger?): TimeZoneTransitionRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised TimeZoneTransitionRecord
     */
    constructor(timeZoneId: UInteger? = null, transitionTime: Long? = null, transitionTypeId: UInteger? = null): this() {
        this.timeZoneId = timeZoneId
        this.transitionTime = transitionTime
        this.transitionTypeId = transitionTypeId
        resetChangedOnNotNull()
    }
}
