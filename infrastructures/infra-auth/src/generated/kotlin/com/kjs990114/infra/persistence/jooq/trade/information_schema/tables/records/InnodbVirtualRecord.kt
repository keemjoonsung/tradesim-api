/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbVirtual

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbVirtualRecord() : TableRecordImpl<InnodbVirtualRecord>(InnodbVirtual.INNODB_VIRTUAL), Record3<ULong?, UInteger?, UInteger?> {

    open var tableId: ULong?
        set(value): Unit = set(0, value)
        get(): ULong? = get(0) as ULong?

    open var pos: UInteger?
        set(value): Unit = set(1, value)
        get(): UInteger? = get(1) as UInteger?

    open var basePos: UInteger?
        set(value): Unit = set(2, value)
        get(): UInteger? = get(2) as UInteger?

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<ULong?, UInteger?, UInteger?> = super.fieldsRow() as Row3<ULong?, UInteger?, UInteger?>
    override fun valuesRow(): Row3<ULong?, UInteger?, UInteger?> = super.valuesRow() as Row3<ULong?, UInteger?, UInteger?>
    override fun field1(): Field<ULong?> = InnodbVirtual.INNODB_VIRTUAL.TABLE_ID
    override fun field2(): Field<UInteger?> = InnodbVirtual.INNODB_VIRTUAL.POS
    override fun field3(): Field<UInteger?> = InnodbVirtual.INNODB_VIRTUAL.BASE_POS
    override fun component1(): ULong? = tableId
    override fun component2(): UInteger? = pos
    override fun component3(): UInteger? = basePos
    override fun value1(): ULong? = tableId
    override fun value2(): UInteger? = pos
    override fun value3(): UInteger? = basePos

    override fun value1(value: ULong?): InnodbVirtualRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UInteger?): InnodbVirtualRecord {
        set(1, value)
        return this
    }

    override fun value3(value: UInteger?): InnodbVirtualRecord {
        set(2, value)
        return this
    }

    override fun values(value1: ULong?, value2: UInteger?, value3: UInteger?): InnodbVirtualRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised InnodbVirtualRecord
     */
    constructor(tableId: ULong? = null, pos: UInteger? = null, basePos: UInteger? = null): this() {
        this.tableId = tableId
        this.pos = pos
        this.basePos = basePos
        resetChangedOnNotNull()
    }
}
