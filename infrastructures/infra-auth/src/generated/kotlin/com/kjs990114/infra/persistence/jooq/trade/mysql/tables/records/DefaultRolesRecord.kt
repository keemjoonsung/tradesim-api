/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.DefaultRoles

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * Default roles
 */
@Suppress("UNCHECKED_CAST")
open class DefaultRolesRecord() : UpdatableRecordImpl<DefaultRolesRecord>(DefaultRoles.DEFAULT_ROLES), Record4<String?, String?, String?, String?> {

    open var host: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var user: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var defaultRoleHost: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var defaultRoleUser: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record4<String?, String?, String?, String?> = super.key() as Record4<String?, String?, String?, String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, String?, String?> = super.fieldsRow() as Row4<String?, String?, String?, String?>
    override fun valuesRow(): Row4<String?, String?, String?, String?> = super.valuesRow() as Row4<String?, String?, String?, String?>
    override fun field1(): Field<String?> = DefaultRoles.DEFAULT_ROLES.HOST
    override fun field2(): Field<String?> = DefaultRoles.DEFAULT_ROLES.USER
    override fun field3(): Field<String?> = DefaultRoles.DEFAULT_ROLES.DEFAULT_ROLE_HOST
    override fun field4(): Field<String?> = DefaultRoles.DEFAULT_ROLES.DEFAULT_ROLE_USER
    override fun component1(): String? = host
    override fun component2(): String? = user
    override fun component3(): String? = defaultRoleHost
    override fun component4(): String? = defaultRoleUser
    override fun value1(): String? = host
    override fun value2(): String? = user
    override fun value3(): String? = defaultRoleHost
    override fun value4(): String? = defaultRoleUser

    override fun value1(value: String?): DefaultRolesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): DefaultRolesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): DefaultRolesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): DefaultRolesRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?): DefaultRolesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised DefaultRolesRecord
     */
    constructor(host: String? = null, user: String? = null, defaultRoleHost: String? = null, defaultRoleUser: String? = null): this() {
        this.host = host
        this.user = user
        this.defaultRoleHost = defaultRoleHost
        this.defaultRoleUser = defaultRoleUser
        resetChangedOnNotNull()
    }
}
