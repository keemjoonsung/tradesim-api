/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys
import com.kjs990114.infra.persistence.jooq.trade.sys.tables.records.SchemaTableLockWaitsRecord

import java.util.function.Function

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row18
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SchemaTableLockWaits(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SchemaTableLockWaitsRecord>?,
    parentPath: InverseForeignKey<out Record, SchemaTableLockWaitsRecord>?,
    aliased: Table<SchemaTableLockWaitsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SchemaTableLockWaitsRecord>(
    alias,
    Sys.SYS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view `schema_table_lock_waits` as select `g`.`OBJECT_SCHEMA` AS `object_schema`,`g`.`OBJECT_NAME` AS `object_name`,`pt`.`THREAD_ID` AS `waiting_thread_id`,`pt`.`PROCESSLIST_ID` AS `waiting_pid`,`sys`.`ps_thread_account`(`p`.`OWNER_THREAD_ID`) AS `waiting_account`,`p`.`LOCK_TYPE` AS `waiting_lock_type`,`p`.`LOCK_DURATION` AS `waiting_lock_duration`,`sys`.`format_statement`(`pt`.`PROCESSLIST_INFO`) AS `waiting_query`,`pt`.`PROCESSLIST_TIME` AS `waiting_query_secs`,`ps`.`ROWS_AFFECTED` AS `waiting_query_rows_affected`,`ps`.`ROWS_EXAMINED` AS `waiting_query_rows_examined`,`gt`.`THREAD_ID` AS `blocking_thread_id`,`gt`.`PROCESSLIST_ID` AS `blocking_pid`,`sys`.`ps_thread_account`(`g`.`OWNER_THREAD_ID`) AS `blocking_account`,`g`.`LOCK_TYPE` AS `blocking_lock_type`,`g`.`LOCK_DURATION` AS `blocking_lock_duration`,concat('KILL QUERY ',`gt`.`PROCESSLIST_ID`) AS `sql_kill_blocking_query`,concat('KILL ',`gt`.`PROCESSLIST_ID`) AS `sql_kill_blocking_connection` from (((((`performance_schema`.`metadata_locks` `g` join `performance_schema`.`metadata_locks` `p` on(((`g`.`OBJECT_TYPE` = `p`.`OBJECT_TYPE`) and (`g`.`OBJECT_SCHEMA` = `p`.`OBJECT_SCHEMA`) and (`g`.`OBJECT_NAME` = `p`.`OBJECT_NAME`) and (`g`.`LOCK_STATUS` = 'GRANTED') and (`p`.`LOCK_STATUS` = 'PENDING')))) join `performance_schema`.`threads` `gt` on((`g`.`OWNER_THREAD_ID` = `gt`.`THREAD_ID`))) join `performance_schema`.`threads` `pt` on((`p`.`OWNER_THREAD_ID` = `pt`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `gs` on((`g`.`OWNER_THREAD_ID` = `gs`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `ps` on((`p`.`OWNER_THREAD_ID` = `ps`.`THREAD_ID`))) where (`g`.`OBJECT_TYPE` = 'TABLE')"),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>sys.schema_table_lock_waits</code>
         */
        val SCHEMA_TABLE_LOCK_WAITS: SchemaTableLockWaits = SchemaTableLockWaits()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SchemaTableLockWaitsRecord> = SchemaTableLockWaitsRecord::class.java

    /**
     * The column <code>sys.schema_table_lock_waits.object_schema</code>.
     */
    val OBJECT_SCHEMA: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("object_schema"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.object_name</code>.
     */
    val OBJECT_NAME: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("object_name"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.waiting_thread_id</code>.
     */
    val WAITING_THREAD_ID: TableField<SchemaTableLockWaitsRecord, ULong?> = createField(DSL.name("waiting_thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.waiting_pid</code>.
     */
    val WAITING_PID: TableField<SchemaTableLockWaitsRecord, ULong?> = createField(DSL.name("waiting_pid"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.waiting_account</code>.
     */
    val WAITING_ACCOUNT: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("waiting_account"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.waiting_lock_type</code>.
     */
    val WAITING_LOCK_TYPE: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("waiting_lock_type"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column
     * <code>sys.schema_table_lock_waits.waiting_lock_duration</code>.
     */
    val WAITING_LOCK_DURATION: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("waiting_lock_duration"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.waiting_query</code>.
     */
    val WAITING_QUERY: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("waiting_query"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.waiting_query_secs</code>.
     */
    val WAITING_QUERY_SECS: TableField<SchemaTableLockWaitsRecord, Long?> = createField(DSL.name("waiting_query_secs"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>sys.schema_table_lock_waits.waiting_query_rows_affected</code>.
     */
    val WAITING_QUERY_ROWS_AFFECTED: TableField<SchemaTableLockWaitsRecord, ULong?> = createField(DSL.name("waiting_query_rows_affected"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column
     * <code>sys.schema_table_lock_waits.waiting_query_rows_examined</code>.
     */
    val WAITING_QUERY_ROWS_EXAMINED: TableField<SchemaTableLockWaitsRecord, ULong?> = createField(DSL.name("waiting_query_rows_examined"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.blocking_thread_id</code>.
     */
    val BLOCKING_THREAD_ID: TableField<SchemaTableLockWaitsRecord, ULong?> = createField(DSL.name("blocking_thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.blocking_pid</code>.
     */
    val BLOCKING_PID: TableField<SchemaTableLockWaitsRecord, ULong?> = createField(DSL.name("blocking_pid"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.blocking_account</code>.
     */
    val BLOCKING_ACCOUNT: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("blocking_account"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sys.schema_table_lock_waits.blocking_lock_type</code>.
     */
    val BLOCKING_LOCK_TYPE: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("blocking_lock_type"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column
     * <code>sys.schema_table_lock_waits.blocking_lock_duration</code>.
     */
    val BLOCKING_LOCK_DURATION: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("blocking_lock_duration"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column
     * <code>sys.schema_table_lock_waits.sql_kill_blocking_query</code>.
     */
    val SQL_KILL_BLOCKING_QUERY: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("sql_kill_blocking_query"), SQLDataType.VARCHAR(31), this, "")

    /**
     * The column
     * <code>sys.schema_table_lock_waits.sql_kill_blocking_connection</code>.
     */
    val SQL_KILL_BLOCKING_CONNECTION: TableField<SchemaTableLockWaitsRecord, String?> = createField(DSL.name("sql_kill_blocking_connection"), SQLDataType.VARCHAR(25), this, "")

    private constructor(alias: Name, aliased: Table<SchemaTableLockWaitsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SchemaTableLockWaitsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SchemaTableLockWaitsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>sys.schema_table_lock_waits</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sys.schema_table_lock_waits</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sys.schema_table_lock_waits</code> table reference
     */
    constructor(): this(DSL.name("schema_table_lock_waits"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Sys.SYS
    override fun `as`(alias: String): SchemaTableLockWaits = SchemaTableLockWaits(DSL.name(alias), this)
    override fun `as`(alias: Name): SchemaTableLockWaits = SchemaTableLockWaits(alias, this)
    override fun `as`(alias: Table<*>): SchemaTableLockWaits = SchemaTableLockWaits(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SchemaTableLockWaits = SchemaTableLockWaits(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SchemaTableLockWaits = SchemaTableLockWaits(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SchemaTableLockWaits = SchemaTableLockWaits(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): SchemaTableLockWaits = SchemaTableLockWaits(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): SchemaTableLockWaits = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): SchemaTableLockWaits = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): SchemaTableLockWaits = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): SchemaTableLockWaits = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): SchemaTableLockWaits = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): SchemaTableLockWaits = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): SchemaTableLockWaits = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): SchemaTableLockWaits = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): SchemaTableLockWaits = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row18<String?, String?, ULong?, ULong?, String?, String?, String?, String?, Long?, ULong?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row18<String?, String?, ULong?, ULong?, String?, String?, String?, String?, Long?, ULong?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, ULong?, ULong?, String?, String?, String?, String?, Long?, ULong?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, ULong?, ULong?, String?, String?, String?, String?, Long?, ULong?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
