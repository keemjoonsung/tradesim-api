/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.GeneralLog

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.TableRecordImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * General log
 */
@Suppress("UNCHECKED_CAST")
open class GeneralLogRecord() : TableRecordImpl<GeneralLogRecord>(GeneralLog.GENERAL_LOG), Record6<LocalDateTime?, String?, ULong?, UInteger?, String?, ByteArray?> {

    open var eventTime: LocalDateTime?
        set(value): Unit = set(0, value)
        get(): LocalDateTime? = get(0) as LocalDateTime?

    open var userHost: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var threadId: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var serverId: UInteger?
        set(value): Unit = set(3, value)
        get(): UInteger? = get(3) as UInteger?

    open var commandType: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var argument: ByteArray?
        set(value): Unit = set(5, value)
        get(): ByteArray? = get(5) as ByteArray?

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<LocalDateTime?, String?, ULong?, UInteger?, String?, ByteArray?> = super.fieldsRow() as Row6<LocalDateTime?, String?, ULong?, UInteger?, String?, ByteArray?>
    override fun valuesRow(): Row6<LocalDateTime?, String?, ULong?, UInteger?, String?, ByteArray?> = super.valuesRow() as Row6<LocalDateTime?, String?, ULong?, UInteger?, String?, ByteArray?>
    override fun field1(): Field<LocalDateTime?> = GeneralLog.GENERAL_LOG.EVENT_TIME
    override fun field2(): Field<String?> = GeneralLog.GENERAL_LOG.USER_HOST
    override fun field3(): Field<ULong?> = GeneralLog.GENERAL_LOG.THREAD_ID
    override fun field4(): Field<UInteger?> = GeneralLog.GENERAL_LOG.SERVER_ID
    override fun field5(): Field<String?> = GeneralLog.GENERAL_LOG.COMMAND_TYPE
    override fun field6(): Field<ByteArray?> = GeneralLog.GENERAL_LOG.ARGUMENT
    override fun component1(): LocalDateTime? = eventTime
    override fun component2(): String? = userHost
    override fun component3(): ULong? = threadId
    override fun component4(): UInteger? = serverId
    override fun component5(): String? = commandType
    override fun component6(): ByteArray? = argument
    override fun value1(): LocalDateTime? = eventTime
    override fun value2(): String? = userHost
    override fun value3(): ULong? = threadId
    override fun value4(): UInteger? = serverId
    override fun value5(): String? = commandType
    override fun value6(): ByteArray? = argument

    override fun value1(value: LocalDateTime?): GeneralLogRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): GeneralLogRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): GeneralLogRecord {
        set(2, value)
        return this
    }

    override fun value4(value: UInteger?): GeneralLogRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): GeneralLogRecord {
        set(4, value)
        return this
    }

    override fun value6(value: ByteArray?): GeneralLogRecord {
        set(5, value)
        return this
    }

    override fun values(value1: LocalDateTime?, value2: String?, value3: ULong?, value4: UInteger?, value5: String?, value6: ByteArray?): GeneralLogRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised GeneralLogRecord
     */
    constructor(eventTime: LocalDateTime? = null, userHost: String? = null, threadId: ULong? = null, serverId: UInteger? = null, commandType: String? = null, argument: ByteArray? = null): this() {
        this.eventTime = eventTime
        this.userHost = userHost
        this.threadId = threadId
        this.serverId = serverId
        this.commandType = commandType
        this.argument = argument
        resetChangedOnNotNull()
    }
}
