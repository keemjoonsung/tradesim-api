/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbCachedIndexes

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbCachedIndexesRecord() : TableRecordImpl<InnodbCachedIndexesRecord>(InnodbCachedIndexes.INNODB_CACHED_INDEXES), Record3<UInteger?, ULong?, ULong?> {

    open var spaceId: UInteger?
        set(value): Unit = set(0, value)
        get(): UInteger? = get(0) as UInteger?

    open var indexId: ULong?
        set(value): Unit = set(1, value)
        get(): ULong? = get(1) as ULong?

    open var nCachedPages: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UInteger?, ULong?, ULong?> = super.fieldsRow() as Row3<UInteger?, ULong?, ULong?>
    override fun valuesRow(): Row3<UInteger?, ULong?, ULong?> = super.valuesRow() as Row3<UInteger?, ULong?, ULong?>
    override fun field1(): Field<UInteger?> = InnodbCachedIndexes.INNODB_CACHED_INDEXES.SPACE_ID
    override fun field2(): Field<ULong?> = InnodbCachedIndexes.INNODB_CACHED_INDEXES.INDEX_ID
    override fun field3(): Field<ULong?> = InnodbCachedIndexes.INNODB_CACHED_INDEXES.N_CACHED_PAGES
    override fun component1(): UInteger? = spaceId
    override fun component2(): ULong? = indexId
    override fun component3(): ULong? = nCachedPages
    override fun value1(): UInteger? = spaceId
    override fun value2(): ULong? = indexId
    override fun value3(): ULong? = nCachedPages

    override fun value1(value: UInteger?): InnodbCachedIndexesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: ULong?): InnodbCachedIndexesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): InnodbCachedIndexesRecord {
        set(2, value)
        return this
    }

    override fun values(value1: UInteger?, value2: ULong?, value3: ULong?): InnodbCachedIndexesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised InnodbCachedIndexesRecord
     */
    constructor(spaceId: UInteger? = null, indexId: ULong? = null, nCachedPages: ULong? = null): this() {
        this.spaceId = spaceId
        this.indexId = indexId
        this.nCachedPages = nCachedPages
        resetChangedOnNotNull()
    }
}
