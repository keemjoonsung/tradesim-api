/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.TableHandles

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TableHandlesRecord() : UpdatableRecordImpl<TableHandlesRecord>(TableHandles.TABLE_HANDLES), Record8<String?, String?, String?, ULong?, ULong?, ULong?, String?, String?> {

    open var objectType: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var objectSchema: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var objectName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var objectInstanceBegin: ULong?
        set(value): Unit = set(3, value)
        get(): ULong? = get(3) as ULong?

    open var ownerThreadId: ULong?
        set(value): Unit = set(4, value)
        get(): ULong? = get(4) as ULong?

    open var ownerEventId: ULong?
        set(value): Unit = set(5, value)
        get(): ULong? = get(5) as ULong?

    open var internalLock: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var externalLock: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<ULong?> = super.key() as Record1<ULong?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<String?, String?, String?, ULong?, ULong?, ULong?, String?, String?> = super.fieldsRow() as Row8<String?, String?, String?, ULong?, ULong?, ULong?, String?, String?>
    override fun valuesRow(): Row8<String?, String?, String?, ULong?, ULong?, ULong?, String?, String?> = super.valuesRow() as Row8<String?, String?, String?, ULong?, ULong?, ULong?, String?, String?>
    override fun field1(): Field<String?> = TableHandles.TABLE_HANDLES.OBJECT_TYPE
    override fun field2(): Field<String?> = TableHandles.TABLE_HANDLES.OBJECT_SCHEMA
    override fun field3(): Field<String?> = TableHandles.TABLE_HANDLES.OBJECT_NAME
    override fun field4(): Field<ULong?> = TableHandles.TABLE_HANDLES.OBJECT_INSTANCE_BEGIN
    override fun field5(): Field<ULong?> = TableHandles.TABLE_HANDLES.OWNER_THREAD_ID
    override fun field6(): Field<ULong?> = TableHandles.TABLE_HANDLES.OWNER_EVENT_ID
    override fun field7(): Field<String?> = TableHandles.TABLE_HANDLES.INTERNAL_LOCK
    override fun field8(): Field<String?> = TableHandles.TABLE_HANDLES.EXTERNAL_LOCK
    override fun component1(): String? = objectType
    override fun component2(): String? = objectSchema
    override fun component3(): String? = objectName
    override fun component4(): ULong? = objectInstanceBegin
    override fun component5(): ULong? = ownerThreadId
    override fun component6(): ULong? = ownerEventId
    override fun component7(): String? = internalLock
    override fun component8(): String? = externalLock
    override fun value1(): String? = objectType
    override fun value2(): String? = objectSchema
    override fun value3(): String? = objectName
    override fun value4(): ULong? = objectInstanceBegin
    override fun value5(): ULong? = ownerThreadId
    override fun value6(): ULong? = ownerEventId
    override fun value7(): String? = internalLock
    override fun value8(): String? = externalLock

    override fun value1(value: String?): TableHandlesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): TableHandlesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): TableHandlesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: ULong?): TableHandlesRecord {
        set(3, value)
        return this
    }

    override fun value5(value: ULong?): TableHandlesRecord {
        set(4, value)
        return this
    }

    override fun value6(value: ULong?): TableHandlesRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): TableHandlesRecord {
        set(6, value)
        return this
    }

    override fun value8(value: String?): TableHandlesRecord {
        set(7, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: ULong?, value5: ULong?, value6: ULong?, value7: String?, value8: String?): TableHandlesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised TableHandlesRecord
     */
    constructor(objectType: String? = null, objectSchema: String? = null, objectName: String? = null, objectInstanceBegin: ULong? = null, ownerThreadId: ULong? = null, ownerEventId: ULong? = null, internalLock: String? = null, externalLock: String? = null): this() {
        this.objectType = objectType
        this.objectSchema = objectSchema
        this.objectName = objectName
        this.objectInstanceBegin = objectInstanceBegin
        this.ownerThreadId = ownerThreadId
        this.ownerEventId = ownerEventId
        this.internalLock = internalLock
        this.externalLock = externalLock
        resetChangedOnNotNull()
    }
}
