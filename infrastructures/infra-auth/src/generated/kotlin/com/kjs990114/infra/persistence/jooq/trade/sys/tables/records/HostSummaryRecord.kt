/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import com.kjs990114.infra.persistence.jooq.trade.sys.tables.HostSummary

import java.math.BigInteger

import org.jooq.Field
import org.jooq.Record12
import org.jooq.Row12
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class HostSummaryRecord() : TableRecordImpl<HostSummaryRecord>(HostSummary.HOST_SUMMARY), Record12<String?, BigInteger?, String?, String?, BigInteger?, BigInteger?, String?, BigInteger?, BigInteger?, Long?, String?, String?> {

    open var host: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var statements: BigInteger?
        set(value): Unit = set(1, value)
        get(): BigInteger? = get(1) as BigInteger?

    open var statementLatency: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var statementAvgLatency: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var tableScans: BigInteger?
        set(value): Unit = set(4, value)
        get(): BigInteger? = get(4) as BigInteger?

    open var fileIos: BigInteger?
        set(value): Unit = set(5, value)
        get(): BigInteger? = get(5) as BigInteger?

    open var fileIoLatency: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var currentConnections: BigInteger?
        set(value): Unit = set(7, value)
        get(): BigInteger? = get(7) as BigInteger?

    open var totalConnections: BigInteger?
        set(value): Unit = set(8, value)
        get(): BigInteger? = get(8) as BigInteger?

    open var uniqueUsers: Long?
        set(value): Unit = set(9, value)
        get(): Long? = get(9) as Long?

    open var currentMemory: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    open var totalMemoryAllocated: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row12<String?, BigInteger?, String?, String?, BigInteger?, BigInteger?, String?, BigInteger?, BigInteger?, Long?, String?, String?> = super.fieldsRow() as Row12<String?, BigInteger?, String?, String?, BigInteger?, BigInteger?, String?, BigInteger?, BigInteger?, Long?, String?, String?>
    override fun valuesRow(): Row12<String?, BigInteger?, String?, String?, BigInteger?, BigInteger?, String?, BigInteger?, BigInteger?, Long?, String?, String?> = super.valuesRow() as Row12<String?, BigInteger?, String?, String?, BigInteger?, BigInteger?, String?, BigInteger?, BigInteger?, Long?, String?, String?>
    override fun field1(): Field<String?> = HostSummary.HOST_SUMMARY.HOST
    override fun field2(): Field<BigInteger?> = HostSummary.HOST_SUMMARY.STATEMENTS
    override fun field3(): Field<String?> = HostSummary.HOST_SUMMARY.STATEMENT_LATENCY
    override fun field4(): Field<String?> = HostSummary.HOST_SUMMARY.STATEMENT_AVG_LATENCY
    override fun field5(): Field<BigInteger?> = HostSummary.HOST_SUMMARY.TABLE_SCANS
    override fun field6(): Field<BigInteger?> = HostSummary.HOST_SUMMARY.FILE_IOS
    override fun field7(): Field<String?> = HostSummary.HOST_SUMMARY.FILE_IO_LATENCY
    override fun field8(): Field<BigInteger?> = HostSummary.HOST_SUMMARY.CURRENT_CONNECTIONS
    override fun field9(): Field<BigInteger?> = HostSummary.HOST_SUMMARY.TOTAL_CONNECTIONS
    override fun field10(): Field<Long?> = HostSummary.HOST_SUMMARY.UNIQUE_USERS
    override fun field11(): Field<String?> = HostSummary.HOST_SUMMARY.CURRENT_MEMORY
    override fun field12(): Field<String?> = HostSummary.HOST_SUMMARY.TOTAL_MEMORY_ALLOCATED
    override fun component1(): String? = host
    override fun component2(): BigInteger? = statements
    override fun component3(): String? = statementLatency
    override fun component4(): String? = statementAvgLatency
    override fun component5(): BigInteger? = tableScans
    override fun component6(): BigInteger? = fileIos
    override fun component7(): String? = fileIoLatency
    override fun component8(): BigInteger? = currentConnections
    override fun component9(): BigInteger? = totalConnections
    override fun component10(): Long? = uniqueUsers
    override fun component11(): String? = currentMemory
    override fun component12(): String? = totalMemoryAllocated
    override fun value1(): String? = host
    override fun value2(): BigInteger? = statements
    override fun value3(): String? = statementLatency
    override fun value4(): String? = statementAvgLatency
    override fun value5(): BigInteger? = tableScans
    override fun value6(): BigInteger? = fileIos
    override fun value7(): String? = fileIoLatency
    override fun value8(): BigInteger? = currentConnections
    override fun value9(): BigInteger? = totalConnections
    override fun value10(): Long? = uniqueUsers
    override fun value11(): String? = currentMemory
    override fun value12(): String? = totalMemoryAllocated

    override fun value1(value: String?): HostSummaryRecord {
        set(0, value)
        return this
    }

    override fun value2(value: BigInteger?): HostSummaryRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): HostSummaryRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): HostSummaryRecord {
        set(3, value)
        return this
    }

    override fun value5(value: BigInteger?): HostSummaryRecord {
        set(4, value)
        return this
    }

    override fun value6(value: BigInteger?): HostSummaryRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): HostSummaryRecord {
        set(6, value)
        return this
    }

    override fun value8(value: BigInteger?): HostSummaryRecord {
        set(7, value)
        return this
    }

    override fun value9(value: BigInteger?): HostSummaryRecord {
        set(8, value)
        return this
    }

    override fun value10(value: Long?): HostSummaryRecord {
        set(9, value)
        return this
    }

    override fun value11(value: String?): HostSummaryRecord {
        set(10, value)
        return this
    }

    override fun value12(value: String?): HostSummaryRecord {
        set(11, value)
        return this
    }

    override fun values(value1: String?, value2: BigInteger?, value3: String?, value4: String?, value5: BigInteger?, value6: BigInteger?, value7: String?, value8: BigInteger?, value9: BigInteger?, value10: Long?, value11: String?, value12: String?): HostSummaryRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        return this
    }

    /**
     * Create a detached, initialised HostSummaryRecord
     */
    constructor(host: String? = null, statements: BigInteger? = null, statementLatency: String? = null, statementAvgLatency: String? = null, tableScans: BigInteger? = null, fileIos: BigInteger? = null, fileIoLatency: String? = null, currentConnections: BigInteger? = null, totalConnections: BigInteger? = null, uniqueUsers: Long? = null, currentMemory: String? = null, totalMemoryAllocated: String? = null): this() {
        this.host = host
        this.statements = statements
        this.statementLatency = statementLatency
        this.statementAvgLatency = statementAvgLatency
        this.tableScans = tableScans
        this.fileIos = fileIos
        this.fileIoLatency = fileIoLatency
        this.currentConnections = currentConnections
        this.totalConnections = totalConnections
        this.uniqueUsers = uniqueUsers
        this.currentMemory = currentMemory
        this.totalMemoryAllocated = totalMemoryAllocated
        resetChangedOnNotNull()
    }
}
