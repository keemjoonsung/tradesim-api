/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneLeapSecond

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * Leap seconds information for time zones
 */
@Suppress("UNCHECKED_CAST")
open class TimeZoneLeapSecondRecord() : UpdatableRecordImpl<TimeZoneLeapSecondRecord>(TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND), Record2<Long?, Int?> {

    open var transitionTime: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var correction: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, Int?> = super.fieldsRow() as Row2<Long?, Int?>
    override fun valuesRow(): Row2<Long?, Int?> = super.valuesRow() as Row2<Long?, Int?>
    override fun field1(): Field<Long?> = TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND.TRANSITION_TIME
    override fun field2(): Field<Int?> = TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND.CORRECTION
    override fun component1(): Long? = transitionTime
    override fun component2(): Int? = correction
    override fun value1(): Long? = transitionTime
    override fun value2(): Int? = correction

    override fun value1(value: Long?): TimeZoneLeapSecondRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): TimeZoneLeapSecondRecord {
        set(1, value)
        return this
    }

    override fun values(value1: Long?, value2: Int?): TimeZoneLeapSecondRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised TimeZoneLeapSecondRecord
     */
    constructor(transitionTime: Long? = null, correction: Int? = null): this() {
        this.transitionTime = transitionTime
        this.correction = correction
        resetChangedOnNotNull()
    }
}
