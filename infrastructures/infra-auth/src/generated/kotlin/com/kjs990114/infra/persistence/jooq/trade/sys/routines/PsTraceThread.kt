/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys

import java.math.BigDecimal

import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.types.ULong


/**
 * 
 * Description
 * -----------
 * 
 * Dumps all data within Performance Schema for an instrumented thread,
 * to create a DOT formatted graph file. 
 * 
 * Each resultset returned from the procedure should be used for a complete
 * graph
 * 
 * Requires the SUPER privilege for "SET sql_log_bin = 0;".
 * 
 * Parameters
 * -----------
 * 
 * in_thread_id (BIGINT UNSIGNED):
 *   The thread that you would like a stack trace for
 * in_outfile  (VARCHAR(255)):
 *   The filename the dot file will be written to
 * in_max_runtime (DECIMAL(20,2)):
 *   The maximum time to keep collecting data.
 *   Use NULL to get the default which is 60 seconds.
 * in_interval (DECIMAL(20,2)): 
 *   How long to sleep between data collections. 
 *   Use NULL to get the default which is 1 second.
 * in_start_fresh (BOOLEAN):
 *   Whether to reset all Performance Schema data before tracing.
 * in_auto_setup (BOOLEAN):
 *   Whether to disable all other threads and enable all consumers/instruments. 
 *   This will also reset the settings at the end of the run.
 * in_debug (BOOLEAN):
 *   Whether you would like to include file:lineno in the graph
 * 
 * Example
 * -----------
 * 
 * mysql&gt; CALL sys.ps_trace_thread(25, CONCAT('/tmp/stack-', REPLACE(NOW(), '
 * ', '-'), '.dot'), NULL, NULL, TRUE, TRUE, TRUE);
 * +-------------------+
 * | summary           |
 * +-------------------+
 * | Disabled 1 thread |
 * +-------------------+
 * 1 row in set (0.00 sec)
 * 
 * +---------------------------------------------+
 * | Info                                        |
 * +---------------------------------------------+
 * | Data collection starting for THREAD_ID = 25 |
 * +---------------------------------------------+
 * 1 row in set (0.03 sec)
 * 
 * +-----------------------------------------------------------+
 * | Info                                                      |
 * +-----------------------------------------------------------+
 * | Stack trace written to /tmp/stack-2014-02-16-21:18:41.dot |
 * +-----------------------------------------------------------+
 * 1 row in set (60.07 sec)
 * 
 * +-------------------------------------------------------------------+
 * | Convert to PDF                                                    |
 * +-------------------------------------------------------------------+
 * | dot -Tpdf -o /tmp/stack_25.pdf /tmp/stack-2014-02-16-21:18:41.dot |
 * +-------------------------------------------------------------------+
 * 1 row in set (60.07 sec)
 * 
 * +-------------------------------------------------------------------+
 * | Convert to PNG                                                    |
 * +-------------------------------------------------------------------+
 * | dot -Tpng -o /tmp/stack_25.png /tmp/stack-2014-02-16-21:18:41.dot |
 * +-------------------------------------------------------------------+
 * 1 row in set (60.07 sec)
 * 
 * +------------------+
 * | summary          |
 * +------------------+
 * | Enabled 1 thread |
 * +------------------+
 * 1 row in set (60.32 sec)

 */
@Suppress("UNCHECKED_CAST")
open class PsTraceThread : AbstractRoutine<java.lang.Void>("ps_trace_thread", Sys.SYS) {
    companion object {

        /**
         * The parameter <code>sys.ps_trace_thread.in_thread_id</code>.
         */
        val IN_THREAD_ID: Parameter<ULong?> = Internal.createParameter("in_thread_id", SQLDataType.BIGINTUNSIGNED, false, false)

        /**
         * The parameter <code>sys.ps_trace_thread.in_outfile</code>.
         */
        val IN_OUTFILE: Parameter<String?> = Internal.createParameter("in_outfile", SQLDataType.VARCHAR(255), false, false)

        /**
         * The parameter <code>sys.ps_trace_thread.in_max_runtime</code>.
         */
        val IN_MAX_RUNTIME: Parameter<BigDecimal?> = Internal.createParameter("in_max_runtime", SQLDataType.DECIMAL(20, 2), false, false)

        /**
         * The parameter <code>sys.ps_trace_thread.in_interval</code>.
         */
        val IN_INTERVAL: Parameter<BigDecimal?> = Internal.createParameter("in_interval", SQLDataType.DECIMAL(20, 2), false, false)

        /**
         * The parameter <code>sys.ps_trace_thread.in_start_fresh</code>.
         */
        val IN_START_FRESH: Parameter<Byte?> = Internal.createParameter("in_start_fresh", SQLDataType.TINYINT, false, false)

        /**
         * The parameter <code>sys.ps_trace_thread.in_auto_setup</code>.
         */
        val IN_AUTO_SETUP: Parameter<Byte?> = Internal.createParameter("in_auto_setup", SQLDataType.TINYINT, false, false)

        /**
         * The parameter <code>sys.ps_trace_thread.in_debug</code>.
         */
        val IN_DEBUG: Parameter<Byte?> = Internal.createParameter("in_debug", SQLDataType.TINYINT, false, false)
    }

    init {
        addInParameter(PsTraceThread.IN_THREAD_ID)
        addInParameter(PsTraceThread.IN_OUTFILE)
        addInParameter(PsTraceThread.IN_MAX_RUNTIME)
        addInParameter(PsTraceThread.IN_INTERVAL)
        addInParameter(PsTraceThread.IN_START_FRESH)
        addInParameter(PsTraceThread.IN_AUTO_SETUP)
        addInParameter(PsTraceThread.IN_DEBUG)
    }

    /**
     * Set the <code>in_thread_id</code> parameter IN value to the routine
     */
    fun setInThreadId(value: ULong?): Unit = setValue(PsTraceThread.IN_THREAD_ID, value)

    /**
     * Set the <code>in_outfile</code> parameter IN value to the routine
     */
    fun setInOutfile(value: String?): Unit = setValue(PsTraceThread.IN_OUTFILE, value)

    /**
     * Set the <code>in_max_runtime</code> parameter IN value to the routine
     */
    fun setInMaxRuntime(value: BigDecimal?): Unit = setValue(PsTraceThread.IN_MAX_RUNTIME, value)

    /**
     * Set the <code>in_interval</code> parameter IN value to the routine
     */
    fun setInInterval(value: BigDecimal?): Unit = setValue(PsTraceThread.IN_INTERVAL, value)

    /**
     * Set the <code>in_start_fresh</code> parameter IN value to the routine
     */
    fun setInStartFresh(value: Byte?): Unit = setValue(PsTraceThread.IN_START_FRESH, value)

    /**
     * Set the <code>in_auto_setup</code> parameter IN value to the routine
     */
    fun setInAutoSetup(value: Byte?): Unit = setValue(PsTraceThread.IN_AUTO_SETUP, value)

    /**
     * Set the <code>in_debug</code> parameter IN value to the routine
     */
    fun setInDebug(value: Byte?): Unit = setValue(PsTraceThread.IN_DEBUG, value)
}
