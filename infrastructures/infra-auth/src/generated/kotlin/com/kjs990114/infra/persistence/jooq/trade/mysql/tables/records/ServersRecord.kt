/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Servers

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.UpdatableRecordImpl


/**
 * MySQL Foreign Servers table
 */
@Suppress("UNCHECKED_CAST")
open class ServersRecord() : UpdatableRecordImpl<ServersRecord>(Servers.SERVERS), Record9<String?, String?, String?, String?, String?, Int?, String?, String?, String?> {

    open var serverName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var host: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var db: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var username: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var password: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var port: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var socket: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var wrapper: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var owner: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row9<String?, String?, String?, String?, String?, Int?, String?, String?, String?> = super.fieldsRow() as Row9<String?, String?, String?, String?, String?, Int?, String?, String?, String?>
    override fun valuesRow(): Row9<String?, String?, String?, String?, String?, Int?, String?, String?, String?> = super.valuesRow() as Row9<String?, String?, String?, String?, String?, Int?, String?, String?, String?>
    override fun field1(): Field<String?> = Servers.SERVERS.SERVER_NAME
    override fun field2(): Field<String?> = Servers.SERVERS.HOST
    override fun field3(): Field<String?> = Servers.SERVERS.DB
    override fun field4(): Field<String?> = Servers.SERVERS.USERNAME
    override fun field5(): Field<String?> = Servers.SERVERS.PASSWORD
    override fun field6(): Field<Int?> = Servers.SERVERS.PORT
    override fun field7(): Field<String?> = Servers.SERVERS.SOCKET
    override fun field8(): Field<String?> = Servers.SERVERS.WRAPPER
    override fun field9(): Field<String?> = Servers.SERVERS.OWNER
    override fun component1(): String? = serverName
    override fun component2(): String? = host
    override fun component3(): String? = db
    override fun component4(): String? = username
    override fun component5(): String? = password
    override fun component6(): Int? = port
    override fun component7(): String? = socket
    override fun component8(): String? = wrapper
    override fun component9(): String? = owner
    override fun value1(): String? = serverName
    override fun value2(): String? = host
    override fun value3(): String? = db
    override fun value4(): String? = username
    override fun value5(): String? = password
    override fun value6(): Int? = port
    override fun value7(): String? = socket
    override fun value8(): String? = wrapper
    override fun value9(): String? = owner

    override fun value1(value: String?): ServersRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): ServersRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): ServersRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): ServersRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): ServersRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): ServersRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): ServersRecord {
        set(6, value)
        return this
    }

    override fun value8(value: String?): ServersRecord {
        set(7, value)
        return this
    }

    override fun value9(value: String?): ServersRecord {
        set(8, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?, value5: String?, value6: Int?, value7: String?, value8: String?, value9: String?): ServersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        return this
    }

    /**
     * Create a detached, initialised ServersRecord
     */
    constructor(serverName: String? = null, host: String? = null, db: String? = null, username: String? = null, password: String? = null, port: Int? = null, socket: String? = null, wrapper: String? = null, owner: String? = null): this() {
        this.serverName = serverName
        this.host = host
        this.db = db
        this.username = username
        this.password = password
        this.port = port
        this.socket = socket
        this.wrapper = wrapper
        this.owner = owner
        resetChangedOnNotNull()
    }
}
