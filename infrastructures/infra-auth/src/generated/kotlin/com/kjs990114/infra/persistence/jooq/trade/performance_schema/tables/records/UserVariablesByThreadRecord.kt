/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.UserVariablesByThread

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserVariablesByThreadRecord() : UpdatableRecordImpl<UserVariablesByThreadRecord>(UserVariablesByThread.USER_VARIABLES_BY_THREAD), Record3<ULong?, String?, ByteArray?> {

    open var threadId: ULong?
        set(value): Unit = set(0, value)
        get(): ULong? = get(0) as ULong?

    open var variableName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var variableValue: ByteArray?
        set(value): Unit = set(2, value)
        get(): ByteArray? = get(2) as ByteArray?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<ULong?, String?> = super.key() as Record2<ULong?, String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<ULong?, String?, ByteArray?> = super.fieldsRow() as Row3<ULong?, String?, ByteArray?>
    override fun valuesRow(): Row3<ULong?, String?, ByteArray?> = super.valuesRow() as Row3<ULong?, String?, ByteArray?>
    override fun field1(): Field<ULong?> = UserVariablesByThread.USER_VARIABLES_BY_THREAD.THREAD_ID
    override fun field2(): Field<String?> = UserVariablesByThread.USER_VARIABLES_BY_THREAD.VARIABLE_NAME
    override fun field3(): Field<ByteArray?> = UserVariablesByThread.USER_VARIABLES_BY_THREAD.VARIABLE_VALUE
    override fun component1(): ULong? = threadId
    override fun component2(): String? = variableName
    override fun component3(): ByteArray? = variableValue
    override fun value1(): ULong? = threadId
    override fun value2(): String? = variableName
    override fun value3(): ByteArray? = variableValue

    override fun value1(value: ULong?): UserVariablesByThreadRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): UserVariablesByThreadRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ByteArray?): UserVariablesByThreadRecord {
        set(2, value)
        return this
    }

    override fun values(value1: ULong?, value2: String?, value3: ByteArray?): UserVariablesByThreadRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised UserVariablesByThreadRecord
     */
    constructor(threadId: ULong? = null, variableName: String? = null, variableValue: ByteArray? = null): this() {
        this.threadId = threadId
        this.variableName = variableName
        this.variableValue = variableValue
        resetChangedOnNotNull()
    }
}
