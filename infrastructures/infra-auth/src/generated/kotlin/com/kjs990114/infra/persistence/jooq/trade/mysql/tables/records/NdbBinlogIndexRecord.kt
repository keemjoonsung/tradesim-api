/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.NdbBinlogIndex

import org.jooq.Field
import org.jooq.Record12
import org.jooq.Record3
import org.jooq.Row12
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class NdbBinlogIndexRecord() : UpdatableRecordImpl<NdbBinlogIndexRecord>(NdbBinlogIndex.NDB_BINLOG_INDEX), Record12<ULong?, String?, ULong?, UInteger?, UInteger?, UInteger?, UInteger?, UInteger?, ULong?, UInteger?, ULong?, String?> {

    open var position: ULong?
        set(value): Unit = set(0, value)
        get(): ULong? = get(0) as ULong?

    open var file: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var epoch: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var inserts: UInteger?
        set(value): Unit = set(3, value)
        get(): UInteger? = get(3) as UInteger?

    open var updates: UInteger?
        set(value): Unit = set(4, value)
        get(): UInteger? = get(4) as UInteger?

    open var deletes: UInteger?
        set(value): Unit = set(5, value)
        get(): UInteger? = get(5) as UInteger?

    open var schemaops: UInteger?
        set(value): Unit = set(6, value)
        get(): UInteger? = get(6) as UInteger?

    open var origServerId: UInteger?
        set(value): Unit = set(7, value)
        get(): UInteger? = get(7) as UInteger?

    open var origEpoch: ULong?
        set(value): Unit = set(8, value)
        get(): ULong? = get(8) as ULong?

    open var gci: UInteger?
        set(value): Unit = set(9, value)
        get(): UInteger? = get(9) as UInteger?

    open var nextPosition: ULong?
        set(value): Unit = set(10, value)
        get(): ULong? = get(10) as ULong?

    open var nextFile: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record3<ULong?, UInteger?, ULong?> = super.key() as Record3<ULong?, UInteger?, ULong?>

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row12<ULong?, String?, ULong?, UInteger?, UInteger?, UInteger?, UInteger?, UInteger?, ULong?, UInteger?, ULong?, String?> = super.fieldsRow() as Row12<ULong?, String?, ULong?, UInteger?, UInteger?, UInteger?, UInteger?, UInteger?, ULong?, UInteger?, ULong?, String?>
    override fun valuesRow(): Row12<ULong?, String?, ULong?, UInteger?, UInteger?, UInteger?, UInteger?, UInteger?, ULong?, UInteger?, ULong?, String?> = super.valuesRow() as Row12<ULong?, String?, ULong?, UInteger?, UInteger?, UInteger?, UInteger?, UInteger?, ULong?, UInteger?, ULong?, String?>
    override fun field1(): Field<ULong?> = NdbBinlogIndex.NDB_BINLOG_INDEX.POSITION
    override fun field2(): Field<String?> = NdbBinlogIndex.NDB_BINLOG_INDEX.FILE
    override fun field3(): Field<ULong?> = NdbBinlogIndex.NDB_BINLOG_INDEX.EPOCH
    override fun field4(): Field<UInteger?> = NdbBinlogIndex.NDB_BINLOG_INDEX.INSERTS
    override fun field5(): Field<UInteger?> = NdbBinlogIndex.NDB_BINLOG_INDEX.UPDATES
    override fun field6(): Field<UInteger?> = NdbBinlogIndex.NDB_BINLOG_INDEX.DELETES
    override fun field7(): Field<UInteger?> = NdbBinlogIndex.NDB_BINLOG_INDEX.SCHEMAOPS
    override fun field8(): Field<UInteger?> = NdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_SERVER_ID
    override fun field9(): Field<ULong?> = NdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_EPOCH
    override fun field10(): Field<UInteger?> = NdbBinlogIndex.NDB_BINLOG_INDEX.GCI
    override fun field11(): Field<ULong?> = NdbBinlogIndex.NDB_BINLOG_INDEX.NEXT_POSITION
    override fun field12(): Field<String?> = NdbBinlogIndex.NDB_BINLOG_INDEX.NEXT_FILE
    override fun component1(): ULong? = position
    override fun component2(): String? = file
    override fun component3(): ULong? = epoch
    override fun component4(): UInteger? = inserts
    override fun component5(): UInteger? = updates
    override fun component6(): UInteger? = deletes
    override fun component7(): UInteger? = schemaops
    override fun component8(): UInteger? = origServerId
    override fun component9(): ULong? = origEpoch
    override fun component10(): UInteger? = gci
    override fun component11(): ULong? = nextPosition
    override fun component12(): String? = nextFile
    override fun value1(): ULong? = position
    override fun value2(): String? = file
    override fun value3(): ULong? = epoch
    override fun value4(): UInteger? = inserts
    override fun value5(): UInteger? = updates
    override fun value6(): UInteger? = deletes
    override fun value7(): UInteger? = schemaops
    override fun value8(): UInteger? = origServerId
    override fun value9(): ULong? = origEpoch
    override fun value10(): UInteger? = gci
    override fun value11(): ULong? = nextPosition
    override fun value12(): String? = nextFile

    override fun value1(value: ULong?): NdbBinlogIndexRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): NdbBinlogIndexRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): NdbBinlogIndexRecord {
        set(2, value)
        return this
    }

    override fun value4(value: UInteger?): NdbBinlogIndexRecord {
        set(3, value)
        return this
    }

    override fun value5(value: UInteger?): NdbBinlogIndexRecord {
        set(4, value)
        return this
    }

    override fun value6(value: UInteger?): NdbBinlogIndexRecord {
        set(5, value)
        return this
    }

    override fun value7(value: UInteger?): NdbBinlogIndexRecord {
        set(6, value)
        return this
    }

    override fun value8(value: UInteger?): NdbBinlogIndexRecord {
        set(7, value)
        return this
    }

    override fun value9(value: ULong?): NdbBinlogIndexRecord {
        set(8, value)
        return this
    }

    override fun value10(value: UInteger?): NdbBinlogIndexRecord {
        set(9, value)
        return this
    }

    override fun value11(value: ULong?): NdbBinlogIndexRecord {
        set(10, value)
        return this
    }

    override fun value12(value: String?): NdbBinlogIndexRecord {
        set(11, value)
        return this
    }

    override fun values(value1: ULong?, value2: String?, value3: ULong?, value4: UInteger?, value5: UInteger?, value6: UInteger?, value7: UInteger?, value8: UInteger?, value9: ULong?, value10: UInteger?, value11: ULong?, value12: String?): NdbBinlogIndexRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        return this
    }

    /**
     * Create a detached, initialised NdbBinlogIndexRecord
     */
    constructor(position: ULong? = null, file: String? = null, epoch: ULong? = null, inserts: UInteger? = null, updates: UInteger? = null, deletes: UInteger? = null, schemaops: UInteger? = null, origServerId: UInteger? = null, origEpoch: ULong? = null, gci: UInteger? = null, nextPosition: ULong? = null, nextFile: String? = null): this() {
        this.position = position
        this.file = file
        this.epoch = epoch
        this.inserts = inserts
        this.updates = updates
        this.deletes = deletes
        this.schemaops = schemaops
        this.origServerId = origServerId
        this.origEpoch = origEpoch
        this.gci = gci
        this.nextPosition = nextPosition
        this.nextFile = nextFile
        resetChangedOnNotNull()
    }
}
