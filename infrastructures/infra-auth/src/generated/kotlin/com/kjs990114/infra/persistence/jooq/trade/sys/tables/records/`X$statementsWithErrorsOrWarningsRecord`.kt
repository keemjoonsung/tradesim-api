/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import java.math.BigDecimal
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class `X$statementsWithErrorsOrWarningsRecord`() : TableRecordImpl<`X$statementsWithErrorsOrWarningsRecord`>(com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`), Record10<String?, String?, ULong?, ULong?, BigDecimal?, ULong?, BigDecimal?, LocalDateTime?, LocalDateTime?, String?> {

    open var query: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var db: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var execCount: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var errors: ULong?
        set(value): Unit = set(3, value)
        get(): ULong? = get(3) as ULong?

    open var errorPct: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    open var warnings: ULong?
        set(value): Unit = set(5, value)
        get(): ULong? = get(5) as ULong?

    open var warningPct: BigDecimal?
        set(value): Unit = set(6, value)
        get(): BigDecimal? = get(6) as BigDecimal?

    open var firstSeen: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    open var lastSeen: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    open var digest: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<String?, String?, ULong?, ULong?, BigDecimal?, ULong?, BigDecimal?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row10<String?, String?, ULong?, ULong?, BigDecimal?, ULong?, BigDecimal?, LocalDateTime?, LocalDateTime?, String?>
    override fun valuesRow(): Row10<String?, String?, ULong?, ULong?, BigDecimal?, ULong?, BigDecimal?, LocalDateTime?, LocalDateTime?, String?> = super.valuesRow() as Row10<String?, String?, ULong?, ULong?, BigDecimal?, ULong?, BigDecimal?, LocalDateTime?, LocalDateTime?, String?>
    override fun field1(): Field<String?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.QUERY
    override fun field2(): Field<String?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.DB
    override fun field3(): Field<ULong?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.EXEC_COUNT
    override fun field4(): Field<ULong?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.ERRORS
    override fun field5(): Field<BigDecimal?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.ERROR_PCT
    override fun field6(): Field<ULong?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.WARNINGS
    override fun field7(): Field<BigDecimal?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.WARNING_PCT
    override fun field8(): Field<LocalDateTime?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.FIRST_SEEN
    override fun field9(): Field<LocalDateTime?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.LAST_SEEN
    override fun field10(): Field<String?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$statementsWithErrorsOrWarnings`.`X$STATEMENTS_WITH_ERRORS_OR_WARNINGS`.DIGEST
    override fun component1(): String? = query
    override fun component2(): String? = db
    override fun component3(): ULong? = execCount
    override fun component4(): ULong? = errors
    override fun component5(): BigDecimal? = errorPct
    override fun component6(): ULong? = warnings
    override fun component7(): BigDecimal? = warningPct
    override fun component8(): LocalDateTime? = firstSeen
    override fun component9(): LocalDateTime? = lastSeen
    override fun component10(): String? = digest
    override fun value1(): String? = query
    override fun value2(): String? = db
    override fun value3(): ULong? = execCount
    override fun value4(): ULong? = errors
    override fun value5(): BigDecimal? = errorPct
    override fun value6(): ULong? = warnings
    override fun value7(): BigDecimal? = warningPct
    override fun value8(): LocalDateTime? = firstSeen
    override fun value9(): LocalDateTime? = lastSeen
    override fun value10(): String? = digest

    override fun value1(value: String?): `X$statementsWithErrorsOrWarningsRecord` {
        set(0, value)
        return this
    }

    override fun value2(value: String?): `X$statementsWithErrorsOrWarningsRecord` {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): `X$statementsWithErrorsOrWarningsRecord` {
        set(2, value)
        return this
    }

    override fun value4(value: ULong?): `X$statementsWithErrorsOrWarningsRecord` {
        set(3, value)
        return this
    }

    override fun value5(value: BigDecimal?): `X$statementsWithErrorsOrWarningsRecord` {
        set(4, value)
        return this
    }

    override fun value6(value: ULong?): `X$statementsWithErrorsOrWarningsRecord` {
        set(5, value)
        return this
    }

    override fun value7(value: BigDecimal?): `X$statementsWithErrorsOrWarningsRecord` {
        set(6, value)
        return this
    }

    override fun value8(value: LocalDateTime?): `X$statementsWithErrorsOrWarningsRecord` {
        set(7, value)
        return this
    }

    override fun value9(value: LocalDateTime?): `X$statementsWithErrorsOrWarningsRecord` {
        set(8, value)
        return this
    }

    override fun value10(value: String?): `X$statementsWithErrorsOrWarningsRecord` {
        set(9, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: ULong?, value4: ULong?, value5: BigDecimal?, value6: ULong?, value7: BigDecimal?, value8: LocalDateTime?, value9: LocalDateTime?, value10: String?): `X$statementsWithErrorsOrWarningsRecord` {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised `X$statementsWithErrorsOrWarningsRecord`
     */
    constructor(query: String? = null, db: String? = null, execCount: ULong? = null, errors: ULong? = null, errorPct: BigDecimal? = null, warnings: ULong? = null, warningPct: BigDecimal? = null, firstSeen: LocalDateTime? = null, lastSeen: LocalDateTime? = null, digest: String? = null): this() {
        this.query = query
        this.db = db
        this.execCount = execCount
        this.errors = errors
        this.errorPct = errorPct
        this.warnings = warnings
        this.warningPct = warningPct
        this.firstSeen = firstSeen
        this.lastSeen = lastSeen
        this.digest = digest
        resetChangedOnNotNull()
    }
}
