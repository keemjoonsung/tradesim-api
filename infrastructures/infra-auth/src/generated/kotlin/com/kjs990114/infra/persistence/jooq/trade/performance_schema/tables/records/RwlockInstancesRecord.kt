/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.RwlockInstances

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RwlockInstancesRecord() : UpdatableRecordImpl<RwlockInstancesRecord>(RwlockInstances.RWLOCK_INSTANCES), Record4<String?, ULong?, ULong?, UInteger?> {

    open var name: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var objectInstanceBegin: ULong?
        set(value): Unit = set(1, value)
        get(): ULong? = get(1) as ULong?

    open var writeLockedByThreadId: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var readLockedByCount: UInteger?
        set(value): Unit = set(3, value)
        get(): UInteger? = get(3) as UInteger?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<ULong?> = super.key() as Record1<ULong?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, ULong?, ULong?, UInteger?> = super.fieldsRow() as Row4<String?, ULong?, ULong?, UInteger?>
    override fun valuesRow(): Row4<String?, ULong?, ULong?, UInteger?> = super.valuesRow() as Row4<String?, ULong?, ULong?, UInteger?>
    override fun field1(): Field<String?> = RwlockInstances.RWLOCK_INSTANCES.NAME
    override fun field2(): Field<ULong?> = RwlockInstances.RWLOCK_INSTANCES.OBJECT_INSTANCE_BEGIN
    override fun field3(): Field<ULong?> = RwlockInstances.RWLOCK_INSTANCES.WRITE_LOCKED_BY_THREAD_ID
    override fun field4(): Field<UInteger?> = RwlockInstances.RWLOCK_INSTANCES.READ_LOCKED_BY_COUNT
    override fun component1(): String? = name
    override fun component2(): ULong? = objectInstanceBegin
    override fun component3(): ULong? = writeLockedByThreadId
    override fun component4(): UInteger? = readLockedByCount
    override fun value1(): String? = name
    override fun value2(): ULong? = objectInstanceBegin
    override fun value3(): ULong? = writeLockedByThreadId
    override fun value4(): UInteger? = readLockedByCount

    override fun value1(value: String?): RwlockInstancesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: ULong?): RwlockInstancesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): RwlockInstancesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: UInteger?): RwlockInstancesRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: ULong?, value3: ULong?, value4: UInteger?): RwlockInstancesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised RwlockInstancesRecord
     */
    constructor(name: String? = null, objectInstanceBegin: ULong? = null, writeLockedByThreadId: ULong? = null, readLockedByCount: UInteger? = null): this() {
        this.name = name
        this.objectInstanceBegin = objectInstanceBegin
        this.writeLockedByThreadId = writeLockedByThreadId
        this.readLockedByCount = readLockedByCount
        resetChangedOnNotNull()
    }
}
