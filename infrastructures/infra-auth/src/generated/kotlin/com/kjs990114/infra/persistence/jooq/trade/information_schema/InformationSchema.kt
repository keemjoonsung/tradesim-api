/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema


import com.kjs990114.infra.persistence.jooq.trade.DefaultCatalog
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.AdministrableRoleAuthorizations
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.ApplicableRoles
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.CharacterSets
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.CheckConstraints
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.CollationCharacterSetApplicability
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Collations
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.ColumnPrivileges
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.ColumnStatistics
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Columns
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.ColumnsExtensions
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.EnabledRoles
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Engines
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Events
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Files
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbBufferPage
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbBufferPageLru
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbBufferPoolStats
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbCachedIndexes
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbCmp
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbCmpPerIndex
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbCmpPerIndexReset
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbCmpReset
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbCmpmem
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbCmpmemReset
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbColumns
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbDatafiles
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbFields
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbForeign
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbForeignCols
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbFtBeingDeleted
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbFtConfig
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbFtDefaultStopword
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbFtDeleted
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbFtIndexCache
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbFtIndexTable
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbIndexes
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbMetrics
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbSessionTempTablespaces
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbTables
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbTablespaces
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbTablespacesBrief
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbTablestats
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbTempTableInfo
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbTrx
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.InnodbVirtual
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.KeyColumnUsage
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Keywords
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.OptimizerTrace
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Parameters
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Partitions
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Plugins
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Processlist
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Profiling
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.ReferentialConstraints
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.ResourceGroups
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.RoleColumnGrants
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.RoleRoutineGrants
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.RoleTableGrants
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Routines
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.SchemaPrivileges
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Schemata
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.SchemataExtensions
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.StGeometryColumns
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.StSpatialReferenceSystems
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.StUnitsOfMeasure
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Statistics
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.TableConstraints
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.TableConstraintsExtensions
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.TablePrivileges
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Tables
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.TablesExtensions
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Tablespaces
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.TablespacesExtensions
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Triggers
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.UserAttributes
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.UserPrivileges
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.ViewRoutineUsage
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.ViewTableUsage
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Views

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InformationSchema : SchemaImpl("information_schema", DefaultCatalog.DEFAULT_CATALOG) {
    companion object {

        /**
         * The reference instance of <code>information_schema</code>
         */
        val INFORMATION_SCHEMA: InformationSchema = InformationSchema()
    }

    /**
     * The table
     * <code>information_schema.ADMINISTRABLE_ROLE_AUTHORIZATIONS</code>.
     */
    val ADMINISTRABLE_ROLE_AUTHORIZATIONS: AdministrableRoleAuthorizations get() = AdministrableRoleAuthorizations.ADMINISTRABLE_ROLE_AUTHORIZATIONS

    /**
     * The table <code>information_schema.APPLICABLE_ROLES</code>.
     */
    val APPLICABLE_ROLES: ApplicableRoles get() = ApplicableRoles.APPLICABLE_ROLES

    /**
     * The table <code>information_schema.CHARACTER_SETS</code>.
     */
    val CHARACTER_SETS: CharacterSets get() = CharacterSets.CHARACTER_SETS

    /**
     * The table <code>information_schema.CHECK_CONSTRAINTS</code>.
     */
    val CHECK_CONSTRAINTS: CheckConstraints get() = CheckConstraints.CHECK_CONSTRAINTS

    /**
     * The table
     * <code>information_schema.COLLATION_CHARACTER_SET_APPLICABILITY</code>.
     */
    val COLLATION_CHARACTER_SET_APPLICABILITY: CollationCharacterSetApplicability get() = CollationCharacterSetApplicability.COLLATION_CHARACTER_SET_APPLICABILITY

    /**
     * The table <code>information_schema.COLLATIONS</code>.
     */
    val COLLATIONS: Collations get() = Collations.COLLATIONS

    /**
     * The table <code>information_schema.COLUMN_PRIVILEGES</code>.
     */
    val COLUMN_PRIVILEGES: ColumnPrivileges get() = ColumnPrivileges.COLUMN_PRIVILEGES

    /**
     * The table <code>information_schema.COLUMN_STATISTICS</code>.
     */
    val COLUMN_STATISTICS: ColumnStatistics get() = ColumnStatistics.COLUMN_STATISTICS

    /**
     * The table <code>information_schema.COLUMNS</code>.
     */
    val COLUMNS: Columns get() = Columns.COLUMNS

    /**
     * The table <code>information_schema.COLUMNS_EXTENSIONS</code>.
     */
    val COLUMNS_EXTENSIONS: ColumnsExtensions get() = ColumnsExtensions.COLUMNS_EXTENSIONS

    /**
     * The table <code>information_schema.ENABLED_ROLES</code>.
     */
    val ENABLED_ROLES: EnabledRoles get() = EnabledRoles.ENABLED_ROLES

    /**
     * The table <code>information_schema.ENGINES</code>.
     */
    val ENGINES: Engines get() = Engines.ENGINES

    /**
     * The table <code>information_schema.EVENTS</code>.
     */
    val EVENTS: Events get() = Events.EVENTS

    /**
     * The table <code>information_schema.FILES</code>.
     */
    val FILES: Files get() = Files.FILES

    /**
     * The table <code>information_schema.INNODB_BUFFER_PAGE</code>.
     */
    val INNODB_BUFFER_PAGE: InnodbBufferPage get() = InnodbBufferPage.INNODB_BUFFER_PAGE

    /**
     * The table <code>information_schema.INNODB_BUFFER_PAGE_LRU</code>.
     */
    val INNODB_BUFFER_PAGE_LRU: InnodbBufferPageLru get() = InnodbBufferPageLru.INNODB_BUFFER_PAGE_LRU

    /**
     * The table <code>information_schema.INNODB_BUFFER_POOL_STATS</code>.
     */
    val INNODB_BUFFER_POOL_STATS: InnodbBufferPoolStats get() = InnodbBufferPoolStats.INNODB_BUFFER_POOL_STATS

    /**
     * The table <code>information_schema.INNODB_CACHED_INDEXES</code>.
     */
    val INNODB_CACHED_INDEXES: InnodbCachedIndexes get() = InnodbCachedIndexes.INNODB_CACHED_INDEXES

    /**
     * The table <code>information_schema.INNODB_CMP</code>.
     */
    val INNODB_CMP: InnodbCmp get() = InnodbCmp.INNODB_CMP

    /**
     * The table <code>information_schema.INNODB_CMP_PER_INDEX</code>.
     */
    val INNODB_CMP_PER_INDEX: InnodbCmpPerIndex get() = InnodbCmpPerIndex.INNODB_CMP_PER_INDEX

    /**
     * The table <code>information_schema.INNODB_CMP_PER_INDEX_RESET</code>.
     */
    val INNODB_CMP_PER_INDEX_RESET: InnodbCmpPerIndexReset get() = InnodbCmpPerIndexReset.INNODB_CMP_PER_INDEX_RESET

    /**
     * The table <code>information_schema.INNODB_CMP_RESET</code>.
     */
    val INNODB_CMP_RESET: InnodbCmpReset get() = InnodbCmpReset.INNODB_CMP_RESET

    /**
     * The table <code>information_schema.INNODB_CMPMEM</code>.
     */
    val INNODB_CMPMEM: InnodbCmpmem get() = InnodbCmpmem.INNODB_CMPMEM

    /**
     * The table <code>information_schema.INNODB_CMPMEM_RESET</code>.
     */
    val INNODB_CMPMEM_RESET: InnodbCmpmemReset get() = InnodbCmpmemReset.INNODB_CMPMEM_RESET

    /**
     * The table <code>information_schema.INNODB_COLUMNS</code>.
     */
    val INNODB_COLUMNS: InnodbColumns get() = InnodbColumns.INNODB_COLUMNS

    /**
     * The table <code>information_schema.INNODB_DATAFILES</code>.
     */
    val INNODB_DATAFILES: InnodbDatafiles get() = InnodbDatafiles.INNODB_DATAFILES

    /**
     * The table <code>information_schema.INNODB_FIELDS</code>.
     */
    val INNODB_FIELDS: InnodbFields get() = InnodbFields.INNODB_FIELDS

    /**
     * The table <code>information_schema.INNODB_FOREIGN</code>.
     */
    val INNODB_FOREIGN: InnodbForeign get() = InnodbForeign.INNODB_FOREIGN

    /**
     * The table <code>information_schema.INNODB_FOREIGN_COLS</code>.
     */
    val INNODB_FOREIGN_COLS: InnodbForeignCols get() = InnodbForeignCols.INNODB_FOREIGN_COLS

    /**
     * The table <code>information_schema.INNODB_FT_BEING_DELETED</code>.
     */
    val INNODB_FT_BEING_DELETED: InnodbFtBeingDeleted get() = InnodbFtBeingDeleted.INNODB_FT_BEING_DELETED

    /**
     * The table <code>information_schema.INNODB_FT_CONFIG</code>.
     */
    val INNODB_FT_CONFIG: InnodbFtConfig get() = InnodbFtConfig.INNODB_FT_CONFIG

    /**
     * The table <code>information_schema.INNODB_FT_DEFAULT_STOPWORD</code>.
     */
    val INNODB_FT_DEFAULT_STOPWORD: InnodbFtDefaultStopword get() = InnodbFtDefaultStopword.INNODB_FT_DEFAULT_STOPWORD

    /**
     * The table <code>information_schema.INNODB_FT_DELETED</code>.
     */
    val INNODB_FT_DELETED: InnodbFtDeleted get() = InnodbFtDeleted.INNODB_FT_DELETED

    /**
     * The table <code>information_schema.INNODB_FT_INDEX_CACHE</code>.
     */
    val INNODB_FT_INDEX_CACHE: InnodbFtIndexCache get() = InnodbFtIndexCache.INNODB_FT_INDEX_CACHE

    /**
     * The table <code>information_schema.INNODB_FT_INDEX_TABLE</code>.
     */
    val INNODB_FT_INDEX_TABLE: InnodbFtIndexTable get() = InnodbFtIndexTable.INNODB_FT_INDEX_TABLE

    /**
     * The table <code>information_schema.INNODB_INDEXES</code>.
     */
    val INNODB_INDEXES: InnodbIndexes get() = InnodbIndexes.INNODB_INDEXES

    /**
     * The table <code>information_schema.INNODB_METRICS</code>.
     */
    val INNODB_METRICS: InnodbMetrics get() = InnodbMetrics.INNODB_METRICS

    /**
     * The table
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES</code>.
     */
    val INNODB_SESSION_TEMP_TABLESPACES: InnodbSessionTempTablespaces get() = InnodbSessionTempTablespaces.INNODB_SESSION_TEMP_TABLESPACES

    /**
     * The table <code>information_schema.INNODB_TABLES</code>.
     */
    val INNODB_TABLES: InnodbTables get() = InnodbTables.INNODB_TABLES

    /**
     * The table <code>information_schema.INNODB_TABLESPACES</code>.
     */
    val INNODB_TABLESPACES: InnodbTablespaces get() = InnodbTablespaces.INNODB_TABLESPACES

    /**
     * The table <code>information_schema.INNODB_TABLESPACES_BRIEF</code>.
     */
    val INNODB_TABLESPACES_BRIEF: InnodbTablespacesBrief get() = InnodbTablespacesBrief.INNODB_TABLESPACES_BRIEF

    /**
     * The table <code>information_schema.INNODB_TABLESTATS</code>.
     */
    val INNODB_TABLESTATS: InnodbTablestats get() = InnodbTablestats.INNODB_TABLESTATS

    /**
     * The table <code>information_schema.INNODB_TEMP_TABLE_INFO</code>.
     */
    val INNODB_TEMP_TABLE_INFO: InnodbTempTableInfo get() = InnodbTempTableInfo.INNODB_TEMP_TABLE_INFO

    /**
     * The table <code>information_schema.INNODB_TRX</code>.
     */
    val INNODB_TRX: InnodbTrx get() = InnodbTrx.INNODB_TRX

    /**
     * The table <code>information_schema.INNODB_VIRTUAL</code>.
     */
    val INNODB_VIRTUAL: InnodbVirtual get() = InnodbVirtual.INNODB_VIRTUAL

    /**
     * The table <code>information_schema.KEY_COLUMN_USAGE</code>.
     */
    val KEY_COLUMN_USAGE: KeyColumnUsage get() = KeyColumnUsage.KEY_COLUMN_USAGE

    /**
     * The table <code>information_schema.KEYWORDS</code>.
     */
    val KEYWORDS: Keywords get() = Keywords.KEYWORDS

    /**
     * The table <code>information_schema.OPTIMIZER_TRACE</code>.
     */
    val OPTIMIZER_TRACE: OptimizerTrace get() = OptimizerTrace.OPTIMIZER_TRACE

    /**
     * The table <code>information_schema.PARAMETERS</code>.
     */
    val PARAMETERS: Parameters get() = Parameters.PARAMETERS

    /**
     * The table <code>information_schema.PARTITIONS</code>.
     */
    val PARTITIONS: Partitions get() = Partitions.PARTITIONS

    /**
     * The table <code>information_schema.PLUGINS</code>.
     */
    val PLUGINS: Plugins get() = Plugins.PLUGINS

    /**
     * The table <code>information_schema.PROCESSLIST</code>.
     */
    val PROCESSLIST: Processlist get() = Processlist.PROCESSLIST

    /**
     * The table <code>information_schema.PROFILING</code>.
     */
    val PROFILING: Profiling get() = Profiling.PROFILING

    /**
     * The table <code>information_schema.REFERENTIAL_CONSTRAINTS</code>.
     */
    val REFERENTIAL_CONSTRAINTS: ReferentialConstraints get() = ReferentialConstraints.REFERENTIAL_CONSTRAINTS

    /**
     * The table <code>information_schema.RESOURCE_GROUPS</code>.
     */
    val RESOURCE_GROUPS: ResourceGroups get() = ResourceGroups.RESOURCE_GROUPS

    /**
     * The table <code>information_schema.ROLE_COLUMN_GRANTS</code>.
     */
    val ROLE_COLUMN_GRANTS: RoleColumnGrants get() = RoleColumnGrants.ROLE_COLUMN_GRANTS

    /**
     * The table <code>information_schema.ROLE_ROUTINE_GRANTS</code>.
     */
    val ROLE_ROUTINE_GRANTS: RoleRoutineGrants get() = RoleRoutineGrants.ROLE_ROUTINE_GRANTS

    /**
     * The table <code>information_schema.ROLE_TABLE_GRANTS</code>.
     */
    val ROLE_TABLE_GRANTS: RoleTableGrants get() = RoleTableGrants.ROLE_TABLE_GRANTS

    /**
     * The table <code>information_schema.ROUTINES</code>.
     */
    val ROUTINES: Routines get() = Routines.ROUTINES

    /**
     * The table <code>information_schema.SCHEMA_PRIVILEGES</code>.
     */
    val SCHEMA_PRIVILEGES: SchemaPrivileges get() = SchemaPrivileges.SCHEMA_PRIVILEGES

    /**
     * The table <code>information_schema.SCHEMATA</code>.
     */
    val SCHEMATA: Schemata get() = Schemata.SCHEMATA

    /**
     * The table <code>information_schema.SCHEMATA_EXTENSIONS</code>.
     */
    val SCHEMATA_EXTENSIONS: SchemataExtensions get() = SchemataExtensions.SCHEMATA_EXTENSIONS

    /**
     * The table <code>information_schema.ST_GEOMETRY_COLUMNS</code>.
     */
    val ST_GEOMETRY_COLUMNS: StGeometryColumns get() = StGeometryColumns.ST_GEOMETRY_COLUMNS

    /**
     * The table <code>information_schema.ST_SPATIAL_REFERENCE_SYSTEMS</code>.
     */
    val ST_SPATIAL_REFERENCE_SYSTEMS: StSpatialReferenceSystems get() = StSpatialReferenceSystems.ST_SPATIAL_REFERENCE_SYSTEMS

    /**
     * The table <code>information_schema.ST_UNITS_OF_MEASURE</code>.
     */
    val ST_UNITS_OF_MEASURE: StUnitsOfMeasure get() = StUnitsOfMeasure.ST_UNITS_OF_MEASURE

    /**
     * The table <code>information_schema.STATISTICS</code>.
     */
    val STATISTICS: Statistics get() = Statistics.STATISTICS

    /**
     * The table <code>information_schema.TABLE_CONSTRAINTS</code>.
     */
    val TABLE_CONSTRAINTS: TableConstraints get() = TableConstraints.TABLE_CONSTRAINTS

    /**
     * The table <code>information_schema.TABLE_CONSTRAINTS_EXTENSIONS</code>.
     */
    val TABLE_CONSTRAINTS_EXTENSIONS: TableConstraintsExtensions get() = TableConstraintsExtensions.TABLE_CONSTRAINTS_EXTENSIONS

    /**
     * The table <code>information_schema.TABLE_PRIVILEGES</code>.
     */
    val TABLE_PRIVILEGES: TablePrivileges get() = TablePrivileges.TABLE_PRIVILEGES

    /**
     * The table <code>information_schema.TABLES</code>.
     */
    val TABLES: Tables get() = Tables.TABLES

    /**
     * The table <code>information_schema.TABLES_EXTENSIONS</code>.
     */
    val TABLES_EXTENSIONS: TablesExtensions get() = TablesExtensions.TABLES_EXTENSIONS

    /**
     * The table <code>information_schema.TABLESPACES</code>.
     */
    val TABLESPACES: Tablespaces get() = Tablespaces.TABLESPACES

    /**
     * The table <code>information_schema.TABLESPACES_EXTENSIONS</code>.
     */
    val TABLESPACES_EXTENSIONS: TablespacesExtensions get() = TablespacesExtensions.TABLESPACES_EXTENSIONS

    /**
     * The table <code>information_schema.TRIGGERS</code>.
     */
    val TRIGGERS: Triggers get() = Triggers.TRIGGERS

    /**
     * The table <code>information_schema.USER_ATTRIBUTES</code>.
     */
    val USER_ATTRIBUTES: UserAttributes get() = UserAttributes.USER_ATTRIBUTES

    /**
     * The table <code>information_schema.USER_PRIVILEGES</code>.
     */
    val USER_PRIVILEGES: UserPrivileges get() = UserPrivileges.USER_PRIVILEGES

    /**
     * The table <code>information_schema.VIEW_ROUTINE_USAGE</code>.
     */
    val VIEW_ROUTINE_USAGE: ViewRoutineUsage get() = ViewRoutineUsage.VIEW_ROUTINE_USAGE

    /**
     * The table <code>information_schema.VIEW_TABLE_USAGE</code>.
     */
    val VIEW_TABLE_USAGE: ViewTableUsage get() = ViewTableUsage.VIEW_TABLE_USAGE

    /**
     * The table <code>information_schema.VIEWS</code>.
     */
    val VIEWS: Views get() = Views.VIEWS

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        AdministrableRoleAuthorizations.ADMINISTRABLE_ROLE_AUTHORIZATIONS,
        ApplicableRoles.APPLICABLE_ROLES,
        CharacterSets.CHARACTER_SETS,
        CheckConstraints.CHECK_CONSTRAINTS,
        CollationCharacterSetApplicability.COLLATION_CHARACTER_SET_APPLICABILITY,
        Collations.COLLATIONS,
        ColumnPrivileges.COLUMN_PRIVILEGES,
        ColumnStatistics.COLUMN_STATISTICS,
        Columns.COLUMNS,
        ColumnsExtensions.COLUMNS_EXTENSIONS,
        EnabledRoles.ENABLED_ROLES,
        Engines.ENGINES,
        Events.EVENTS,
        Files.FILES,
        InnodbBufferPage.INNODB_BUFFER_PAGE,
        InnodbBufferPageLru.INNODB_BUFFER_PAGE_LRU,
        InnodbBufferPoolStats.INNODB_BUFFER_POOL_STATS,
        InnodbCachedIndexes.INNODB_CACHED_INDEXES,
        InnodbCmp.INNODB_CMP,
        InnodbCmpPerIndex.INNODB_CMP_PER_INDEX,
        InnodbCmpPerIndexReset.INNODB_CMP_PER_INDEX_RESET,
        InnodbCmpReset.INNODB_CMP_RESET,
        InnodbCmpmem.INNODB_CMPMEM,
        InnodbCmpmemReset.INNODB_CMPMEM_RESET,
        InnodbColumns.INNODB_COLUMNS,
        InnodbDatafiles.INNODB_DATAFILES,
        InnodbFields.INNODB_FIELDS,
        InnodbForeign.INNODB_FOREIGN,
        InnodbForeignCols.INNODB_FOREIGN_COLS,
        InnodbFtBeingDeleted.INNODB_FT_BEING_DELETED,
        InnodbFtConfig.INNODB_FT_CONFIG,
        InnodbFtDefaultStopword.INNODB_FT_DEFAULT_STOPWORD,
        InnodbFtDeleted.INNODB_FT_DELETED,
        InnodbFtIndexCache.INNODB_FT_INDEX_CACHE,
        InnodbFtIndexTable.INNODB_FT_INDEX_TABLE,
        InnodbIndexes.INNODB_INDEXES,
        InnodbMetrics.INNODB_METRICS,
        InnodbSessionTempTablespaces.INNODB_SESSION_TEMP_TABLESPACES,
        InnodbTables.INNODB_TABLES,
        InnodbTablespaces.INNODB_TABLESPACES,
        InnodbTablespacesBrief.INNODB_TABLESPACES_BRIEF,
        InnodbTablestats.INNODB_TABLESTATS,
        InnodbTempTableInfo.INNODB_TEMP_TABLE_INFO,
        InnodbTrx.INNODB_TRX,
        InnodbVirtual.INNODB_VIRTUAL,
        KeyColumnUsage.KEY_COLUMN_USAGE,
        Keywords.KEYWORDS,
        OptimizerTrace.OPTIMIZER_TRACE,
        Parameters.PARAMETERS,
        Partitions.PARTITIONS,
        Plugins.PLUGINS,
        Processlist.PROCESSLIST,
        Profiling.PROFILING,
        ReferentialConstraints.REFERENTIAL_CONSTRAINTS,
        ResourceGroups.RESOURCE_GROUPS,
        RoleColumnGrants.ROLE_COLUMN_GRANTS,
        RoleRoutineGrants.ROLE_ROUTINE_GRANTS,
        RoleTableGrants.ROLE_TABLE_GRANTS,
        Routines.ROUTINES,
        SchemaPrivileges.SCHEMA_PRIVILEGES,
        Schemata.SCHEMATA,
        SchemataExtensions.SCHEMATA_EXTENSIONS,
        StGeometryColumns.ST_GEOMETRY_COLUMNS,
        StSpatialReferenceSystems.ST_SPATIAL_REFERENCE_SYSTEMS,
        StUnitsOfMeasure.ST_UNITS_OF_MEASURE,
        Statistics.STATISTICS,
        TableConstraints.TABLE_CONSTRAINTS,
        TableConstraintsExtensions.TABLE_CONSTRAINTS_EXTENSIONS,
        TablePrivileges.TABLE_PRIVILEGES,
        Tables.TABLES,
        TablesExtensions.TABLES_EXTENSIONS,
        Tablespaces.TABLESPACES,
        TablespacesExtensions.TABLESPACES_EXTENSIONS,
        Triggers.TRIGGERS,
        UserAttributes.USER_ATTRIBUTES,
        UserPrivileges.USER_PRIVILEGES,
        ViewRoutineUsage.VIEW_ROUTINE_USAGE,
        ViewTableUsage.VIEW_TABLE_USAGE,
        Views.VIEWS
    )
}
