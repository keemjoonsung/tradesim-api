/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Component

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger


/**
 * Components
 */
@Suppress("UNCHECKED_CAST")
open class ComponentRecord() : UpdatableRecordImpl<ComponentRecord>(Component.COMPONENT), Record3<UInteger?, UInteger?, String?> {

    open var componentId: UInteger?
        set(value): Unit = set(0, value)
        get(): UInteger? = get(0) as UInteger?

    open var componentGroupId: UInteger?
        set(value): Unit = set(1, value)
        get(): UInteger? = get(1) as UInteger?

    open var componentUrn: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UInteger?> = super.key() as Record1<UInteger?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UInteger?, UInteger?, String?> = super.fieldsRow() as Row3<UInteger?, UInteger?, String?>
    override fun valuesRow(): Row3<UInteger?, UInteger?, String?> = super.valuesRow() as Row3<UInteger?, UInteger?, String?>
    override fun field1(): Field<UInteger?> = Component.COMPONENT.COMPONENT_ID
    override fun field2(): Field<UInteger?> = Component.COMPONENT.COMPONENT_GROUP_ID
    override fun field3(): Field<String?> = Component.COMPONENT.COMPONENT_URN
    override fun component1(): UInteger? = componentId
    override fun component2(): UInteger? = componentGroupId
    override fun component3(): String? = componentUrn
    override fun value1(): UInteger? = componentId
    override fun value2(): UInteger? = componentGroupId
    override fun value3(): String? = componentUrn

    override fun value1(value: UInteger?): ComponentRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UInteger?): ComponentRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): ComponentRecord {
        set(2, value)
        return this
    }

    override fun values(value1: UInteger?, value2: UInteger?, value3: String?): ComponentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised ComponentRecord
     */
    constructor(componentId: UInteger? = null, componentGroupId: UInteger? = null, componentUrn: String? = null): this() {
        this.componentId = componentId
        this.componentGroupId = componentGroupId
        this.componentUrn = componentUrn
        resetChangedOnNotNull()
    }
}
