/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Partitions

import java.time.LocalDateTime

import org.jooq.impl.TableRecordImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PartitionsRecord() : TableRecordImpl<PartitionsRecord>(Partitions.PARTITIONS) {

    open var tableCatalog: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableSchema: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var tableName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var partitionName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var subpartitionName: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var partitionOrdinalPosition: UInteger?
        set(value): Unit = set(5, value)
        get(): UInteger? = get(5) as UInteger?

    open var subpartitionOrdinalPosition: UInteger?
        set(value): Unit = set(6, value)
        get(): UInteger? = get(6) as UInteger?

    open var partitionMethod: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var subpartitionMethod: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var partitionExpression: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var subpartitionExpression: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    open var partitionDescription: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    open var tableRows: ULong?
        set(value): Unit = set(12, value)
        get(): ULong? = get(12) as ULong?

    open var avgRowLength: ULong?
        set(value): Unit = set(13, value)
        get(): ULong? = get(13) as ULong?

    open var dataLength: ULong?
        set(value): Unit = set(14, value)
        get(): ULong? = get(14) as ULong?

    open var maxDataLength: ULong?
        set(value): Unit = set(15, value)
        get(): ULong? = get(15) as ULong?

    open var indexLength: ULong?
        set(value): Unit = set(16, value)
        get(): ULong? = get(16) as ULong?

    open var dataFree: ULong?
        set(value): Unit = set(17, value)
        get(): ULong? = get(17) as ULong?

    open var createTime: LocalDateTime?
        set(value): Unit = set(18, value)
        get(): LocalDateTime? = get(18) as LocalDateTime?

    open var updateTime: LocalDateTime?
        set(value): Unit = set(19, value)
        get(): LocalDateTime? = get(19) as LocalDateTime?

    open var checkTime: LocalDateTime?
        set(value): Unit = set(20, value)
        get(): LocalDateTime? = get(20) as LocalDateTime?

    open var checksum: Long?
        set(value): Unit = set(21, value)
        get(): Long? = get(21) as Long?

    open var partitionComment: String?
        set(value): Unit = set(22, value)
        get(): String? = get(22) as String?

    open var nodegroup: String?
        set(value): Unit = set(23, value)
        get(): String? = get(23) as String?

    open var tablespaceName: String?
        set(value): Unit = set(24, value)
        get(): String? = get(24) as String?

    /**
     * Create a detached, initialised PartitionsRecord
     */
    constructor(tableCatalog: String? = null, tableSchema: String? = null, tableName: String? = null, partitionName: String? = null, subpartitionName: String? = null, partitionOrdinalPosition: UInteger? = null, subpartitionOrdinalPosition: UInteger? = null, partitionMethod: String? = null, subpartitionMethod: String? = null, partitionExpression: String? = null, subpartitionExpression: String? = null, partitionDescription: String? = null, tableRows: ULong? = null, avgRowLength: ULong? = null, dataLength: ULong? = null, maxDataLength: ULong? = null, indexLength: ULong? = null, dataFree: ULong? = null, createTime: LocalDateTime? = null, updateTime: LocalDateTime? = null, checkTime: LocalDateTime? = null, checksum: Long? = null, partitionComment: String? = null, nodegroup: String? = null, tablespaceName: String? = null): this() {
        this.tableCatalog = tableCatalog
        this.tableSchema = tableSchema
        this.tableName = tableName
        this.partitionName = partitionName
        this.subpartitionName = subpartitionName
        this.partitionOrdinalPosition = partitionOrdinalPosition
        this.subpartitionOrdinalPosition = subpartitionOrdinalPosition
        this.partitionMethod = partitionMethod
        this.subpartitionMethod = subpartitionMethod
        this.partitionExpression = partitionExpression
        this.subpartitionExpression = subpartitionExpression
        this.partitionDescription = partitionDescription
        this.tableRows = tableRows
        this.avgRowLength = avgRowLength
        this.dataLength = dataLength
        this.maxDataLength = maxDataLength
        this.indexLength = indexLength
        this.dataFree = dataFree
        this.createTime = createTime
        this.updateTime = updateTime
        this.checkTime = checkTime
        this.checksum = checksum
        this.partitionComment = partitionComment
        this.nodegroup = nodegroup
        this.tablespaceName = tablespaceName
        resetChangedOnNotNull()
    }
}
