/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ErrorLogPrio
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.ERROR_LOG_ERROR_CODE
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.ERROR_LOG_PRIO
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.ERROR_LOG_SUBSYSTEM
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.ERROR_LOG_THREAD_ID
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_ERROR_LOG_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.ErrorLogRecord

import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ErrorLog(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ErrorLogRecord>?,
    parentPath: InverseForeignKey<out Record, ErrorLogRecord>?,
    aliased: Table<ErrorLogRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ErrorLogRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.error_log</code>
         */
        val ERROR_LOG: ErrorLog = ErrorLog()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ErrorLogRecord> = ErrorLogRecord::class.java

    /**
     * The column <code>performance_schema.error_log.LOGGED</code>.
     */
    val LOGGED: TableField<ErrorLogRecord, LocalDateTime?> = createField(DSL.name("LOGGED"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>performance_schema.error_log.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<ErrorLogRecord, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.error_log.PRIO</code>.
     */
    val PRIO: TableField<ErrorLogRecord, ErrorLogPrio?> = createField(DSL.name("PRIO"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(ErrorLogPrio::class.java), this, "")

    /**
     * The column <code>performance_schema.error_log.ERROR_CODE</code>.
     */
    val ERROR_CODE: TableField<ErrorLogRecord, String?> = createField(DSL.name("ERROR_CODE"), SQLDataType.VARCHAR(10), this, "")

    /**
     * The column <code>performance_schema.error_log.SUBSYSTEM</code>.
     */
    val SUBSYSTEM: TableField<ErrorLogRecord, String?> = createField(DSL.name("SUBSYSTEM"), SQLDataType.VARCHAR(7), this, "")

    /**
     * The column <code>performance_schema.error_log.DATA</code>.
     */
    val DATA: TableField<ErrorLogRecord, String?> = createField(DSL.name("DATA"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ErrorLogRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ErrorLogRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ErrorLogRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>performance_schema.error_log</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.error_log</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.error_log</code> table reference
     */
    constructor(): this(DSL.name("error_log"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getIndexes(): List<Index> = listOf(ERROR_LOG_ERROR_CODE, ERROR_LOG_PRIO, ERROR_LOG_SUBSYSTEM, ERROR_LOG_THREAD_ID)
    override fun getPrimaryKey(): UniqueKey<ErrorLogRecord> = KEY_ERROR_LOG_PRIMARY
    override fun `as`(alias: String): ErrorLog = ErrorLog(DSL.name(alias), this)
    override fun `as`(alias: Name): ErrorLog = ErrorLog(alias, this)
    override fun `as`(alias: Table<*>): ErrorLog = ErrorLog(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ErrorLog = ErrorLog(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ErrorLog = ErrorLog(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ErrorLog = ErrorLog(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ErrorLog = ErrorLog(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ErrorLog = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ErrorLog = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ErrorLog = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ErrorLog = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ErrorLog = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ErrorLog = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ErrorLog = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ErrorLog = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ErrorLog = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<LocalDateTime?, ULong?, ErrorLogPrio?, String?, String?, String?> = super.fieldsRow() as Row6<LocalDateTime?, ULong?, ErrorLogPrio?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (LocalDateTime?, ULong?, ErrorLogPrio?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (LocalDateTime?, ULong?, ErrorLogPrio?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
