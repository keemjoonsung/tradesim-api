/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import java.math.BigInteger

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Row1
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class `X$memoryGlobalTotalRecord`() : TableRecordImpl<`X$memoryGlobalTotalRecord`>(com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$memoryGlobalTotal`.`X$MEMORY_GLOBAL_TOTAL`), Record1<BigInteger?> {

    open var totalAllocated: BigInteger?
        set(value): Unit = set(0, value)
        get(): BigInteger? = get(0) as BigInteger?

    // -------------------------------------------------------------------------
    // Record1 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row1<BigInteger?> = super.fieldsRow() as Row1<BigInteger?>
    override fun valuesRow(): Row1<BigInteger?> = super.valuesRow() as Row1<BigInteger?>
    override fun field1(): Field<BigInteger?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$memoryGlobalTotal`.`X$MEMORY_GLOBAL_TOTAL`.TOTAL_ALLOCATED
    override fun component1(): BigInteger? = totalAllocated
    override fun value1(): BigInteger? = totalAllocated

    override fun value1(value: BigInteger?): `X$memoryGlobalTotalRecord` {
        set(0, value)
        return this
    }

    override fun values(value1: BigInteger?): `X$memoryGlobalTotalRecord` {
        this.value1(value1)
        return this
    }

    /**
     * Create a detached, initialised `X$memoryGlobalTotalRecord`
     */
    constructor(totalAllocated: BigInteger? = null): this() {
        this.totalAllocated = totalAllocated
        resetChangedOnNotNull()
    }
}
