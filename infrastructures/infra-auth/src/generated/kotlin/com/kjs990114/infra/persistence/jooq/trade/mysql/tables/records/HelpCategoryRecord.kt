/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpCategory

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UShort


/**
 * help categories
 */
@Suppress("UNCHECKED_CAST")
open class HelpCategoryRecord() : UpdatableRecordImpl<HelpCategoryRecord>(HelpCategory.HELP_CATEGORY), Record4<UShort?, String?, UShort?, String?> {

    open var helpCategoryId: UShort?
        set(value): Unit = set(0, value)
        get(): UShort? = get(0) as UShort?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var parentCategoryId: UShort?
        set(value): Unit = set(2, value)
        get(): UShort? = get(2) as UShort?

    open var url: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UShort?> = super.key() as Record1<UShort?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<UShort?, String?, UShort?, String?> = super.fieldsRow() as Row4<UShort?, String?, UShort?, String?>
    override fun valuesRow(): Row4<UShort?, String?, UShort?, String?> = super.valuesRow() as Row4<UShort?, String?, UShort?, String?>
    override fun field1(): Field<UShort?> = HelpCategory.HELP_CATEGORY.HELP_CATEGORY_ID
    override fun field2(): Field<String?> = HelpCategory.HELP_CATEGORY.NAME
    override fun field3(): Field<UShort?> = HelpCategory.HELP_CATEGORY.PARENT_CATEGORY_ID
    override fun field4(): Field<String?> = HelpCategory.HELP_CATEGORY.URL
    override fun component1(): UShort? = helpCategoryId
    override fun component2(): String? = name
    override fun component3(): UShort? = parentCategoryId
    override fun component4(): String? = url
    override fun value1(): UShort? = helpCategoryId
    override fun value2(): String? = name
    override fun value3(): UShort? = parentCategoryId
    override fun value4(): String? = url

    override fun value1(value: UShort?): HelpCategoryRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): HelpCategoryRecord {
        set(1, value)
        return this
    }

    override fun value3(value: UShort?): HelpCategoryRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): HelpCategoryRecord {
        set(3, value)
        return this
    }

    override fun values(value1: UShort?, value2: String?, value3: UShort?, value4: String?): HelpCategoryRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised HelpCategoryRecord
     */
    constructor(helpCategoryId: UShort? = null, name: String? = null, parentCategoryId: UShort? = null, url: String? = null): this() {
        this.helpCategoryId = helpCategoryId
        this.name = name
        this.parentCategoryId = parentCategoryId
        this.url = url
        resetChangedOnNotNull()
    }
}
