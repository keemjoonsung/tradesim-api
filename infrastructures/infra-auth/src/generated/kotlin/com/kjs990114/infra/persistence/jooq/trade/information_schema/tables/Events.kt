/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.information_schema.InformationSchema
import com.kjs990114.infra.persistence.jooq.trade.information_schema.enums.EventsIntervalField
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records.EventsRecord

import java.time.LocalDateTime

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Events(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, EventsRecord>?,
    parentPath: InverseForeignKey<out Record, EventsRecord>?,
    aliased: Table<EventsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<EventsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.EVENTS</code>
         */
        val EVENTS: Events = Events()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EventsRecord> = EventsRecord::class.java

    /**
     * The column <code>information_schema.EVENTS.EVENT_CATALOG</code>.
     */
    val EVENT_CATALOG: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_CATALOG"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_SCHEMA</code>.
     */
    val EVENT_SCHEMA: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_NAME</code>.
     */
    val EVENT_NAME: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.DEFINER</code>.
     */
    val DEFINER: TableField<EventsRecord, String?> = createField(DSL.name("DEFINER"), SQLDataType.VARCHAR(288).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.TIME_ZONE</code>.
     */
    val TIME_ZONE: TableField<EventsRecord, String?> = createField(DSL.name("TIME_ZONE"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_BODY</code>.
     */
    val EVENT_BODY: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_BODY"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_DEFINITION</code>.
     */
    val EVENT_DEFINITION: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_DEFINITION"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_TYPE</code>.
     */
    val EVENT_TYPE: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_TYPE"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.EVENTS.EXECUTE_AT</code>.
     */
    val EXECUTE_AT: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("EXECUTE_AT"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.EVENTS.INTERVAL_VALUE</code>.
     */
    val INTERVAL_VALUE: TableField<EventsRecord, String?> = createField(DSL.name("INTERVAL_VALUE"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.EVENTS.INTERVAL_FIELD</code>.
     */
    val INTERVAL_FIELD: TableField<EventsRecord, EventsIntervalField?> = createField(DSL.name("INTERVAL_FIELD"), SQLDataType.VARCHAR(18).asEnumDataType(EventsIntervalField::class.java), this, "")

    /**
     * The column <code>information_schema.EVENTS.SQL_MODE</code>.
     */
    val SQL_MODE: TableField<EventsRecord, String?> = createField(DSL.name("SQL_MODE"), SQLDataType.VARCHAR(520).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.STARTS</code>.
     */
    val STARTS: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("STARTS"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.EVENTS.ENDS</code>.
     */
    val ENDS: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("ENDS"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.EVENTS.STATUS</code>.
     */
    val STATUS: TableField<EventsRecord, String?> = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(21).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.EVENTS.ON_COMPLETION</code>.
     */
    val ON_COMPLETION: TableField<EventsRecord, String?> = createField(DSL.name("ON_COMPLETION"), SQLDataType.VARCHAR(12).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.EVENTS.CREATED</code>.
     */
    val CREATED: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("CREATED"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.LAST_ALTERED</code>.
     */
    val LAST_ALTERED: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("LAST_ALTERED"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.LAST_EXECUTED</code>.
     */
    val LAST_EXECUTED: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("LAST_EXECUTED"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_COMMENT</code>.
     */
    val EVENT_COMMENT: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_COMMENT"), SQLDataType.VARCHAR(2048).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.ORIGINATOR</code>.
     */
    val ORIGINATOR: TableField<EventsRecord, UInteger?> = createField(DSL.name("ORIGINATOR"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.CHARACTER_SET_CLIENT</code>.
     */
    val CHARACTER_SET_CLIENT: TableField<EventsRecord, String?> = createField(DSL.name("CHARACTER_SET_CLIENT"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.COLLATION_CONNECTION</code>.
     */
    val COLLATION_CONNECTION: TableField<EventsRecord, String?> = createField(DSL.name("COLLATION_CONNECTION"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.DATABASE_COLLATION</code>.
     */
    val DATABASE_COLLATION: TableField<EventsRecord, String?> = createField(DSL.name("DATABASE_COLLATION"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<EventsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<EventsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<EventsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.EVENTS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.EVENTS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.EVENTS</code> table reference
     */
    constructor(): this(DSL.name("EVENTS"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Events = Events(DSL.name(alias), this)
    override fun `as`(alias: Name): Events = Events(alias, this)
    override fun `as`(alias: Table<*>): Events = Events(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Events = Events(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Events = Events(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Events = Events(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Events = Events(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Events = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Events = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Events = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Events = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Events = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Events = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Events = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Events = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Events = where(DSL.notExists(select))
}
