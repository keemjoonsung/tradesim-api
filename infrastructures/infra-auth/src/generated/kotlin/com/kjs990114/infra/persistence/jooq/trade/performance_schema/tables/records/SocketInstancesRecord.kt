/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.SocketInstancesState
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.SocketInstances

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SocketInstancesRecord() : UpdatableRecordImpl<SocketInstancesRecord>(SocketInstances.SOCKET_INSTANCES), Record7<String?, ULong?, ULong?, Int?, String?, Int?, SocketInstancesState?> {

    open var eventName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var objectInstanceBegin: ULong?
        set(value): Unit = set(1, value)
        get(): ULong? = get(1) as ULong?

    open var threadId: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var socketId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var ip: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var port: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var state: SocketInstancesState?
        set(value): Unit = set(6, value)
        get(): SocketInstancesState? = get(6) as SocketInstancesState?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<ULong?> = super.key() as Record1<ULong?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<String?, ULong?, ULong?, Int?, String?, Int?, SocketInstancesState?> = super.fieldsRow() as Row7<String?, ULong?, ULong?, Int?, String?, Int?, SocketInstancesState?>
    override fun valuesRow(): Row7<String?, ULong?, ULong?, Int?, String?, Int?, SocketInstancesState?> = super.valuesRow() as Row7<String?, ULong?, ULong?, Int?, String?, Int?, SocketInstancesState?>
    override fun field1(): Field<String?> = SocketInstances.SOCKET_INSTANCES.EVENT_NAME
    override fun field2(): Field<ULong?> = SocketInstances.SOCKET_INSTANCES.OBJECT_INSTANCE_BEGIN
    override fun field3(): Field<ULong?> = SocketInstances.SOCKET_INSTANCES.THREAD_ID
    override fun field4(): Field<Int?> = SocketInstances.SOCKET_INSTANCES.SOCKET_ID
    override fun field5(): Field<String?> = SocketInstances.SOCKET_INSTANCES.IP
    override fun field6(): Field<Int?> = SocketInstances.SOCKET_INSTANCES.PORT
    override fun field7(): Field<SocketInstancesState?> = SocketInstances.SOCKET_INSTANCES.STATE
    override fun component1(): String? = eventName
    override fun component2(): ULong? = objectInstanceBegin
    override fun component3(): ULong? = threadId
    override fun component4(): Int? = socketId
    override fun component5(): String? = ip
    override fun component6(): Int? = port
    override fun component7(): SocketInstancesState? = state
    override fun value1(): String? = eventName
    override fun value2(): ULong? = objectInstanceBegin
    override fun value3(): ULong? = threadId
    override fun value4(): Int? = socketId
    override fun value5(): String? = ip
    override fun value6(): Int? = port
    override fun value7(): SocketInstancesState? = state

    override fun value1(value: String?): SocketInstancesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: ULong?): SocketInstancesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): SocketInstancesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): SocketInstancesRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): SocketInstancesRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): SocketInstancesRecord {
        set(5, value)
        return this
    }

    override fun value7(value: SocketInstancesState?): SocketInstancesRecord {
        set(6, value)
        return this
    }

    override fun values(value1: String?, value2: ULong?, value3: ULong?, value4: Int?, value5: String?, value6: Int?, value7: SocketInstancesState?): SocketInstancesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised SocketInstancesRecord
     */
    constructor(eventName: String? = null, objectInstanceBegin: ULong? = null, threadId: ULong? = null, socketId: Int? = null, ip: String? = null, port: Int? = null, state: SocketInstancesState? = null): this() {
        this.eventName = eventName
        this.objectInstanceBegin = objectInstanceBegin
        this.threadId = threadId
        this.socketId = socketId
        this.ip = ip
        this.port = port
        this.state = state
        resetChangedOnNotNull()
    }
}
