/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.InnodbIndexStats

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbIndexStatsRecord() : UpdatableRecordImpl<InnodbIndexStatsRecord>(InnodbIndexStats.INNODB_INDEX_STATS), Record8<String?, String?, String?, LocalDateTime?, String?, ULong?, ULong?, String?> {

    open var databaseName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var indexName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    open var statName: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var statValue: ULong?
        set(value): Unit = set(5, value)
        get(): ULong? = get(5) as ULong?

    open var sampleSize: ULong?
        set(value): Unit = set(6, value)
        get(): ULong? = get(6) as ULong?

    open var statDescription: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record4<String?, String?, String?, String?> = super.key() as Record4<String?, String?, String?, String?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<String?, String?, String?, LocalDateTime?, String?, ULong?, ULong?, String?> = super.fieldsRow() as Row8<String?, String?, String?, LocalDateTime?, String?, ULong?, ULong?, String?>
    override fun valuesRow(): Row8<String?, String?, String?, LocalDateTime?, String?, ULong?, ULong?, String?> = super.valuesRow() as Row8<String?, String?, String?, LocalDateTime?, String?, ULong?, ULong?, String?>
    override fun field1(): Field<String?> = InnodbIndexStats.INNODB_INDEX_STATS.DATABASE_NAME
    override fun field2(): Field<String?> = InnodbIndexStats.INNODB_INDEX_STATS.TABLE_NAME
    override fun field3(): Field<String?> = InnodbIndexStats.INNODB_INDEX_STATS.INDEX_NAME
    override fun field4(): Field<LocalDateTime?> = InnodbIndexStats.INNODB_INDEX_STATS.LAST_UPDATE
    override fun field5(): Field<String?> = InnodbIndexStats.INNODB_INDEX_STATS.STAT_NAME
    override fun field6(): Field<ULong?> = InnodbIndexStats.INNODB_INDEX_STATS.STAT_VALUE
    override fun field7(): Field<ULong?> = InnodbIndexStats.INNODB_INDEX_STATS.SAMPLE_SIZE
    override fun field8(): Field<String?> = InnodbIndexStats.INNODB_INDEX_STATS.STAT_DESCRIPTION
    override fun component1(): String? = databaseName
    override fun component2(): String? = tableName
    override fun component3(): String? = indexName
    override fun component4(): LocalDateTime? = lastUpdate
    override fun component5(): String? = statName
    override fun component6(): ULong? = statValue
    override fun component7(): ULong? = sampleSize
    override fun component8(): String? = statDescription
    override fun value1(): String? = databaseName
    override fun value2(): String? = tableName
    override fun value3(): String? = indexName
    override fun value4(): LocalDateTime? = lastUpdate
    override fun value5(): String? = statName
    override fun value6(): ULong? = statValue
    override fun value7(): ULong? = sampleSize
    override fun value8(): String? = statDescription

    override fun value1(value: String?): InnodbIndexStatsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): InnodbIndexStatsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): InnodbIndexStatsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: LocalDateTime?): InnodbIndexStatsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): InnodbIndexStatsRecord {
        set(4, value)
        return this
    }

    override fun value6(value: ULong?): InnodbIndexStatsRecord {
        set(5, value)
        return this
    }

    override fun value7(value: ULong?): InnodbIndexStatsRecord {
        set(6, value)
        return this
    }

    override fun value8(value: String?): InnodbIndexStatsRecord {
        set(7, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: LocalDateTime?, value5: String?, value6: ULong?, value7: ULong?, value8: String?): InnodbIndexStatsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised InnodbIndexStatsRecord
     */
    constructor(databaseName: String? = null, tableName: String? = null, indexName: String? = null, lastUpdate: LocalDateTime? = null, statName: String? = null, statValue: ULong? = null, sampleSize: ULong? = null, statDescription: String? = null): this() {
        this.databaseName = databaseName
        this.tableName = tableName
        this.indexName = indexName
        this.lastUpdate = lastUpdate
        this.statName = statName
        this.statValue = statValue
        this.sampleSize = sampleSize
        this.statDescription = statDescription
        resetChangedOnNotNull()
    }
}
