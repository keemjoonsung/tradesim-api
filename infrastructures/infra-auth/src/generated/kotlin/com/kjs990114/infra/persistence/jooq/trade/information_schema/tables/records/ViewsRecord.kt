/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.enums.ViewsCheckOption
import com.kjs990114.infra.persistence.jooq.trade.information_schema.enums.ViewsIsUpdatable
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Views

import org.jooq.Field
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ViewsRecord() : TableRecordImpl<ViewsRecord>(Views.VIEWS), Record10<String?, String?, String?, String?, ViewsCheckOption?, ViewsIsUpdatable?, String?, String?, String?, String?> {

    open var tableCatalog: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableSchema: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var tableName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var viewDefinition: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var checkOption: ViewsCheckOption?
        set(value): Unit = set(4, value)
        get(): ViewsCheckOption? = get(4) as ViewsCheckOption?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsUpdatable")
    open var isUpdatable: ViewsIsUpdatable?
        set(value): Unit = set(5, value)
        get(): ViewsIsUpdatable? = get(5) as ViewsIsUpdatable?

    open var definer: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var securityType: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var characterSetClient: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var collationConnection: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<String?, String?, String?, String?, ViewsCheckOption?, ViewsIsUpdatable?, String?, String?, String?, String?> = super.fieldsRow() as Row10<String?, String?, String?, String?, ViewsCheckOption?, ViewsIsUpdatable?, String?, String?, String?, String?>
    override fun valuesRow(): Row10<String?, String?, String?, String?, ViewsCheckOption?, ViewsIsUpdatable?, String?, String?, String?, String?> = super.valuesRow() as Row10<String?, String?, String?, String?, ViewsCheckOption?, ViewsIsUpdatable?, String?, String?, String?, String?>
    override fun field1(): Field<String?> = Views.VIEWS.TABLE_CATALOG
    override fun field2(): Field<String?> = Views.VIEWS.TABLE_SCHEMA
    override fun field3(): Field<String?> = Views.VIEWS.TABLE_NAME
    override fun field4(): Field<String?> = Views.VIEWS.VIEW_DEFINITION
    override fun field5(): Field<ViewsCheckOption?> = Views.VIEWS.CHECK_OPTION
    override fun field6(): Field<ViewsIsUpdatable?> = Views.VIEWS.IS_UPDATABLE
    override fun field7(): Field<String?> = Views.VIEWS.DEFINER
    override fun field8(): Field<String?> = Views.VIEWS.SECURITY_TYPE
    override fun field9(): Field<String?> = Views.VIEWS.CHARACTER_SET_CLIENT
    override fun field10(): Field<String?> = Views.VIEWS.COLLATION_CONNECTION
    override fun component1(): String? = tableCatalog
    override fun component2(): String? = tableSchema
    override fun component3(): String? = tableName
    override fun component4(): String? = viewDefinition
    override fun component5(): ViewsCheckOption? = checkOption
    override fun component6(): ViewsIsUpdatable? = isUpdatable
    override fun component7(): String? = definer
    override fun component8(): String? = securityType
    override fun component9(): String? = characterSetClient
    override fun component10(): String? = collationConnection
    override fun value1(): String? = tableCatalog
    override fun value2(): String? = tableSchema
    override fun value3(): String? = tableName
    override fun value4(): String? = viewDefinition
    override fun value5(): ViewsCheckOption? = checkOption
    override fun value6(): ViewsIsUpdatable? = isUpdatable
    override fun value7(): String? = definer
    override fun value8(): String? = securityType
    override fun value9(): String? = characterSetClient
    override fun value10(): String? = collationConnection

    override fun value1(value: String?): ViewsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): ViewsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): ViewsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): ViewsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: ViewsCheckOption?): ViewsRecord {
        set(4, value)
        return this
    }

    override fun value6(value: ViewsIsUpdatable?): ViewsRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): ViewsRecord {
        set(6, value)
        return this
    }

    override fun value8(value: String?): ViewsRecord {
        set(7, value)
        return this
    }

    override fun value9(value: String?): ViewsRecord {
        set(8, value)
        return this
    }

    override fun value10(value: String?): ViewsRecord {
        set(9, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?, value5: ViewsCheckOption?, value6: ViewsIsUpdatable?, value7: String?, value8: String?, value9: String?, value10: String?): ViewsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised ViewsRecord
     */
    constructor(tableCatalog: String? = null, tableSchema: String? = null, tableName: String? = null, viewDefinition: String? = null, checkOption: ViewsCheckOption? = null, isUpdatable: ViewsIsUpdatable? = null, definer: String? = null, securityType: String? = null, characterSetClient: String? = null, collationConnection: String? = null): this() {
        this.tableCatalog = tableCatalog
        this.tableSchema = tableSchema
        this.tableName = tableName
        this.viewDefinition = viewDefinition
        this.checkOption = checkOption
        this.isUpdatable = isUpdatable
        this.definer = definer
        this.securityType = securityType
        this.characterSetClient = characterSetClient
        this.collationConnection = collationConnection
        resetChangedOnNotNull()
    }
}
