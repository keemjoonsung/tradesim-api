/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.DATA_LOCKS_ENGINE_TRANSACTION_ID
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.DATA_LOCKS_OBJECT_SCHEMA
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.indexes.DATA_LOCKS_THREAD_ID
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_DATA_LOCKS_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.DataLocksRecord

import java.util.function.Function

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row15
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DataLocks(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DataLocksRecord>?,
    parentPath: InverseForeignKey<out Record, DataLocksRecord>?,
    aliased: Table<DataLocksRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<DataLocksRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>performance_schema.data_locks</code>
         */
        val DATA_LOCKS: DataLocks = DataLocks()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DataLocksRecord> = DataLocksRecord::class.java

    /**
     * The column <code>performance_schema.data_locks.ENGINE</code>.
     */
    val ENGINE: TableField<DataLocksRecord, String?> = createField(DSL.name("ENGINE"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>performance_schema.data_locks.ENGINE_LOCK_ID</code>.
     */
    val ENGINE_LOCK_ID: TableField<DataLocksRecord, String?> = createField(DSL.name("ENGINE_LOCK_ID"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.data_locks.ENGINE_TRANSACTION_ID</code>.
     */
    val ENGINE_TRANSACTION_ID: TableField<DataLocksRecord, ULong?> = createField(DSL.name("ENGINE_TRANSACTION_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.data_locks.THREAD_ID</code>.
     */
    val THREAD_ID: TableField<DataLocksRecord, ULong?> = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.data_locks.EVENT_ID</code>.
     */
    val EVENT_ID: TableField<DataLocksRecord, ULong?> = createField(DSL.name("EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>performance_schema.data_locks.OBJECT_SCHEMA</code>.
     */
    val OBJECT_SCHEMA: TableField<DataLocksRecord, String?> = createField(DSL.name("OBJECT_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.data_locks.OBJECT_NAME</code>.
     */
    val OBJECT_NAME: TableField<DataLocksRecord, String?> = createField(DSL.name("OBJECT_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.data_locks.PARTITION_NAME</code>.
     */
    val PARTITION_NAME: TableField<DataLocksRecord, String?> = createField(DSL.name("PARTITION_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.data_locks.SUBPARTITION_NAME</code>.
     */
    val SUBPARTITION_NAME: TableField<DataLocksRecord, String?> = createField(DSL.name("SUBPARTITION_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>performance_schema.data_locks.INDEX_NAME</code>.
     */
    val INDEX_NAME: TableField<DataLocksRecord, String?> = createField(DSL.name("INDEX_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>performance_schema.data_locks.OBJECT_INSTANCE_BEGIN</code>.
     */
    val OBJECT_INSTANCE_BEGIN: TableField<DataLocksRecord, ULong?> = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>performance_schema.data_locks.LOCK_TYPE</code>.
     */
    val LOCK_TYPE: TableField<DataLocksRecord, String?> = createField(DSL.name("LOCK_TYPE"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>performance_schema.data_locks.LOCK_MODE</code>.
     */
    val LOCK_MODE: TableField<DataLocksRecord, String?> = createField(DSL.name("LOCK_MODE"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>performance_schema.data_locks.LOCK_STATUS</code>.
     */
    val LOCK_STATUS: TableField<DataLocksRecord, String?> = createField(DSL.name("LOCK_STATUS"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>performance_schema.data_locks.LOCK_DATA</code>.
     */
    val LOCK_DATA: TableField<DataLocksRecord, String?> = createField(DSL.name("LOCK_DATA"), SQLDataType.VARCHAR(8192), this, "")

    private constructor(alias: Name, aliased: Table<DataLocksRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<DataLocksRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<DataLocksRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>performance_schema.data_locks</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>performance_schema.data_locks</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>performance_schema.data_locks</code> table reference
     */
    constructor(): this(DSL.name("data_locks"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getIndexes(): List<Index> = listOf(DATA_LOCKS_ENGINE_TRANSACTION_ID, DATA_LOCKS_OBJECT_SCHEMA, DATA_LOCKS_THREAD_ID)
    override fun getPrimaryKey(): UniqueKey<DataLocksRecord> = KEY_DATA_LOCKS_PRIMARY
    override fun `as`(alias: String): DataLocks = DataLocks(DSL.name(alias), this)
    override fun `as`(alias: Name): DataLocks = DataLocks(alias, this)
    override fun `as`(alias: Table<*>): DataLocks = DataLocks(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DataLocks = DataLocks(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DataLocks = DataLocks(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DataLocks = DataLocks(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): DataLocks = DataLocks(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): DataLocks = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): DataLocks = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): DataLocks = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): DataLocks = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): DataLocks = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): DataLocks = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): DataLocks = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): DataLocks = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): DataLocks = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row15<String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?, ULong?, String?, String?, String?, String?> = super.fieldsRow() as Row15<String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?, ULong?, String?, String?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?, ULong?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, String?, String?, ULong?, String?, String?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
