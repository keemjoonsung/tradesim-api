/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.enums.ReplicationApplierGlobalFiltersConfiguredBy
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.ReplicationApplierGlobalFilters

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReplicationApplierGlobalFiltersRecord() : TableRecordImpl<ReplicationApplierGlobalFiltersRecord>(ReplicationApplierGlobalFilters.REPLICATION_APPLIER_GLOBAL_FILTERS), Record4<String?, String?, ReplicationApplierGlobalFiltersConfiguredBy?, LocalDateTime?> {

    open var filterName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var filterRule: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var configuredBy: ReplicationApplierGlobalFiltersConfiguredBy?
        set(value): Unit = set(2, value)
        get(): ReplicationApplierGlobalFiltersConfiguredBy? = get(2) as ReplicationApplierGlobalFiltersConfiguredBy?

    open var activeSince: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, ReplicationApplierGlobalFiltersConfiguredBy?, LocalDateTime?> = super.fieldsRow() as Row4<String?, String?, ReplicationApplierGlobalFiltersConfiguredBy?, LocalDateTime?>
    override fun valuesRow(): Row4<String?, String?, ReplicationApplierGlobalFiltersConfiguredBy?, LocalDateTime?> = super.valuesRow() as Row4<String?, String?, ReplicationApplierGlobalFiltersConfiguredBy?, LocalDateTime?>
    override fun field1(): Field<String?> = ReplicationApplierGlobalFilters.REPLICATION_APPLIER_GLOBAL_FILTERS.FILTER_NAME
    override fun field2(): Field<String?> = ReplicationApplierGlobalFilters.REPLICATION_APPLIER_GLOBAL_FILTERS.FILTER_RULE
    override fun field3(): Field<ReplicationApplierGlobalFiltersConfiguredBy?> = ReplicationApplierGlobalFilters.REPLICATION_APPLIER_GLOBAL_FILTERS.CONFIGURED_BY
    override fun field4(): Field<LocalDateTime?> = ReplicationApplierGlobalFilters.REPLICATION_APPLIER_GLOBAL_FILTERS.ACTIVE_SINCE
    override fun component1(): String? = filterName
    override fun component2(): String? = filterRule
    override fun component3(): ReplicationApplierGlobalFiltersConfiguredBy? = configuredBy
    override fun component4(): LocalDateTime? = activeSince
    override fun value1(): String? = filterName
    override fun value2(): String? = filterRule
    override fun value3(): ReplicationApplierGlobalFiltersConfiguredBy? = configuredBy
    override fun value4(): LocalDateTime? = activeSince

    override fun value1(value: String?): ReplicationApplierGlobalFiltersRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): ReplicationApplierGlobalFiltersRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ReplicationApplierGlobalFiltersConfiguredBy?): ReplicationApplierGlobalFiltersRecord {
        set(2, value)
        return this
    }

    override fun value4(value: LocalDateTime?): ReplicationApplierGlobalFiltersRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: ReplicationApplierGlobalFiltersConfiguredBy?, value4: LocalDateTime?): ReplicationApplierGlobalFiltersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised ReplicationApplierGlobalFiltersRecord
     */
    constructor(filterName: String? = null, filterRule: String? = null, configuredBy: ReplicationApplierGlobalFiltersConfiguredBy? = null, activeSince: LocalDateTime? = null): this() {
        this.filterName = filterName
        this.filterRule = filterRule
        this.configuredBy = configuredBy
        this.activeSince = activeSince
        resetChangedOnNotNull()
    }
}
