/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class `X$schemaTablesWithFullTableScansRecord`() : TableRecordImpl<`X$schemaTablesWithFullTableScansRecord`>(com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$schemaTablesWithFullTableScans`.`X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS`), Record4<String?, String?, ULong?, ULong?> {

    open var objectSchema: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var objectName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var rowsFullScanned: ULong?
        set(value): Unit = set(2, value)
        get(): ULong? = get(2) as ULong?

    open var latency: ULong?
        set(value): Unit = set(3, value)
        get(): ULong? = get(3) as ULong?

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, ULong?, ULong?> = super.fieldsRow() as Row4<String?, String?, ULong?, ULong?>
    override fun valuesRow(): Row4<String?, String?, ULong?, ULong?> = super.valuesRow() as Row4<String?, String?, ULong?, ULong?>
    override fun field1(): Field<String?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$schemaTablesWithFullTableScans`.`X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS`.OBJECT_SCHEMA
    override fun field2(): Field<String?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$schemaTablesWithFullTableScans`.`X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS`.OBJECT_NAME
    override fun field3(): Field<ULong?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$schemaTablesWithFullTableScans`.`X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS`.ROWS_FULL_SCANNED
    override fun field4(): Field<ULong?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$schemaTablesWithFullTableScans`.`X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS`.LATENCY
    override fun component1(): String? = objectSchema
    override fun component2(): String? = objectName
    override fun component3(): ULong? = rowsFullScanned
    override fun component4(): ULong? = latency
    override fun value1(): String? = objectSchema
    override fun value2(): String? = objectName
    override fun value3(): ULong? = rowsFullScanned
    override fun value4(): ULong? = latency

    override fun value1(value: String?): `X$schemaTablesWithFullTableScansRecord` {
        set(0, value)
        return this
    }

    override fun value2(value: String?): `X$schemaTablesWithFullTableScansRecord` {
        set(1, value)
        return this
    }

    override fun value3(value: ULong?): `X$schemaTablesWithFullTableScansRecord` {
        set(2, value)
        return this
    }

    override fun value4(value: ULong?): `X$schemaTablesWithFullTableScansRecord` {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: ULong?, value4: ULong?): `X$schemaTablesWithFullTableScansRecord` {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised `X$schemaTablesWithFullTableScansRecord`
     */
    constructor(objectSchema: String? = null, objectName: String? = null, rowsFullScanned: ULong? = null, latency: ULong? = null): this() {
        this.objectSchema = objectSchema
        this.objectName = objectName
        this.rowsFullScanned = rowsFullScanned
        this.latency = latency
        resetChangedOnNotNull()
    }
}
