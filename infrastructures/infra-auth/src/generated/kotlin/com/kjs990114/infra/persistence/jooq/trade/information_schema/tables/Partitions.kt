/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.information_schema.InformationSchema
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records.PartitionsRecord

import java.time.LocalDateTime

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Partitions(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PartitionsRecord>?,
    parentPath: InverseForeignKey<out Record, PartitionsRecord>?,
    aliased: Table<PartitionsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PartitionsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.PARTITIONS</code>
         */
        val PARTITIONS: Partitions = Partitions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PartitionsRecord> = PartitionsRecord::class.java

    /**
     * The column <code>information_schema.PARTITIONS.TABLE_CATALOG</code>.
     */
    val TABLE_CATALOG: TableField<PartitionsRecord, String?> = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.PARTITIONS.TABLE_SCHEMA</code>.
     */
    val TABLE_SCHEMA: TableField<PartitionsRecord, String?> = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.PARTITIONS.TABLE_NAME</code>.
     */
    val TABLE_NAME: TableField<PartitionsRecord, String?> = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.PARTITIONS.PARTITION_NAME</code>.
     */
    val PARTITION_NAME: TableField<PartitionsRecord, String?> = createField(DSL.name("PARTITION_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.PARTITIONS.SUBPARTITION_NAME</code>.
     */
    val SUBPARTITION_NAME: TableField<PartitionsRecord, String?> = createField(DSL.name("SUBPARTITION_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>information_schema.PARTITIONS.PARTITION_ORDINAL_POSITION</code>.
     */
    val PARTITION_ORDINAL_POSITION: TableField<PartitionsRecord, UInteger?> = createField(DSL.name("PARTITION_ORDINAL_POSITION"), SQLDataType.INTEGERUNSIGNED, this, "")

    /**
     * The column
     * <code>information_schema.PARTITIONS.SUBPARTITION_ORDINAL_POSITION</code>.
     */
    val SUBPARTITION_ORDINAL_POSITION: TableField<PartitionsRecord, UInteger?> = createField(DSL.name("SUBPARTITION_ORDINAL_POSITION"), SQLDataType.INTEGERUNSIGNED, this, "")

    /**
     * The column <code>information_schema.PARTITIONS.PARTITION_METHOD</code>.
     */
    val PARTITION_METHOD: TableField<PartitionsRecord, String?> = createField(DSL.name("PARTITION_METHOD"), SQLDataType.VARCHAR(13), this, "")

    /**
     * The column
     * <code>information_schema.PARTITIONS.SUBPARTITION_METHOD</code>.
     */
    val SUBPARTITION_METHOD: TableField<PartitionsRecord, String?> = createField(DSL.name("SUBPARTITION_METHOD"), SQLDataType.VARCHAR(13), this, "")

    /**
     * The column
     * <code>information_schema.PARTITIONS.PARTITION_EXPRESSION</code>.
     */
    val PARTITION_EXPRESSION: TableField<PartitionsRecord, String?> = createField(DSL.name("PARTITION_EXPRESSION"), SQLDataType.VARCHAR(2048), this, "")

    /**
     * The column
     * <code>information_schema.PARTITIONS.SUBPARTITION_EXPRESSION</code>.
     */
    val SUBPARTITION_EXPRESSION: TableField<PartitionsRecord, String?> = createField(DSL.name("SUBPARTITION_EXPRESSION"), SQLDataType.VARCHAR(2048), this, "")

    /**
     * The column
     * <code>information_schema.PARTITIONS.PARTITION_DESCRIPTION</code>.
     */
    val PARTITION_DESCRIPTION: TableField<PartitionsRecord, String?> = createField(DSL.name("PARTITION_DESCRIPTION"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>information_schema.PARTITIONS.TABLE_ROWS</code>.
     */
    val TABLE_ROWS: TableField<PartitionsRecord, ULong?> = createField(DSL.name("TABLE_ROWS"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.PARTITIONS.AVG_ROW_LENGTH</code>.
     */
    val AVG_ROW_LENGTH: TableField<PartitionsRecord, ULong?> = createField(DSL.name("AVG_ROW_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.PARTITIONS.DATA_LENGTH</code>.
     */
    val DATA_LENGTH: TableField<PartitionsRecord, ULong?> = createField(DSL.name("DATA_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.PARTITIONS.MAX_DATA_LENGTH</code>.
     */
    val MAX_DATA_LENGTH: TableField<PartitionsRecord, ULong?> = createField(DSL.name("MAX_DATA_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.PARTITIONS.INDEX_LENGTH</code>.
     */
    val INDEX_LENGTH: TableField<PartitionsRecord, ULong?> = createField(DSL.name("INDEX_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.PARTITIONS.DATA_FREE</code>.
     */
    val DATA_FREE: TableField<PartitionsRecord, ULong?> = createField(DSL.name("DATA_FREE"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.PARTITIONS.CREATE_TIME</code>.
     */
    val CREATE_TIME: TableField<PartitionsRecord, LocalDateTime?> = createField(DSL.name("CREATE_TIME"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>information_schema.PARTITIONS.UPDATE_TIME</code>.
     */
    val UPDATE_TIME: TableField<PartitionsRecord, LocalDateTime?> = createField(DSL.name("UPDATE_TIME"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.PARTITIONS.CHECK_TIME</code>.
     */
    val CHECK_TIME: TableField<PartitionsRecord, LocalDateTime?> = createField(DSL.name("CHECK_TIME"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.PARTITIONS.CHECKSUM</code>.
     */
    val CHECKSUM: TableField<PartitionsRecord, Long?> = createField(DSL.name("CHECKSUM"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.PARTITIONS.PARTITION_COMMENT</code>.
     */
    val PARTITION_COMMENT: TableField<PartitionsRecord, String?> = createField(DSL.name("PARTITION_COMMENT"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>information_schema.PARTITIONS.NODEGROUP</code>.
     */
    val NODEGROUP: TableField<PartitionsRecord, String?> = createField(DSL.name("NODEGROUP"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.PARTITIONS.TABLESPACE_NAME</code>.
     */
    val TABLESPACE_NAME: TableField<PartitionsRecord, String?> = createField(DSL.name("TABLESPACE_NAME"), SQLDataType.VARCHAR(268), this, "")

    private constructor(alias: Name, aliased: Table<PartitionsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PartitionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PartitionsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.PARTITIONS</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.PARTITIONS</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.PARTITIONS</code> table reference
     */
    constructor(): this(DSL.name("PARTITIONS"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Partitions = Partitions(DSL.name(alias), this)
    override fun `as`(alias: Name): Partitions = Partitions(alias, this)
    override fun `as`(alias: Table<*>): Partitions = Partitions(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Partitions = Partitions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Partitions = Partitions(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Partitions = Partitions(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Partitions = Partitions(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Partitions = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Partitions = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Partitions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Partitions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Partitions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Partitions = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Partitions = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Partitions = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Partitions = where(DSL.notExists(select))
}
