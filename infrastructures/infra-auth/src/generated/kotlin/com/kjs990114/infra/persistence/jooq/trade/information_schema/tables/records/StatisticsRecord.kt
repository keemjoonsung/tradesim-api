/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.Statistics

import org.jooq.Field
import org.jooq.Record18
import org.jooq.Row18
import org.jooq.impl.TableRecordImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StatisticsRecord() : TableRecordImpl<StatisticsRecord>(Statistics.STATISTICS), Record18<String?, String?, String?, Int?, String?, String?, UInteger?, String?, String?, Long?, Long?, ByteArray?, String?, String?, String?, String?, String?, String?> {

    open var tableCatalog: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableSchema: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var tableName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var nonUnique: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var indexSchema: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var indexName: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var seqInIndex: UInteger?
        set(value): Unit = set(6, value)
        get(): UInteger? = get(6) as UInteger?

    open var columnName: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var collation: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var cardinality: Long?
        set(value): Unit = set(9, value)
        get(): Long? = get(9) as Long?

    open var subPart: Long?
        set(value): Unit = set(10, value)
        get(): Long? = get(10) as Long?

    open var packed: ByteArray?
        set(value): Unit = set(11, value)
        get(): ByteArray? = get(11) as ByteArray?

    open var nullable: String?
        set(value): Unit = set(12, value)
        get(): String? = get(12) as String?

    open var indexType: String?
        set(value): Unit = set(13, value)
        get(): String? = get(13) as String?

    open var comment: String?
        set(value): Unit = set(14, value)
        get(): String? = get(14) as String?

    open var indexComment: String?
        set(value): Unit = set(15, value)
        get(): String? = get(15) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsVisible")
    open var isVisible: String?
        set(value): Unit = set(16, value)
        get(): String? = get(16) as String?

    open var expression: String?
        set(value): Unit = set(17, value)
        get(): String? = get(17) as String?

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row18<String?, String?, String?, Int?, String?, String?, UInteger?, String?, String?, Long?, Long?, ByteArray?, String?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row18<String?, String?, String?, Int?, String?, String?, UInteger?, String?, String?, Long?, Long?, ByteArray?, String?, String?, String?, String?, String?, String?>
    override fun valuesRow(): Row18<String?, String?, String?, Int?, String?, String?, UInteger?, String?, String?, Long?, Long?, ByteArray?, String?, String?, String?, String?, String?, String?> = super.valuesRow() as Row18<String?, String?, String?, Int?, String?, String?, UInteger?, String?, String?, Long?, Long?, ByteArray?, String?, String?, String?, String?, String?, String?>
    override fun field1(): Field<String?> = Statistics.STATISTICS.TABLE_CATALOG
    override fun field2(): Field<String?> = Statistics.STATISTICS.TABLE_SCHEMA
    override fun field3(): Field<String?> = Statistics.STATISTICS.TABLE_NAME
    override fun field4(): Field<Int?> = Statistics.STATISTICS.NON_UNIQUE
    override fun field5(): Field<String?> = Statistics.STATISTICS.INDEX_SCHEMA
    override fun field6(): Field<String?> = Statistics.STATISTICS.INDEX_NAME
    override fun field7(): Field<UInteger?> = Statistics.STATISTICS.SEQ_IN_INDEX
    override fun field8(): Field<String?> = Statistics.STATISTICS.COLUMN_NAME
    override fun field9(): Field<String?> = Statistics.STATISTICS.COLLATION
    override fun field10(): Field<Long?> = Statistics.STATISTICS.CARDINALITY
    override fun field11(): Field<Long?> = Statistics.STATISTICS.SUB_PART
    override fun field12(): Field<ByteArray?> = Statistics.STATISTICS.PACKED
    override fun field13(): Field<String?> = Statistics.STATISTICS.NULLABLE
    override fun field14(): Field<String?> = Statistics.STATISTICS.INDEX_TYPE
    override fun field15(): Field<String?> = Statistics.STATISTICS.COMMENT
    override fun field16(): Field<String?> = Statistics.STATISTICS.INDEX_COMMENT
    override fun field17(): Field<String?> = Statistics.STATISTICS.IS_VISIBLE
    override fun field18(): Field<String?> = Statistics.STATISTICS.EXPRESSION
    override fun component1(): String? = tableCatalog
    override fun component2(): String? = tableSchema
    override fun component3(): String? = tableName
    override fun component4(): Int? = nonUnique
    override fun component5(): String? = indexSchema
    override fun component6(): String? = indexName
    override fun component7(): UInteger? = seqInIndex
    override fun component8(): String? = columnName
    override fun component9(): String? = collation
    override fun component10(): Long? = cardinality
    override fun component11(): Long? = subPart
    override fun component12(): ByteArray? = packed
    override fun component13(): String? = nullable
    override fun component14(): String? = indexType
    override fun component15(): String? = comment
    override fun component16(): String? = indexComment
    override fun component17(): String? = isVisible
    override fun component18(): String? = expression
    override fun value1(): String? = tableCatalog
    override fun value2(): String? = tableSchema
    override fun value3(): String? = tableName
    override fun value4(): Int? = nonUnique
    override fun value5(): String? = indexSchema
    override fun value6(): String? = indexName
    override fun value7(): UInteger? = seqInIndex
    override fun value8(): String? = columnName
    override fun value9(): String? = collation
    override fun value10(): Long? = cardinality
    override fun value11(): Long? = subPart
    override fun value12(): ByteArray? = packed
    override fun value13(): String? = nullable
    override fun value14(): String? = indexType
    override fun value15(): String? = comment
    override fun value16(): String? = indexComment
    override fun value17(): String? = isVisible
    override fun value18(): String? = expression

    override fun value1(value: String?): StatisticsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): StatisticsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): StatisticsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): StatisticsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): StatisticsRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): StatisticsRecord {
        set(5, value)
        return this
    }

    override fun value7(value: UInteger?): StatisticsRecord {
        set(6, value)
        return this
    }

    override fun value8(value: String?): StatisticsRecord {
        set(7, value)
        return this
    }

    override fun value9(value: String?): StatisticsRecord {
        set(8, value)
        return this
    }

    override fun value10(value: Long?): StatisticsRecord {
        set(9, value)
        return this
    }

    override fun value11(value: Long?): StatisticsRecord {
        set(10, value)
        return this
    }

    override fun value12(value: ByteArray?): StatisticsRecord {
        set(11, value)
        return this
    }

    override fun value13(value: String?): StatisticsRecord {
        set(12, value)
        return this
    }

    override fun value14(value: String?): StatisticsRecord {
        set(13, value)
        return this
    }

    override fun value15(value: String?): StatisticsRecord {
        set(14, value)
        return this
    }

    override fun value16(value: String?): StatisticsRecord {
        set(15, value)
        return this
    }

    override fun value17(value: String?): StatisticsRecord {
        set(16, value)
        return this
    }

    override fun value18(value: String?): StatisticsRecord {
        set(17, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: Int?, value5: String?, value6: String?, value7: UInteger?, value8: String?, value9: String?, value10: Long?, value11: Long?, value12: ByteArray?, value13: String?, value14: String?, value15: String?, value16: String?, value17: String?, value18: String?): StatisticsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        this.value13(value13)
        this.value14(value14)
        this.value15(value15)
        this.value16(value16)
        this.value17(value17)
        this.value18(value18)
        return this
    }

    /**
     * Create a detached, initialised StatisticsRecord
     */
    constructor(tableCatalog: String? = null, tableSchema: String? = null, tableName: String? = null, nonUnique: Int? = null, indexSchema: String? = null, indexName: String? = null, seqInIndex: UInteger? = null, columnName: String? = null, collation: String? = null, cardinality: Long? = null, subPart: Long? = null, packed: ByteArray? = null, nullable: String? = null, indexType: String? = null, comment: String? = null, indexComment: String? = null, isVisible: String? = null, expression: String? = null): this() {
        this.tableCatalog = tableCatalog
        this.tableSchema = tableSchema
        this.tableName = tableName
        this.nonUnique = nonUnique
        this.indexSchema = indexSchema
        this.indexName = indexName
        this.seqInIndex = seqInIndex
        this.columnName = columnName
        this.collation = collation
        this.cardinality = cardinality
        this.subPart = subPart
        this.packed = packed
        this.nullable = nullable
        this.indexType = indexType
        this.comment = comment
        this.indexComment = indexComment
        this.isVisible = isVisible
        this.expression = expression
        resetChangedOnNotNull()
    }
}
