/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.FileInstances

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FileInstancesRecord() : UpdatableRecordImpl<FileInstancesRecord>(FileInstances.FILE_INSTANCES), Record3<String?, String?, UInteger?> {

    open var fileName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var eventName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var openCount: UInteger?
        set(value): Unit = set(2, value)
        get(): UInteger? = get(2) as UInteger?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, String?, UInteger?> = super.fieldsRow() as Row3<String?, String?, UInteger?>
    override fun valuesRow(): Row3<String?, String?, UInteger?> = super.valuesRow() as Row3<String?, String?, UInteger?>
    override fun field1(): Field<String?> = FileInstances.FILE_INSTANCES.FILE_NAME
    override fun field2(): Field<String?> = FileInstances.FILE_INSTANCES.EVENT_NAME
    override fun field3(): Field<UInteger?> = FileInstances.FILE_INSTANCES.OPEN_COUNT
    override fun component1(): String? = fileName
    override fun component2(): String? = eventName
    override fun component3(): UInteger? = openCount
    override fun value1(): String? = fileName
    override fun value2(): String? = eventName
    override fun value3(): UInteger? = openCount

    override fun value1(value: String?): FileInstancesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): FileInstancesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: UInteger?): FileInstancesRecord {
        set(2, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: UInteger?): FileInstancesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised FileInstancesRecord
     */
    constructor(fileName: String? = null, eventName: String? = null, openCount: UInteger? = null): this() {
        this.fileName = fileName
        this.eventName = eventName
        this.openCount = openCount
        resetChangedOnNotNull()
    }
}
