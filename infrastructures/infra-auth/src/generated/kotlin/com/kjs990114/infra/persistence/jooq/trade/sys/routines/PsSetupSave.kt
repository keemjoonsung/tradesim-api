/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys

import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 * Description
 * -----------
 * 
 * Saves the current configuration of Performance Schema, 
 * so that you can alter the setup for debugging purposes, 
 * but restore it to a previous state.
 * 
 * Use the companion procedure - ps_setup_reload_saved(), to 
 * restore the saved config.
 * 
 * The named lock "sys.ps_setup_save" is taken before the
 * current configuration is saved. If the attempt to get the named
 * lock times out, an error occurs.
 * 
 * The lock is released after the settings have been restored by
 * calling ps_setup_reload_saved().
 * 
 * Requires the SUPER privilege for "SET sql_log_bin = 0;".
 * 
 * Parameters
 * -----------
 * 
 * in_timeout INT
 *   The timeout in seconds used when trying to obtain the lock.
 *   A negative timeout means infinite timeout.
 * 
 * Example
 * -----------
 * 
 * mysql&gt; CALL sys.ps_setup_save(-1);
 * Query OK, 0 rows affected (0.08 sec)
 * 
 * mysql&gt; UPDATE performance_schema.setup_instruments 
 *     -&gt;    SET enabled = 'YES', timed = 'YES';
 * Query OK, 547 rows affected (0.40 sec)
 * Rows matched: 784  Changed: 547  Warnings: 0
 * 
 * / * Run some tests that need more detailed instrumentation here * /
 * 
 * mysql&gt; CALL sys.ps_setup_reload_saved();
 * Query OK, 0 rows affected (0.32 sec)

 */
@Suppress("UNCHECKED_CAST")
open class PsSetupSave : AbstractRoutine<java.lang.Void>("ps_setup_save", Sys.SYS) {
    companion object {

        /**
         * The parameter <code>sys.ps_setup_save.in_timeout</code>.
         */
        val IN_TIMEOUT: Parameter<Int?> = Internal.createParameter("in_timeout", SQLDataType.INTEGER, false, false)
    }

    init {
        addInParameter(PsSetupSave.IN_TIMEOUT)
    }

    /**
     * Set the <code>in_timeout</code> parameter IN value to the routine
     */
    fun setInTimeout(value: Int?): Unit = setValue(PsSetupSave.IN_TIMEOUT, value)
}
