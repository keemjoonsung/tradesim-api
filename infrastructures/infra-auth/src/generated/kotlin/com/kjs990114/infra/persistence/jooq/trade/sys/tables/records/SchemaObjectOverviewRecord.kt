/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import com.kjs990114.infra.persistence.jooq.trade.sys.tables.SchemaObjectOverview

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SchemaObjectOverviewRecord() : TableRecordImpl<SchemaObjectOverviewRecord>(SchemaObjectOverview.SCHEMA_OBJECT_OVERVIEW), Record3<String?, String?, Long?> {

    open var db: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var objectType: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var count: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, String?, Long?> = super.fieldsRow() as Row3<String?, String?, Long?>
    override fun valuesRow(): Row3<String?, String?, Long?> = super.valuesRow() as Row3<String?, String?, Long?>
    override fun field1(): Field<String?> = SchemaObjectOverview.SCHEMA_OBJECT_OVERVIEW.DB
    override fun field2(): Field<String?> = SchemaObjectOverview.SCHEMA_OBJECT_OVERVIEW.OBJECT_TYPE
    override fun field3(): Field<Long?> = SchemaObjectOverview.SCHEMA_OBJECT_OVERVIEW.COUNT
    override fun component1(): String? = db
    override fun component2(): String? = objectType
    override fun component3(): Long? = count
    override fun value1(): String? = db
    override fun value2(): String? = objectType
    override fun value3(): Long? = count

    override fun value1(value: String?): SchemaObjectOverviewRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): SchemaObjectOverviewRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Long?): SchemaObjectOverviewRecord {
        set(2, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: Long?): SchemaObjectOverviewRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised SchemaObjectOverviewRecord
     */
    constructor(db: String? = null, objectType: String? = null, count: Long? = null): this() {
        this.db = db
        this.objectType = objectType
        this.count = count
        resetChangedOnNotNull()
    }
}
