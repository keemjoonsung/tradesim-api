/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.performance_schema.PerformanceSchema
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.keys.KEY_EVENTS_TRANSACTIONS_SUMMARY_BY_ACCOUNT_BY_EVENT_NAME_ACCOUNT
import com.kjs990114.infra.persistence.jooq.trade.performance_schema.tables.records.EventsTransactionsSummaryByAccountByEventNameRecord

import java.util.function.Function

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row18
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventsTransactionsSummaryByAccountByEventName(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, EventsTransactionsSummaryByAccountByEventNameRecord>?,
    parentPath: InverseForeignKey<out Record, EventsTransactionsSummaryByAccountByEventNameRecord>?,
    aliased: Table<EventsTransactionsSummaryByAccountByEventNameRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<EventsTransactionsSummaryByAccountByEventNameRecord>(
    alias,
    PerformanceSchema.PERFORMANCE_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>performance_schema.events_transactions_summary_by_account_by_event_name</code>
         */
        val EVENTS_TRANSACTIONS_SUMMARY_BY_ACCOUNT_BY_EVENT_NAME: EventsTransactionsSummaryByAccountByEventName = EventsTransactionsSummaryByAccountByEventName()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EventsTransactionsSummaryByAccountByEventNameRecord> = EventsTransactionsSummaryByAccountByEventNameRecord::class.java

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.USER</code>.
     */
    val USER: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, String?> = createField(DSL.name("USER"), SQLDataType.CHAR(32), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.HOST</code>.
     */
    val HOST: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, String?> = createField(DSL.name("HOST"), SQLDataType.CHAR(255), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.EVENT_NAME</code>.
     */
    val EVENT_NAME: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, String?> = createField(DSL.name("EVENT_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.COUNT_STAR</code>.
     */
    val COUNT_STAR: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("COUNT_STAR"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.SUM_TIMER_WAIT</code>.
     */
    val SUM_TIMER_WAIT: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("SUM_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.MIN_TIMER_WAIT</code>.
     */
    val MIN_TIMER_WAIT: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("MIN_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.AVG_TIMER_WAIT</code>.
     */
    val AVG_TIMER_WAIT: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("AVG_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.MAX_TIMER_WAIT</code>.
     */
    val MAX_TIMER_WAIT: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("MAX_TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.COUNT_READ_WRITE</code>.
     */
    val COUNT_READ_WRITE: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("COUNT_READ_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.SUM_TIMER_READ_WRITE</code>.
     */
    val SUM_TIMER_READ_WRITE: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("SUM_TIMER_READ_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.MIN_TIMER_READ_WRITE</code>.
     */
    val MIN_TIMER_READ_WRITE: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("MIN_TIMER_READ_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.AVG_TIMER_READ_WRITE</code>.
     */
    val AVG_TIMER_READ_WRITE: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("AVG_TIMER_READ_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.MAX_TIMER_READ_WRITE</code>.
     */
    val MAX_TIMER_READ_WRITE: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("MAX_TIMER_READ_WRITE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.COUNT_READ_ONLY</code>.
     */
    val COUNT_READ_ONLY: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("COUNT_READ_ONLY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.SUM_TIMER_READ_ONLY</code>.
     */
    val SUM_TIMER_READ_ONLY: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("SUM_TIMER_READ_ONLY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.MIN_TIMER_READ_ONLY</code>.
     */
    val MIN_TIMER_READ_ONLY: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("MIN_TIMER_READ_ONLY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.AVG_TIMER_READ_ONLY</code>.
     */
    val AVG_TIMER_READ_ONLY: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("AVG_TIMER_READ_ONLY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    /**
     * The column
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name.MAX_TIMER_READ_ONLY</code>.
     */
    val MAX_TIMER_READ_ONLY: TableField<EventsTransactionsSummaryByAccountByEventNameRecord, ULong?> = createField(DSL.name("MAX_TIMER_READ_ONLY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<EventsTransactionsSummaryByAccountByEventNameRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<EventsTransactionsSummaryByAccountByEventNameRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<EventsTransactionsSummaryByAccountByEventNameRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a
     * <code>performance_schema.events_transactions_summary_by_account_by_event_name</code>
     * table reference
     */
    constructor(): this(DSL.name("events_transactions_summary_by_account_by_event_name"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PerformanceSchema.PERFORMANCE_SCHEMA
    override fun getUniqueKeys(): List<UniqueKey<EventsTransactionsSummaryByAccountByEventNameRecord>> = listOf(KEY_EVENTS_TRANSACTIONS_SUMMARY_BY_ACCOUNT_BY_EVENT_NAME_ACCOUNT)
    override fun `as`(alias: String): EventsTransactionsSummaryByAccountByEventName = EventsTransactionsSummaryByAccountByEventName(DSL.name(alias), this)
    override fun `as`(alias: Name): EventsTransactionsSummaryByAccountByEventName = EventsTransactionsSummaryByAccountByEventName(alias, this)
    override fun `as`(alias: Table<*>): EventsTransactionsSummaryByAccountByEventName = EventsTransactionsSummaryByAccountByEventName(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): EventsTransactionsSummaryByAccountByEventName = EventsTransactionsSummaryByAccountByEventName(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): EventsTransactionsSummaryByAccountByEventName = EventsTransactionsSummaryByAccountByEventName(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): EventsTransactionsSummaryByAccountByEventName = EventsTransactionsSummaryByAccountByEventName(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): EventsTransactionsSummaryByAccountByEventName = EventsTransactionsSummaryByAccountByEventName(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): EventsTransactionsSummaryByAccountByEventName = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): EventsTransactionsSummaryByAccountByEventName = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): EventsTransactionsSummaryByAccountByEventName = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): EventsTransactionsSummaryByAccountByEventName = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): EventsTransactionsSummaryByAccountByEventName = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): EventsTransactionsSummaryByAccountByEventName = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): EventsTransactionsSummaryByAccountByEventName = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): EventsTransactionsSummaryByAccountByEventName = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): EventsTransactionsSummaryByAccountByEventName = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row18<String?, String?, String?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?> = super.fieldsRow() as Row18<String?, String?, String?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
