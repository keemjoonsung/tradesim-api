/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records


import com.kjs990114.infra.persistence.jooq.trade.mysql.enums.FuncType
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Func

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * User defined functions
 */
@Suppress("UNCHECKED_CAST")
open class FuncRecord() : UpdatableRecordImpl<FuncRecord>(Func.FUNC), Record4<String?, Byte?, String?, FuncType?> {

    open var name: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var ret: Byte?
        set(value): Unit = set(1, value)
        get(): Byte? = get(1) as Byte?

    open var dl: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var type: FuncType?
        set(value): Unit = set(3, value)
        get(): FuncType? = get(3) as FuncType?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, Byte?, String?, FuncType?> = super.fieldsRow() as Row4<String?, Byte?, String?, FuncType?>
    override fun valuesRow(): Row4<String?, Byte?, String?, FuncType?> = super.valuesRow() as Row4<String?, Byte?, String?, FuncType?>
    override fun field1(): Field<String?> = Func.FUNC.NAME
    override fun field2(): Field<Byte?> = Func.FUNC.RET
    override fun field3(): Field<String?> = Func.FUNC.DL
    override fun field4(): Field<FuncType?> = Func.FUNC.TYPE
    override fun component1(): String? = name
    override fun component2(): Byte? = ret
    override fun component3(): String? = dl
    override fun component4(): FuncType? = type
    override fun value1(): String? = name
    override fun value2(): Byte? = ret
    override fun value3(): String? = dl
    override fun value4(): FuncType? = type

    override fun value1(value: String?): FuncRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Byte?): FuncRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): FuncRecord {
        set(2, value)
        return this
    }

    override fun value4(value: FuncType?): FuncRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: Byte?, value3: String?, value4: FuncType?): FuncRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised FuncRecord
     */
    constructor(name: String? = null, ret: Byte? = null, dl: String? = null, type: FuncType? = null): this() {
        this.name = name
        this.ret = ret
        this.dl = dl
        this.type = type
        resetChangedOnNotNull()
    }
}
