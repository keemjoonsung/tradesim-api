/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import java.math.BigInteger

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class `X$psDigestAvgLatencyDistributionRecord`() : TableRecordImpl<`X$psDigestAvgLatencyDistributionRecord`>(com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$psDigestAvgLatencyDistribution`.`X$PS_DIGEST_AVG_LATENCY_DISTRIBUTION`), Record2<Long?, BigInteger?> {

    open var cnt: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var avgUs: BigInteger?
        set(value): Unit = set(1, value)
        get(): BigInteger? = get(1) as BigInteger?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, BigInteger?> = super.fieldsRow() as Row2<Long?, BigInteger?>
    override fun valuesRow(): Row2<Long?, BigInteger?> = super.valuesRow() as Row2<Long?, BigInteger?>
    override fun field1(): Field<Long?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$psDigestAvgLatencyDistribution`.`X$PS_DIGEST_AVG_LATENCY_DISTRIBUTION`.CNT
    override fun field2(): Field<BigInteger?> = com.kjs990114.infra.persistence.jooq.trade.sys.tables.`X$psDigestAvgLatencyDistribution`.`X$PS_DIGEST_AVG_LATENCY_DISTRIBUTION`.AVG_US
    override fun component1(): Long? = cnt
    override fun component2(): BigInteger? = avgUs
    override fun value1(): Long? = cnt
    override fun value2(): BigInteger? = avgUs

    override fun value1(value: Long?): `X$psDigestAvgLatencyDistributionRecord` {
        set(0, value)
        return this
    }

    override fun value2(value: BigInteger?): `X$psDigestAvgLatencyDistributionRecord` {
        set(1, value)
        return this
    }

    override fun values(value1: Long?, value2: BigInteger?): `X$psDigestAvgLatencyDistributionRecord` {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised `X$psDigestAvgLatencyDistributionRecord`
     */
    constructor(cnt: Long? = null, avgUs: BigInteger? = null): this() {
        this.cnt = cnt
        this.avgUs = avgUs
        resetChangedOnNotNull()
    }
}
