/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.information_schema.tables


import com.kjs990114.infra.persistence.jooq.trade.information_schema.InformationSchema
import com.kjs990114.infra.persistence.jooq.trade.information_schema.tables.records.FilesRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Files(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, FilesRecord>?,
    parentPath: InverseForeignKey<out Record, FilesRecord>?,
    aliased: Table<FilesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<FilesRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.FILES</code>
         */
        val FILES: Files = Files()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FilesRecord> = FilesRecord::class.java

    /**
     * The column <code>information_schema.FILES.FILE_ID</code>.
     */
    val FILE_ID: TableField<FilesRecord, Long?> = createField(DSL.name("FILE_ID"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.FILE_NAME</code>.
     */
    val FILE_NAME: TableField<FilesRecord, String?> = createField(DSL.name("FILE_NAME"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>information_schema.FILES.FILE_TYPE</code>.
     */
    val FILE_TYPE: TableField<FilesRecord, String?> = createField(DSL.name("FILE_TYPE"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.FILES.TABLESPACE_NAME</code>.
     */
    val TABLESPACE_NAME: TableField<FilesRecord, String?> = createField(DSL.name("TABLESPACE_NAME"), SQLDataType.VARCHAR(268).nullable(false), this, "")

    /**
     * The column <code>information_schema.FILES.TABLE_CATALOG</code>.
     */
    val TABLE_CATALOG: TableField<FilesRecord, String?> = createField(DSL.name("TABLE_CATALOG"), SQLDataType.CHAR.nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>information_schema.FILES.TABLE_SCHEMA</code>.
     */
    val TABLE_SCHEMA: TableField<FilesRecord, ByteArray?> = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.TABLE_NAME</code>.
     */
    val TABLE_NAME: TableField<FilesRecord, ByteArray?> = createField(DSL.name("TABLE_NAME"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.LOGFILE_GROUP_NAME</code>.
     */
    val LOGFILE_GROUP_NAME: TableField<FilesRecord, String?> = createField(DSL.name("LOGFILE_GROUP_NAME"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.FILES.LOGFILE_GROUP_NUMBER</code>.
     */
    val LOGFILE_GROUP_NUMBER: TableField<FilesRecord, Long?> = createField(DSL.name("LOGFILE_GROUP_NUMBER"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.ENGINE</code>.
     */
    val ENGINE: TableField<FilesRecord, String?> = createField(DSL.name("ENGINE"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.FILES.FULLTEXT_KEYS</code>.
     */
    val FULLTEXT_KEYS: TableField<FilesRecord, ByteArray?> = createField(DSL.name("FULLTEXT_KEYS"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.DELETED_ROWS</code>.
     */
    val DELETED_ROWS: TableField<FilesRecord, ByteArray?> = createField(DSL.name("DELETED_ROWS"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.UPDATE_COUNT</code>.
     */
    val UPDATE_COUNT: TableField<FilesRecord, ByteArray?> = createField(DSL.name("UPDATE_COUNT"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.FREE_EXTENTS</code>.
     */
    val FREE_EXTENTS: TableField<FilesRecord, Long?> = createField(DSL.name("FREE_EXTENTS"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.TOTAL_EXTENTS</code>.
     */
    val TOTAL_EXTENTS: TableField<FilesRecord, Long?> = createField(DSL.name("TOTAL_EXTENTS"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.EXTENT_SIZE</code>.
     */
    val EXTENT_SIZE: TableField<FilesRecord, Long?> = createField(DSL.name("EXTENT_SIZE"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.INITIAL_SIZE</code>.
     */
    val INITIAL_SIZE: TableField<FilesRecord, Long?> = createField(DSL.name("INITIAL_SIZE"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.MAXIMUM_SIZE</code>.
     */
    val MAXIMUM_SIZE: TableField<FilesRecord, Long?> = createField(DSL.name("MAXIMUM_SIZE"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.AUTOEXTEND_SIZE</code>.
     */
    val AUTOEXTEND_SIZE: TableField<FilesRecord, Long?> = createField(DSL.name("AUTOEXTEND_SIZE"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.CREATION_TIME</code>.
     */
    val CREATION_TIME: TableField<FilesRecord, ByteArray?> = createField(DSL.name("CREATION_TIME"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.LAST_UPDATE_TIME</code>.
     */
    val LAST_UPDATE_TIME: TableField<FilesRecord, ByteArray?> = createField(DSL.name("LAST_UPDATE_TIME"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.LAST_ACCESS_TIME</code>.
     */
    val LAST_ACCESS_TIME: TableField<FilesRecord, ByteArray?> = createField(DSL.name("LAST_ACCESS_TIME"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.RECOVER_TIME</code>.
     */
    val RECOVER_TIME: TableField<FilesRecord, ByteArray?> = createField(DSL.name("RECOVER_TIME"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.TRANSACTION_COUNTER</code>.
     */
    val TRANSACTION_COUNTER: TableField<FilesRecord, ByteArray?> = createField(DSL.name("TRANSACTION_COUNTER"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.VERSION</code>.
     */
    val VERSION: TableField<FilesRecord, Long?> = createField(DSL.name("VERSION"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.ROW_FORMAT</code>.
     */
    val ROW_FORMAT: TableField<FilesRecord, String?> = createField(DSL.name("ROW_FORMAT"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.FILES.TABLE_ROWS</code>.
     */
    val TABLE_ROWS: TableField<FilesRecord, ByteArray?> = createField(DSL.name("TABLE_ROWS"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.AVG_ROW_LENGTH</code>.
     */
    val AVG_ROW_LENGTH: TableField<FilesRecord, ByteArray?> = createField(DSL.name("AVG_ROW_LENGTH"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.DATA_LENGTH</code>.
     */
    val DATA_LENGTH: TableField<FilesRecord, ByteArray?> = createField(DSL.name("DATA_LENGTH"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.MAX_DATA_LENGTH</code>.
     */
    val MAX_DATA_LENGTH: TableField<FilesRecord, ByteArray?> = createField(DSL.name("MAX_DATA_LENGTH"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.INDEX_LENGTH</code>.
     */
    val INDEX_LENGTH: TableField<FilesRecord, ByteArray?> = createField(DSL.name("INDEX_LENGTH"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.DATA_FREE</code>.
     */
    val DATA_FREE: TableField<FilesRecord, Long?> = createField(DSL.name("DATA_FREE"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.FILES.CREATE_TIME</code>.
     */
    val CREATE_TIME: TableField<FilesRecord, ByteArray?> = createField(DSL.name("CREATE_TIME"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.UPDATE_TIME</code>.
     */
    val UPDATE_TIME: TableField<FilesRecord, ByteArray?> = createField(DSL.name("UPDATE_TIME"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.CHECK_TIME</code>.
     */
    val CHECK_TIME: TableField<FilesRecord, ByteArray?> = createField(DSL.name("CHECK_TIME"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.CHECKSUM</code>.
     */
    val CHECKSUM: TableField<FilesRecord, ByteArray?> = createField(DSL.name("CHECKSUM"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.FILES.STATUS</code>.
     */
    val STATUS: TableField<FilesRecord, String?> = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.FILES.EXTRA</code>.
     */
    val EXTRA: TableField<FilesRecord, String?> = createField(DSL.name("EXTRA"), SQLDataType.VARCHAR(256), this, "")

    private constructor(alias: Name, aliased: Table<FilesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<FilesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<FilesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.FILES</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.FILES</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.FILES</code> table reference
     */
    constructor(): this(DSL.name("FILES"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Files = Files(DSL.name(alias), this)
    override fun `as`(alias: Name): Files = Files(alias, this)
    override fun `as`(alias: Table<*>): Files = Files(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Files = Files(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Files = Files(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Files = Files(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Files = Files(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Files = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Files = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Files = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Files = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Files = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Files = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Files = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Files = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Files = where(DSL.notExists(select))
}
