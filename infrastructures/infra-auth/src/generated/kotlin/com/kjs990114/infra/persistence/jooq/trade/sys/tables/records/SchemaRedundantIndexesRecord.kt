/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.tables.records


import com.kjs990114.infra.persistence.jooq.trade.sys.tables.SchemaRedundantIndexes

import org.jooq.Field
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SchemaRedundantIndexesRecord() : TableRecordImpl<SchemaRedundantIndexesRecord>(SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES), Record10<String?, String?, String?, String?, Int?, String?, String?, Int?, Int?, String?> {

    open var tableSchema: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var redundantIndexName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var redundantIndexColumns: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var redundantIndexNonUnique: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var dominantIndexName: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var dominantIndexColumns: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var dominantIndexNonUnique: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var subpartExists: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open var sqlDropIndex: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<String?, String?, String?, String?, Int?, String?, String?, Int?, Int?, String?> = super.fieldsRow() as Row10<String?, String?, String?, String?, Int?, String?, String?, Int?, Int?, String?>
    override fun valuesRow(): Row10<String?, String?, String?, String?, Int?, String?, String?, Int?, Int?, String?> = super.valuesRow() as Row10<String?, String?, String?, String?, Int?, String?, String?, Int?, Int?, String?>
    override fun field1(): Field<String?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.TABLE_SCHEMA
    override fun field2(): Field<String?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.TABLE_NAME
    override fun field3(): Field<String?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.REDUNDANT_INDEX_NAME
    override fun field4(): Field<String?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.REDUNDANT_INDEX_COLUMNS
    override fun field5(): Field<Int?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.REDUNDANT_INDEX_NON_UNIQUE
    override fun field6(): Field<String?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.DOMINANT_INDEX_NAME
    override fun field7(): Field<String?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.DOMINANT_INDEX_COLUMNS
    override fun field8(): Field<Int?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.DOMINANT_INDEX_NON_UNIQUE
    override fun field9(): Field<Int?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.SUBPART_EXISTS
    override fun field10(): Field<String?> = SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.SQL_DROP_INDEX
    override fun component1(): String? = tableSchema
    override fun component2(): String? = tableName
    override fun component3(): String? = redundantIndexName
    override fun component4(): String? = redundantIndexColumns
    override fun component5(): Int? = redundantIndexNonUnique
    override fun component6(): String? = dominantIndexName
    override fun component7(): String? = dominantIndexColumns
    override fun component8(): Int? = dominantIndexNonUnique
    override fun component9(): Int? = subpartExists
    override fun component10(): String? = sqlDropIndex
    override fun value1(): String? = tableSchema
    override fun value2(): String? = tableName
    override fun value3(): String? = redundantIndexName
    override fun value4(): String? = redundantIndexColumns
    override fun value5(): Int? = redundantIndexNonUnique
    override fun value6(): String? = dominantIndexName
    override fun value7(): String? = dominantIndexColumns
    override fun value8(): Int? = dominantIndexNonUnique
    override fun value9(): Int? = subpartExists
    override fun value10(): String? = sqlDropIndex

    override fun value1(value: String?): SchemaRedundantIndexesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): SchemaRedundantIndexesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): SchemaRedundantIndexesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): SchemaRedundantIndexesRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): SchemaRedundantIndexesRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): SchemaRedundantIndexesRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): SchemaRedundantIndexesRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Int?): SchemaRedundantIndexesRecord {
        set(7, value)
        return this
    }

    override fun value9(value: Int?): SchemaRedundantIndexesRecord {
        set(8, value)
        return this
    }

    override fun value10(value: String?): SchemaRedundantIndexesRecord {
        set(9, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?, value5: Int?, value6: String?, value7: String?, value8: Int?, value9: Int?, value10: String?): SchemaRedundantIndexesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised SchemaRedundantIndexesRecord
     */
    constructor(tableSchema: String? = null, tableName: String? = null, redundantIndexName: String? = null, redundantIndexColumns: String? = null, redundantIndexNonUnique: Int? = null, dominantIndexName: String? = null, dominantIndexColumns: String? = null, dominantIndexNonUnique: Int? = null, subpartExists: Int? = null, sqlDropIndex: String? = null): this() {
        this.tableSchema = tableSchema
        this.tableName = tableName
        this.redundantIndexName = redundantIndexName
        this.redundantIndexColumns = redundantIndexColumns
        this.redundantIndexNonUnique = redundantIndexNonUnique
        this.dominantIndexName = dominantIndexName
        this.dominantIndexColumns = dominantIndexColumns
        this.dominantIndexNonUnique = dominantIndexNonUnique
        this.subpartExists = subpartExists
        this.sqlDropIndex = sqlDropIndex
        resetChangedOnNotNull()
    }
}
