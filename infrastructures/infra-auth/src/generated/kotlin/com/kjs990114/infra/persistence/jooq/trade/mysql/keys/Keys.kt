/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.mysql.keys


import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ColumnsPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Component
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Db
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.DefaultRoles
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.EngineCost
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Func
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.GlobalGrants
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.GtidExecuted
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpCategory
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpKeyword
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpRelation
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.HelpTopic
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.InnodbIndexStats
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.InnodbTableStats
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.NdbBinlogIndex
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.PasswordHistory
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Plugin
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ProcsPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ProxiesPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ReplicationAsynchronousConnectionFailover
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ReplicationAsynchronousConnectionFailoverManaged
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ReplicationGroupConfigurationVersion
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ReplicationGroupMemberActions
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.RoleEdges
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.ServerCost
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.Servers
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.SlaveMasterInfo
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.SlaveRelayLogInfo
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.SlaveWorkerInfo
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TablesPriv
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZone
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneLeapSecond
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneName
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneTransition
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.TimeZoneTransitionType
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.User
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ColumnsPrivRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ComponentRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.DbRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.DefaultRolesRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.EngineCostRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.FuncRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.GlobalGrantsRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.GtidExecutedRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.HelpCategoryRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.HelpKeywordRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.HelpRelationRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.HelpTopicRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.InnodbIndexStatsRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.InnodbTableStatsRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.NdbBinlogIndexRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.PasswordHistoryRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.PluginRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ProcsPrivRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ProxiesPrivRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ReplicationAsynchronousConnectionFailoverManagedRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ReplicationAsynchronousConnectionFailoverRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ReplicationGroupConfigurationVersionRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ReplicationGroupMemberActionsRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.RoleEdgesRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ServerCostRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.ServersRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.SlaveMasterInfoRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.SlaveRelayLogInfoRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.SlaveWorkerInfoRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.TablesPrivRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.TimeZoneLeapSecondRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.TimeZoneNameRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.TimeZoneRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.TimeZoneTransitionRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.TimeZoneTransitionTypeRecord
import com.kjs990114.infra.persistence.jooq.trade.mysql.tables.records.UserRecord

import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val KEY_COLUMNS_PRIV_PRIMARY: UniqueKey<ColumnsPrivRecord> = Internal.createUniqueKey(ColumnsPriv.COLUMNS_PRIV, DSL.name("KEY_columns_priv_PRIMARY"), arrayOf(ColumnsPriv.COLUMNS_PRIV.HOST, ColumnsPriv.COLUMNS_PRIV.USER, ColumnsPriv.COLUMNS_PRIV.DB, ColumnsPriv.COLUMNS_PRIV.TABLE_NAME, ColumnsPriv.COLUMNS_PRIV.COLUMN_NAME), true)
val KEY_COMPONENT_PRIMARY: UniqueKey<ComponentRecord> = Internal.createUniqueKey(Component.COMPONENT, DSL.name("KEY_component_PRIMARY"), arrayOf(Component.COMPONENT.COMPONENT_ID), true)
val KEY_DB_PRIMARY: UniqueKey<DbRecord> = Internal.createUniqueKey(Db.DB, DSL.name("KEY_db_PRIMARY"), arrayOf(Db.DB.HOST, Db.DB.USER, Db.DB.DB_), true)
val KEY_DEFAULT_ROLES_PRIMARY: UniqueKey<DefaultRolesRecord> = Internal.createUniqueKey(DefaultRoles.DEFAULT_ROLES, DSL.name("KEY_default_roles_PRIMARY"), arrayOf(DefaultRoles.DEFAULT_ROLES.HOST, DefaultRoles.DEFAULT_ROLES.USER, DefaultRoles.DEFAULT_ROLES.DEFAULT_ROLE_HOST, DefaultRoles.DEFAULT_ROLES.DEFAULT_ROLE_USER), true)
val KEY_ENGINE_COST_PRIMARY: UniqueKey<EngineCostRecord> = Internal.createUniqueKey(EngineCost.ENGINE_COST, DSL.name("KEY_engine_cost_PRIMARY"), arrayOf(EngineCost.ENGINE_COST.COST_NAME, EngineCost.ENGINE_COST.ENGINE_NAME, EngineCost.ENGINE_COST.DEVICE_TYPE), true)
val KEY_FUNC_PRIMARY: UniqueKey<FuncRecord> = Internal.createUniqueKey(Func.FUNC, DSL.name("KEY_func_PRIMARY"), arrayOf(Func.FUNC.NAME), true)
val KEY_GLOBAL_GRANTS_PRIMARY: UniqueKey<GlobalGrantsRecord> = Internal.createUniqueKey(GlobalGrants.GLOBAL_GRANTS, DSL.name("KEY_global_grants_PRIMARY"), arrayOf(GlobalGrants.GLOBAL_GRANTS.USER, GlobalGrants.GLOBAL_GRANTS.HOST, GlobalGrants.GLOBAL_GRANTS.PRIV), true)
val KEY_GTID_EXECUTED_PRIMARY: UniqueKey<GtidExecutedRecord> = Internal.createUniqueKey(GtidExecuted.GTID_EXECUTED, DSL.name("KEY_gtid_executed_PRIMARY"), arrayOf(GtidExecuted.GTID_EXECUTED.SOURCE_UUID, GtidExecuted.GTID_EXECUTED.INTERVAL_START), true)
val KEY_HELP_CATEGORY_NAME: UniqueKey<HelpCategoryRecord> = Internal.createUniqueKey(HelpCategory.HELP_CATEGORY, DSL.name("KEY_help_category_name"), arrayOf(HelpCategory.HELP_CATEGORY.NAME), true)
val KEY_HELP_CATEGORY_PRIMARY: UniqueKey<HelpCategoryRecord> = Internal.createUniqueKey(HelpCategory.HELP_CATEGORY, DSL.name("KEY_help_category_PRIMARY"), arrayOf(HelpCategory.HELP_CATEGORY.HELP_CATEGORY_ID), true)
val KEY_HELP_KEYWORD_NAME: UniqueKey<HelpKeywordRecord> = Internal.createUniqueKey(HelpKeyword.HELP_KEYWORD, DSL.name("KEY_help_keyword_name"), arrayOf(HelpKeyword.HELP_KEYWORD.NAME), true)
val KEY_HELP_KEYWORD_PRIMARY: UniqueKey<HelpKeywordRecord> = Internal.createUniqueKey(HelpKeyword.HELP_KEYWORD, DSL.name("KEY_help_keyword_PRIMARY"), arrayOf(HelpKeyword.HELP_KEYWORD.HELP_KEYWORD_ID), true)
val KEY_HELP_RELATION_PRIMARY: UniqueKey<HelpRelationRecord> = Internal.createUniqueKey(HelpRelation.HELP_RELATION, DSL.name("KEY_help_relation_PRIMARY"), arrayOf(HelpRelation.HELP_RELATION.HELP_KEYWORD_ID, HelpRelation.HELP_RELATION.HELP_TOPIC_ID), true)
val KEY_HELP_TOPIC_NAME: UniqueKey<HelpTopicRecord> = Internal.createUniqueKey(HelpTopic.HELP_TOPIC, DSL.name("KEY_help_topic_name"), arrayOf(HelpTopic.HELP_TOPIC.NAME), true)
val KEY_HELP_TOPIC_PRIMARY: UniqueKey<HelpTopicRecord> = Internal.createUniqueKey(HelpTopic.HELP_TOPIC, DSL.name("KEY_help_topic_PRIMARY"), arrayOf(HelpTopic.HELP_TOPIC.HELP_TOPIC_ID), true)
val KEY_INNODB_INDEX_STATS_PRIMARY: UniqueKey<InnodbIndexStatsRecord> = Internal.createUniqueKey(InnodbIndexStats.INNODB_INDEX_STATS, DSL.name("KEY_innodb_index_stats_PRIMARY"), arrayOf(InnodbIndexStats.INNODB_INDEX_STATS.DATABASE_NAME, InnodbIndexStats.INNODB_INDEX_STATS.TABLE_NAME, InnodbIndexStats.INNODB_INDEX_STATS.INDEX_NAME, InnodbIndexStats.INNODB_INDEX_STATS.STAT_NAME), true)
val KEY_INNODB_TABLE_STATS_PRIMARY: UniqueKey<InnodbTableStatsRecord> = Internal.createUniqueKey(InnodbTableStats.INNODB_TABLE_STATS, DSL.name("KEY_innodb_table_stats_PRIMARY"), arrayOf(InnodbTableStats.INNODB_TABLE_STATS.DATABASE_NAME, InnodbTableStats.INNODB_TABLE_STATS.TABLE_NAME), true)
val KEY_NDB_BINLOG_INDEX_PRIMARY: UniqueKey<NdbBinlogIndexRecord> = Internal.createUniqueKey(NdbBinlogIndex.NDB_BINLOG_INDEX, DSL.name("KEY_ndb_binlog_index_PRIMARY"), arrayOf(NdbBinlogIndex.NDB_BINLOG_INDEX.EPOCH, NdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_SERVER_ID, NdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_EPOCH), true)
val KEY_PASSWORD_HISTORY_PRIMARY: UniqueKey<PasswordHistoryRecord> = Internal.createUniqueKey(PasswordHistory.PASSWORD_HISTORY, DSL.name("KEY_password_history_PRIMARY"), arrayOf(PasswordHistory.PASSWORD_HISTORY.HOST, PasswordHistory.PASSWORD_HISTORY.USER, PasswordHistory.PASSWORD_HISTORY.PASSWORD_TIMESTAMP), true)
val KEY_PLUGIN_PRIMARY: UniqueKey<PluginRecord> = Internal.createUniqueKey(Plugin.PLUGIN, DSL.name("KEY_plugin_PRIMARY"), arrayOf(Plugin.PLUGIN.NAME), true)
val KEY_PROCS_PRIV_PRIMARY: UniqueKey<ProcsPrivRecord> = Internal.createUniqueKey(ProcsPriv.PROCS_PRIV, DSL.name("KEY_procs_priv_PRIMARY"), arrayOf(ProcsPriv.PROCS_PRIV.HOST, ProcsPriv.PROCS_PRIV.USER, ProcsPriv.PROCS_PRIV.DB, ProcsPriv.PROCS_PRIV.ROUTINE_NAME, ProcsPriv.PROCS_PRIV.ROUTINE_TYPE), true)
val KEY_PROXIES_PRIV_PRIMARY: UniqueKey<ProxiesPrivRecord> = Internal.createUniqueKey(ProxiesPriv.PROXIES_PRIV, DSL.name("KEY_proxies_priv_PRIMARY"), arrayOf(ProxiesPriv.PROXIES_PRIV.HOST, ProxiesPriv.PROXIES_PRIV.USER, ProxiesPriv.PROXIES_PRIV.PROXIED_HOST, ProxiesPriv.PROXIES_PRIV.PROXIED_USER), true)
val KEY_REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_PRIMARY: UniqueKey<ReplicationAsynchronousConnectionFailoverRecord> = Internal.createUniqueKey(ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER, DSL.name("KEY_replication_asynchronous_connection_failover_PRIMARY"), arrayOf(ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.CHANNEL_NAME, ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.HOST, ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.PORT, ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.NETWORK_NAMESPACE, ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.MANAGED_NAME), true)
val KEY_REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED_PRIMARY: UniqueKey<ReplicationAsynchronousConnectionFailoverManagedRecord> = Internal.createUniqueKey(ReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED, DSL.name("KEY_replication_asynchronous_connection_failover_managed_PRIMARY"), arrayOf(ReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED.CHANNEL_NAME, ReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED.MANAGED_NAME), true)
val KEY_REPLICATION_GROUP_CONFIGURATION_VERSION_PRIMARY: UniqueKey<ReplicationGroupConfigurationVersionRecord> = Internal.createUniqueKey(ReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION, DSL.name("KEY_replication_group_configuration_version_PRIMARY"), arrayOf(ReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION.NAME), true)
val KEY_REPLICATION_GROUP_MEMBER_ACTIONS_PRIMARY: UniqueKey<ReplicationGroupMemberActionsRecord> = Internal.createUniqueKey(ReplicationGroupMemberActions.REPLICATION_GROUP_MEMBER_ACTIONS, DSL.name("KEY_replication_group_member_actions_PRIMARY"), arrayOf(ReplicationGroupMemberActions.REPLICATION_GROUP_MEMBER_ACTIONS.NAME, ReplicationGroupMemberActions.REPLICATION_GROUP_MEMBER_ACTIONS.EVENT), true)
val KEY_ROLE_EDGES_PRIMARY: UniqueKey<RoleEdgesRecord> = Internal.createUniqueKey(RoleEdges.ROLE_EDGES, DSL.name("KEY_role_edges_PRIMARY"), arrayOf(RoleEdges.ROLE_EDGES.FROM_HOST, RoleEdges.ROLE_EDGES.FROM_USER, RoleEdges.ROLE_EDGES.TO_HOST, RoleEdges.ROLE_EDGES.TO_USER), true)
val KEY_SERVER_COST_PRIMARY: UniqueKey<ServerCostRecord> = Internal.createUniqueKey(ServerCost.SERVER_COST, DSL.name("KEY_server_cost_PRIMARY"), arrayOf(ServerCost.SERVER_COST.COST_NAME), true)
val KEY_SERVERS_PRIMARY: UniqueKey<ServersRecord> = Internal.createUniqueKey(Servers.SERVERS, DSL.name("KEY_servers_PRIMARY"), arrayOf(Servers.SERVERS.SERVER_NAME), true)
val KEY_SLAVE_MASTER_INFO_PRIMARY: UniqueKey<SlaveMasterInfoRecord> = Internal.createUniqueKey(SlaveMasterInfo.SLAVE_MASTER_INFO, DSL.name("KEY_slave_master_info_PRIMARY"), arrayOf(SlaveMasterInfo.SLAVE_MASTER_INFO.CHANNEL_NAME), true)
val KEY_SLAVE_RELAY_LOG_INFO_PRIMARY: UniqueKey<SlaveRelayLogInfoRecord> = Internal.createUniqueKey(SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO, DSL.name("KEY_slave_relay_log_info_PRIMARY"), arrayOf(SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.CHANNEL_NAME), true)
val KEY_SLAVE_WORKER_INFO_PRIMARY: UniqueKey<SlaveWorkerInfoRecord> = Internal.createUniqueKey(SlaveWorkerInfo.SLAVE_WORKER_INFO, DSL.name("KEY_slave_worker_info_PRIMARY"), arrayOf(SlaveWorkerInfo.SLAVE_WORKER_INFO.CHANNEL_NAME, SlaveWorkerInfo.SLAVE_WORKER_INFO.ID), true)
val KEY_TABLES_PRIV_PRIMARY: UniqueKey<TablesPrivRecord> = Internal.createUniqueKey(TablesPriv.TABLES_PRIV, DSL.name("KEY_tables_priv_PRIMARY"), arrayOf(TablesPriv.TABLES_PRIV.HOST, TablesPriv.TABLES_PRIV.USER, TablesPriv.TABLES_PRIV.DB, TablesPriv.TABLES_PRIV.TABLE_NAME), true)
val KEY_TIME_ZONE_PRIMARY: UniqueKey<TimeZoneRecord> = Internal.createUniqueKey(TimeZone.TIME_ZONE, DSL.name("KEY_time_zone_PRIMARY"), arrayOf(TimeZone.TIME_ZONE.TIME_ZONE_ID), true)
val KEY_TIME_ZONE_LEAP_SECOND_PRIMARY: UniqueKey<TimeZoneLeapSecondRecord> = Internal.createUniqueKey(TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND, DSL.name("KEY_time_zone_leap_second_PRIMARY"), arrayOf(TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND.TRANSITION_TIME), true)
val KEY_TIME_ZONE_NAME_PRIMARY: UniqueKey<TimeZoneNameRecord> = Internal.createUniqueKey(TimeZoneName.TIME_ZONE_NAME, DSL.name("KEY_time_zone_name_PRIMARY"), arrayOf(TimeZoneName.TIME_ZONE_NAME.NAME), true)
val KEY_TIME_ZONE_TRANSITION_PRIMARY: UniqueKey<TimeZoneTransitionRecord> = Internal.createUniqueKey(TimeZoneTransition.TIME_ZONE_TRANSITION, DSL.name("KEY_time_zone_transition_PRIMARY"), arrayOf(TimeZoneTransition.TIME_ZONE_TRANSITION.TIME_ZONE_ID, TimeZoneTransition.TIME_ZONE_TRANSITION.TRANSITION_TIME), true)
val KEY_TIME_ZONE_TRANSITION_TYPE_PRIMARY: UniqueKey<TimeZoneTransitionTypeRecord> = Internal.createUniqueKey(TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE, DSL.name("KEY_time_zone_transition_type_PRIMARY"), arrayOf(TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TIME_ZONE_ID, TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TRANSITION_TYPE_ID), true)
val KEY_USER_PRIMARY: UniqueKey<UserRecord> = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), arrayOf(User.USER.HOST, User.USER.USER_), true)
