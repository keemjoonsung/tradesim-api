/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.auth.tables


import com.kjs990114.infra.persistence.jooq.trade.auth.Auth
import com.kjs990114.infra.persistence.jooq.trade.auth.keys.KEY_USER_IDENTIFIER
import com.kjs990114.infra.persistence.jooq.trade.auth.keys.KEY_USER_IDENTIFIER_2
import com.kjs990114.infra.persistence.jooq.trade.auth.keys.KEY_USER_PRIMARY
import com.kjs990114.infra.persistence.jooq.trade.auth.tables.records.UserRecord

import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.SelectField
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class User(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UserRecord>?,
    parentPath: InverseForeignKey<out Record, UserRecord>?,
    aliased: Table<UserRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UserRecord>(
    alias,
    Auth.AUTH,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>auth.user</code>
         */
        val USER: User = User()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRecord> = UserRecord::class.java

    /**
     * The column <code>auth.user.id</code>. PK
     */
    val ID: TableField<UserRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "PK")

    /**
     * The column <code>auth.user.identifier</code>. 아이디 (이메일)
     */
    val IDENTIFIER: TableField<UserRecord, String?> = createField(DSL.name("identifier"), SQLDataType.VARCHAR(256).nullable(false), this, "아이디 (이메일)")

    /**
     * The column <code>auth.user.password</code>. 비밀번호
     */
    val PASSWORD: TableField<UserRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(256).nullable(false), this, "비밀번호")

    /**
     * The column <code>auth.user.withdrawn</code>. 회원 탈퇴 여부
     */
    val WITHDRAWN: TableField<UserRecord, Boolean?> = createField(DSL.name("withdrawn"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "회원 탈퇴 여부")

    /**
     * The column <code>auth.user.role</code>. ROLE
     */
    val ROLE: TableField<UserRecord, String?> = createField(DSL.name("role"), SQLDataType.VARCHAR(64).nullable(false), this, "ROLE")

    /**
     * The column <code>auth.user.created_at</code>. 생성일시
     */
    val CREATED_AT: TableField<UserRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "생성일시")

    /**
     * The column <code>auth.user.updated_at</code>. 수정일시
     */
    val UPDATED_AT: TableField<UserRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "수정일시")

    /**
     * The column <code>auth.user.deleted</code>. Soft Delete 상태 관리하는 stored
     * virtual column
     */
    val DELETED: TableField<UserRecord, Boolean?> = createField(DSL.name("deleted"), SQLDataType.BOOLEAN, this, "Soft Delete 상태 관리하는 stored virtual column")

    private constructor(alias: Name, aliased: Table<UserRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UserRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UserRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>auth.user</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>auth.user</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>auth.user</code> table reference
     */
    constructor(): this(DSL.name("user"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Auth.AUTH
    override fun getIdentity(): Identity<UserRecord, Long?> = super.getIdentity() as Identity<UserRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<UserRecord> = KEY_USER_PRIMARY
    override fun getUniqueKeys(): List<UniqueKey<UserRecord>> = listOf(KEY_USER_IDENTIFIER, KEY_USER_IDENTIFIER_2)
    override fun `as`(alias: String): User = User(DSL.name(alias), this)
    override fun `as`(alias: Name): User = User(alias, this)
    override fun `as`(alias: Table<*>): User = User(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): User = User(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): User = User(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): User = User(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): User = User(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): User = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): User = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): User = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): User = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): User = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): User = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): User = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): User = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): User = where(DSL.notExists(select))

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Long?, String?, String?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Boolean?> = super.fieldsRow() as Row8<Long?, String?, String?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Boolean?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Boolean?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?, Boolean?, String?, LocalDateTime?, LocalDateTime?, Boolean?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
