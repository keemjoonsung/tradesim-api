/*
 * This file is generated by jOOQ.
 */
package com.kjs990114.infra.persistence.jooq.trade.sys.routines


import com.kjs990114.infra.persistence.jooq.trade.sys.Sys

import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * 
 * Description
 * -----------
 * 
 * Takes the query in the argument and executes it using a prepared statement.
 * The prepared statement is deallocated,
 * so the procedure is mainly useful for executing one off dynamically created
 * queries.
 * 
 * The sys_execute_prepared_stmt prepared statement name is used for the query
 * and is required not to exist.
 * 
 * 
 * Parameters
 * -----------
 * 
 * in_query (longtext CHARACTER SET UTF8MB4):
 *   The query to execute.
 * 
 * 
 * Configuration Options
 * ----------------------
 * 
 * sys.debug
 *   Whether to provide debugging output.
 *   Default is 'OFF'. Set to 'ON' to include.
 * 
 * 
 * Example
 * --------
 * 
 * mysql&gt; CALL sys.execute_prepared_stmt('SELECT * FROM sys.sys_config');
 * +------------------------+-------+---------------------+--------+
 * | variable               | value | set_time            | set_by |
 * +------------------------+-------+---------------------+--------+
 * | statement_truncate_len | 64    | 2015-06-30 13:06:00 | NULL   |
 * +------------------------+-------+---------------------+--------+
 * 1 row in set (0.00 sec)
 * 
 * Query OK, 0 rows affected (0.00 sec)

 */
@Suppress("UNCHECKED_CAST")
open class ExecutePreparedStmt : AbstractRoutine<java.lang.Void>("execute_prepared_stmt", Sys.SYS) {
    companion object {

        /**
         * The parameter <code>sys.execute_prepared_stmt.in_query</code>.
         */
        val IN_QUERY: Parameter<String?> = Internal.createParameter("in_query", SQLDataType.CLOB, false, false)
    }

    init {
        addInParameter(ExecutePreparedStmt.IN_QUERY)
    }

    /**
     * Set the <code>in_query</code> parameter IN value to the routine
     */
    fun setInQuery(value: String?): Unit = setValue(ExecutePreparedStmt.IN_QUERY, value)
}
